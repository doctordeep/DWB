!function(t){window.webpackChunk=function(e,r){for(var i in r)t[i]=r[i];for(;e.length;)n[e.pop()]=1};var e={},n={0:1};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.e=function(t){var e=[];return e.push(Promise.resolve().then(function(){n[t]||importScripts(t+".hash.worker.js")})),Promise.all(e)},r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=5)}([function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",function(){return i}),n.d(e,"__assign",function(){return o}),n.d(e,"__rest",function(){return a}),n.d(e,"__decorate",function(){return s}),n.d(e,"__param",function(){return u}),n.d(e,"__metadata",function(){return c}),n.d(e,"__awaiter",function(){return h}),n.d(e,"__generator",function(){return l}),n.d(e,"__exportStar",function(){return f}),n.d(e,"__values",function(){return p}),n.d(e,"__read",function(){return d}),n.d(e,"__spread",function(){return v}),n.d(e,"__await",function(){return y}),n.d(e,"__asyncGenerator",function(){return g}),n.d(e,"__asyncDelegator",function(){return _}),n.d(e,"__asyncValues",function(){return m}),n.d(e,"__makeTemplateObject",function(){return b}),n.d(e,"__importStar",function(){return w}),n.d(e,"__importDefault",function(){return E});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&(n[r[i]]=t[r[i]])}return n}function s(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,r){return new(n||(n=Promise))(function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(a,s)}u((r=r.apply(t,e||[])).next())})}function l(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=r[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function y(t){return this instanceof y?(this.v=t,this):new y(t)}function g(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise(function(n,r){o.push([t,e,n,r])>1||s(t,e)})})}function s(t,e){try{!function(t){t.value instanceof y?Promise.resolve(t.value.v).then(u,c):h(o[0][2],t)}(i[t](e))}catch(t){h(o[0][3],t)}}function u(t){s("next",t)}function c(t){s("throw",t)}function h(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function _(t){var e,n;return e={},r("next"),r("throw",function(t){throw t}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){t[r]&&(e[r]=function(e){return(n=!n)?{value:y(t[r](e)),done:"return"===r}:i?i(e):e})}}function m(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=t[Symbol.asyncIterator];return e?e.call(t):p(t)}function b(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function w(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function E(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),i=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o="[DEFAULT]",a=[],s=function(){function t(t,e,n){this.firebase_=n,this.isDeleted_=!1,this.services_={},this.name_=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled||!1,this.options_=r.deepCopy(t),this.INTERNAL={getUid:function(){return null},getToken:function(){return Promise.resolve(null)},addAuthTokenListener:function(t){a.push(t),setTimeout(function(){return t(null)},0)},removeAuthTokenListener:function(t){a=a.filter(function(e){return e!==t})}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this._automaticDataCollectionEnabled},set:function(t){this.checkDestroyed_(),this._automaticDataCollectionEnabled=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise(function(e){t.checkDestroyed_(),e()}).then(function(){t.firebase_.INTERNAL.removeApp(t.name_);var e=[];return Object.keys(t.services_).forEach(function(n){Object.keys(t.services_[n]).forEach(function(r){e.push(t.services_[n][r])})}),Promise.all(e.map(function(t){return t.INTERNAL.delete()}))}).then(function(){t.isDeleted_=!0,t.services_={}})},t.prototype._getService=function(t,e){if(void 0===e&&(e=o),this.checkDestroyed_(),this.services_[t]||(this.services_[t]={}),!this.services_[t][e]){var n=e!==o?e:void 0,r=this.firebase_.INTERNAL.factories[t](this,this.extendApp.bind(this),n);this.services_[t][e]=r}return this.services_[t][e]},t.prototype.extendApp=function(t){var e=this;r.deepExtend(this,t),t.INTERNAL&&t.INTERNAL.addAuthTokenListener&&(a.forEach(function(t){e.INTERNAL.addAuthTokenListener(t)}),a=[])},t.prototype.checkDestroyed_=function(){this.isDeleted_&&u("app-deleted",{name:this.name_})},t}();function u(t,e){throw c.create(t,e)}s.prototype.name&&s.prototype.options||s.prototype.delete||console.log("dc");var c=new r.ErrorFactory("app","Firebase",{"no-app":"No Firebase App '{$name}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$name}","duplicate-app":"Firebase App named '{$name}' already exists","app-deleted":"Firebase App named '{$name}' already deleted","duplicate-service":"Firebase service named '{$name}' already registered","sa-not-supported":"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain","invalid-app-argument":"firebase.{$name}() takes either no argument or a Firebase App instance."}),h=function t(){var e={},n={},a={},c={__esModule:!0,initializeApp:function(t,n){if(void 0===n&&(n={}),"object"!=typeof n||null===n){var r=n;n={name:r}}var a=n;void 0===a.name&&(a.name=o);var h=a.name;"string"==typeof h&&h||u("bad-app-name",{name:h+""}),i(e,h)&&u("duplicate-app",{name:h});var l=new s(t,a,c);return e[h]=l,f(l,"create"),l},app:h,apps:null,Promise:Promise,SDK_VERSION:"5.0.4",INTERNAL:{registerService:function(t,e,i,o,f){n[t]&&u("duplicate-service",{name:t}),n[t]=e,o&&(a[t]=o,l().forEach(function(t){o("create",t)}));var p=function(e){return void 0===e&&(e=h()),"function"!=typeof e[t]&&u("invalid-app-argument",{name:t}),e[t]()};return void 0!==i&&r.deepExtend(p,i),c[t]=p,s.prototype[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return this._getService.bind(this,t).apply(this,f?e:[])},p},createFirebaseNamespace:t,extendNamespace:function(t){r.deepExtend(c,t)},createSubscribe:r.createSubscribe,ErrorFactory:r.ErrorFactory,removeApp:function(t){f(e[t],"delete"),delete e[t]},factories:n,useAsService:p,Promise:Promise,deepExtend:r.deepExtend}};function h(t){return i(e,t=t||o)||u("no-app",{name:t}),e[t]}function l(){return Object.keys(e).map(function(t){return e[t]})}function f(t,e){Object.keys(n).forEach(function(n){var r=p(t,n);null!==r&&a[r]&&a[r](e,t)})}function p(t,e){if("serverAuth"===e)return null;var n=e;return t.options,n}return r.patchProperty(c,"default",c),Object.defineProperty(c,"apps",{get:l}),r.patchProperty(h,"App",s),c}();e.firebase=h,e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},s=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,h=o>>2,l=(3&o)<<4|s>>4,f=(15&s)<<2|c>>6,p=63&c;u||(p=64,a||(f=64)),r.push(n[h],n[l],n[f],n[p])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(s=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(a>>10)),e[r++]=String.fromCharCode(56320+(1023&a))}else{o=t[n++];var s=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],a=i<t.length?n[t.charAt(i)]:0,s=++i<t.length?n[t.charAt(i)]:64,u=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!=s){var h=a<<4&240|s>>2;if(r.push(h),64!=u){var l=s<<6&192|u;r.push(l)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},c=function(t){try{return u.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function h(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=h(t[n],e[n]));return t}var l=function(){function t(){var t=this;this.promise=new Promise(function(e,n){t.resolve=e,t.reject=n})}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch(function(){}),1===t.length?t(n):t(n,r))}},t}(),f=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""},p="FirebaseError",d=Error.captureStackTrace;var v=function(){return function(t,e){if(this.code=t,this.message=e,d)d(this,y.prototype.create);else try{throw Error.apply(this,arguments)}catch(t){this.name=p,Object.defineProperty(this,"stack",{get:function(){return t.stack}})}}}();v.prototype=Object.create(Error.prototype),v.prototype.constructor=v,v.prototype.name=p;var y=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n,this.pattern=/\{\$([^}]+)}/g}return t.prototype.create=function(t,e){void 0===e&&(e={});var n,r=this.errors[t],i=this.service+"/"+t;n=void 0===r?"Error":r.replace(this.pattern,function(t,n){var r=e[n];return void 0!==r?r.toString():"<"+n+"?>"}),n=this.serviceName+": "+n+" ("+i+").";var o=new v(i,n);for(var a in e)e.hasOwnProperty(a)&&"_"!==a.slice(-1)&&(o[a]=e[a]);return o},t}();function g(t){return JSON.parse(t)}var _=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=g(c(o[0])||""),n=g(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}},m=function(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])},b=function(t,e){return m(e,function(e,n){t[e]=n}),t},w=function(t,e,n){for(var r in t)if(e.call(n,t[r],r,t))return r},E=function(t){function e(){var e=t.call(this)||this;e.chain_=[],e.buf_=[],e.W_=[],e.pad_=[],e.inbuf_=0,e.total_=0,e.blockSize=64,e.pad_[0]=128;for(var n=1;n<e.blockSize;++n)e.pad_[n]=0;return e.reset(),e}return r.__extends(e,t),e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):r<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782);i=(s<<5|s>>>27)+o+l+a+n[r]&4294967295;l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},e.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0==o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o==this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o==this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},e.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},e}(function(){return function(){this.blockSize=-1}}());var T=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then(function(){t(n)}).catch(function(t){n.error(t)})}return t.prototype.next=function(t){this.forEachObserver(function(e){e.next(t)})},t.prototype.error=function(t){this.forEachObserver(function(e){e.error(t)}),this.close(t)},t.prototype.complete=function(){this.forEachObserver(function(t){t.complete()}),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=e;n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:n}).next&&(r.next=S),void 0===r.error&&(r.error=S),void 0===r.complete&&(r.complete=S);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then(function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}}),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then(function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}})},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then(function(){e.observers=void 0,e.onNoObservers=void 0}))},t}();function S(){}function C(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=t+" failed: ";return i+=r+" argument "}e.assert=o,e.assertionError=a,e.base64=u,e.base64Decode=c,e.base64Encode=function(t){var e=s(t);return u.encodeByteArray(e,!0)},e.CONSTANTS=i,e.deepCopy=function(t){return h(void 0,t)},e.deepExtend=h,e.patchProperty=function(t,e,n){t[e]=n},e.Deferred=l,e.getUA=f,e.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(f())},e.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},e.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},e.ErrorFactory=y,e.FirebaseError=v,e.patchCapture=function(t){var e=d;return d=t,e},e.jsonEval=g,e.stringify=function(t){return JSON.stringify(t)},e.decode=_,e.isAdmin=function(t){var e=_(t).claims;return"object"==typeof e&&!0===e.admin},e.issuedAtTime=function(t){var e=_(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},e.isValidFormat=function(t){var e=_(t),n=e.claims;return!!e.signature&&!!n&&"object"==typeof n&&n.hasOwnProperty("iat")},e.isValidTimestamp=function(t){var e,n,r=_(t).claims,i=Math.floor((new Date).getTime()/1e3);return"object"==typeof r&&(r.hasOwnProperty("nbf")?e=r.nbf:r.hasOwnProperty("iat")&&(e=r.iat),n=r.hasOwnProperty("exp")?r.exp:e+86400),i&&e&&n&&i>=e&&i<=n},e.clone=function(t){return b({},t)},e.contains=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.every=function(t,e){for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&!e(n,t[n]))return!1;return!0},e.extend=b,e.findKey=w,e.findValue=function(t,e,n){var r=w(t,e,n);return r&&t[r]},e.forEach=m,e.getAnyKey=function(t){for(var e in t)return e},e.getCount=function(t){var e=0;for(var n in t)e++;return e},e.getValues=function(t){var e=[],n=0;for(var r in t)e[n++]=t[r];return e},e.isEmpty=function(t){for(var e in t)return!1;return!0},e.isNonNullObject=function(t){return"object"==typeof t&&null!==t},e.map=function(t,e,n){var r={};for(var i in t)r[i]=e.call(n,t[i],i,t);return r},e.safeGet=function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]},e.querystring=function(t){var e=[];return m(t,function(t,n){Array.isArray(n)?n.forEach(function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}),e.length?"&"+e.join("&"):""},e.querystringDecode=function(t){var e={};return t.replace(/^\?/,"").split("&").forEach(function(t){if(t){var n=t.split("=");e[n[0]]=n[1]}}),e},e.Sha1=E,e.async=function(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then(function(){t.apply(void 0,n)}).catch(function(t){e&&e(t)})}},e.createSubscribe=function(t,e){var n=new T(t,e);return n.subscribe.bind(n)},e.errorPrefix=C,e.validateArgCount=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},e.validateCallback=function(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(C(t,e,r)+"must be a valid function.")},e.validateContextObject=function(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(C(t,e,r)+"must be a valid context object.")},e.validateNamespace=function(t,e,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(C(t,e,r)+"must be a valid firebase namespace.")},e.stringLength=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e},e.stringToByteArray=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;o(++r<t.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(t.charCodeAt(r)-56320)}i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):i<65536?(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],h=!1,l=-1;function f(){h&&u&&(h=!1,u.length?c=u.concat(c):l=-1,c.length&&p())}function p(){if(!h){var t=s(f);h=!0;for(var e=c.length;e;){for(u=c,c=[];++l<e;)u&&u[l].run();l=-1,e=c.length}u=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||h||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";var r=n(6);n(11),n(13),n(18),n(16);!function(t){navigator.serviceWorker&&t&&navigator.serviceWorker.register("./service-worker.js").then(function(){return navigator.serviceWorker.ready}).catch(function(t){console.error(t)}).then(function(e){t.useServiceWorker(e),t.requestPermission().then(function(){console.log("Notification permission granted."),t.getToken().then(function(t){console.log(t);var e={method:"POST",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify({token:t})};fetch("/api/webpush/register",e).then(function(t){console.dir(t)}).catch(function(t){console.error(t)})}).catch(function(t){console.error(t)})}).catch(function(t){console.log("Unable to get permission to notify.",t)})})}((r.initializeApp({apiKey:"AIzaSyDE2FsxAT0d3nROmfIZKcWoAuJNyzcmOZA",authDomain:"donboulton-210120.firebaseapp.com",databaseURL:"https://donboulton-210120.firebaseio.com",projectId:"donboulton-210120",storageBucket:"donboulton-210120.appspot.com",messagingSenderId:"642731329222"}),r.messaging())),onmessage=function(t){t.data;n.e(1).then(function(){var e=[n(19)("./"+t.data)];(function(t){postMessage(t())}).apply(null,e)}).catch(n.oe)}},function(t,e,n){"use strict";n(7);var r=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(n(1));t.exports=r},function(t,e,n){"use strict";n.r(e),function(t,e){n(10);var r=setTimeout;function i(){}function o(t){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],h(t,this)}function a(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,o._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null!==n){var r;try{r=n(t._value)}catch(t){return void u(e.promise,t)}s(e.promise,r)}else(1===t._state?s:u)(e.promise,t._value)})):t._deferreds.push(e)}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof o)return t._state=3,t._value=e,void c(t);if("function"==typeof n)return void h(function(t,e){return function(){t.apply(e,arguments)}}(n,e),t)}t._state=1,t._value=e,c(t)}catch(e){u(t,e)}}function u(t,e){t._state=2,t._value=e,c(t)}function c(t){2===t._state&&0===t._deferreds.length&&o._immediateFn(function(){t._handled||o._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)a(t,t._deferreds[e]);t._deferreds=null}function h(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,u(e,t))})}catch(t){if(n)return;n=!0,u(e,t)}}o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){var n=new this.constructor(i);return a(this,new function(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}(t,e,n)),n},o.prototype.finally=function(t){var e=this.constructor;return this.then(function(n){return e.resolve(t()).then(function(){return n})},function(n){return e.resolve(t()).then(function(){return e.reject(n)})})},o.all=function(t){return new o(function(e,n){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var r=Array.prototype.slice.call(t);if(0===r.length)return e([]);var i=r.length;function o(t,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(e){o(t,e)},n)}r[t]=a,0==--i&&e(r)}catch(t){n(t)}}for(var a=0;a<r.length;a++)o(a,r[a])})},o.resolve=function(t){return t&&"object"==typeof t&&t.constructor===o?t:new o(function(e){e(t)})},o.reject=function(t){return new o(function(e,n){n(t)})},o.race=function(t){return new o(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(t){r(t,0)},o._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)};var l=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("unable to locate global object")}();function f(t,e){return t(e={exports:{}},e.exports),e.exports}l.Promise||(l.Promise=o);var p=f(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),d=f(function(t){var e=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=e)}),v=(d.version,function(t){return"object"==typeof t?null!==t:"function"==typeof t}),y=function(t){if(!v(t))throw TypeError(t+" is not an object!");return t},g=function(t){try{return!!t()}catch(t){return!0}},_=!g(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),m=p.document,b=v(m)&&v(m.createElement),w=function(t){return b?m.createElement(t):{}},E=!_&&!g(function(){return 7!=Object.defineProperty(w("div"),"a",{get:function(){return 7}}).a}),T=function(t,e){if(!v(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!v(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!v(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!v(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")},S=Object.defineProperty,C={f:_?Object.defineProperty:function(t,e,n){if(y(t),e=T(e,!0),y(n),E)try{return S(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},I=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},N=_?function(t,e,n){return C.f(t,e,I(1,n))}:function(t,e,n){return t[e]=n,t},O={}.hasOwnProperty,A=function(t,e){return O.call(t,e)},k=0,P=Math.random(),D=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++k+P).toString(36))},R=f(function(t){var e=D("src"),n=Function.toString,r=(""+n).split("toString");d.inspectSource=function(t){return n.call(t)},(t.exports=function(t,n,i,o){var a="function"==typeof i;a&&(A(i,"name")||N(i,"name",n)),t[n]!==i&&(a&&(A(i,e)||N(i,e,t[n]?""+t[n]:r.join(String(n)))),t===p?t[n]=i:o?t[n]?t[n]=i:N(t,n,i):(delete t[n],N(t,n,i)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[e]||n.call(this)})}),L=function(t,e,n){if(function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!")}(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}},x=function(t,e,n){var r,i,o,a,s=t&x.F,u=t&x.G,c=t&x.S,h=t&x.P,l=t&x.B,f=u?p:c?p[e]||(p[e]={}):(p[e]||{}).prototype,v=u?d:d[e]||(d[e]={}),y=v.prototype||(v.prototype={});for(r in u&&(n=e),n)o=((i=!s&&f&&void 0!==f[r])?f:n)[r],a=l&&i?L(o,p):h&&"function"==typeof o?L(Function.call,o):o,f&&R(f,r,o,t&x.U),v[r]!=o&&N(v,r,a),h&&y[r]!=o&&(y[r]=o)};p.core=d,x.F=1,x.G=2,x.S=4,x.P=8,x.B=16,x.W=32,x.U=64,x.R=128;var F=x,M={}.toString,j=function(t){return M.call(t).slice(8,-1)},U=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==j(t)?t.split(""):Object(t)},W=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t},V=function(t){return Object(W(t))},B=Math.ceil,q=Math.floor,K=function(t){return isNaN(t=+t)?0:(t>0?q:B)(t)},H=Math.min,Q=function(t){return t>0?H(K(t),9007199254740991):0},G=Array.isArray||function(t){return"Array"==j(t)},Y=p["__core-js_shared__"]||(p["__core-js_shared__"]={}),z=function(t){return Y[t]||(Y[t]={})},X=f(function(t){var e=z("wks"),n=p.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:D)("Symbol."+t))}).store=e}),J=X("species"),$=function(t,e){return new(function(t){var e;return G(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!G(e.prototype)||(e=void 0),v(e)&&null===(e=e[J])&&(e=void 0)),void 0===e?Array:e}(t))(e)},Z=function(t,e){var n=1==t,r=2==t,i=3==t,o=4==t,a=6==t,s=5==t||a,u=e||$;return function(e,c,h){for(var l,f,p=V(e),d=U(p),v=L(c,h,3),y=Q(d.length),g=0,_=n?u(e,y):r?u(e,0):void 0;y>g;g++)if((s||g in d)&&(f=v(l=d[g],g,p),t))if(n)_[g]=f;else if(f)switch(t){case 3:return!0;case 5:return l;case 6:return g;case 2:_.push(l)}else if(o)return!1;return a?-1:i||o?o:_}},tt=X("unscopables"),et=Array.prototype;void 0==et[tt]&&N(et,tt,{});var nt=function(t){et[tt][t]=!0},rt=Z(5),it=!0;"find"in[]&&Array(1).find(function(){it=!1}),F(F.P+F.F*it,"Array",{find:function(t){return rt(this,t,arguments.length>1?arguments[1]:void 0)}}),nt("find");d.Array.find;var ot=Z(6),at=!0;"findIndex"in[]&&Array(1).findIndex(function(){at=!1}),F(F.P+F.F*at,"Array",{findIndex:function(t){return ot(this,t,arguments.length>1?arguments[1]:void 0)}}),nt("findIndex");d.Array.findIndex;var st=function(t){return U(W(t))},ut=Math.max,ct=Math.min,ht=z("keys"),lt=function(t){return ht[t]||(ht[t]=D(t))},ft=function(t){return function(e,n,r){var i,o=st(e),a=Q(o.length),s=function(t,e){return(t=K(t))<0?ut(t+e,0):ct(t,e)}(r,a);if(t&&n!=n){for(;a>s;)if((i=o[s++])!=i)return!0}else for(;a>s;s++)if((t||s in o)&&o[s]===n)return t||s||0;return!t&&-1}}(!1),pt=lt("IE_PROTO"),dt=function(t,e){var n,r=st(t),i=0,o=[];for(n in r)n!=pt&&A(r,n)&&o.push(n);for(;e.length>i;)A(r,n=e[i++])&&(~ft(o,n)||o.push(n));return o},vt="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),yt=Object.keys||function(t){return dt(t,vt)},gt={f:Object.getOwnPropertySymbols},_t={f:{}.propertyIsEnumerable},mt=Object.assign,bt=!mt||g(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=mt({},t)[n]||Object.keys(mt({},e)).join("")!=r})?function(t,e){for(var n=V(t),r=arguments.length,i=1,o=gt.f,a=_t.f;r>i;)for(var s,u=U(arguments[i++]),c=o?yt(u).concat(o(u)):yt(u),h=c.length,l=0;h>l;)a.call(u,s=c[l++])&&(n[s]=u[s]);return n}:mt;F(F.S+F.F,"Object",{assign:bt});d.Object.assign;var wt=X("match"),Et=function(t,e,n){if(function(t){var e;return v(t)&&(void 0!==(e=t[wt])?!!e:"RegExp"==j(t))}(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(W(t))},Tt=X("match"),St="".startsWith;F(F.P+F.F*function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[Tt]=!1,!"/./"[t](e)}catch(t){}}return!0}("startsWith"),"String",{startsWith:function(t){var e=Et(this,t,"startsWith"),n=Q(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return St?St.call(e,r,n):e.slice(n,n+r.length)===r}});d.String.startsWith;F(F.P,"String",{repeat:function(t){var e=String(W(this)),n="",r=K(t);if(r<0||r==1/0)throw RangeError("Count can't be negative");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(n+=e);return n}});d.String.repeat;var Ct=f(function(t){var e=D("meta"),n=C.f,r=0,i=Object.isExtensible||function(){return!0},o=!g(function(){return i(Object.preventExtensions({}))}),a=function(t){n(t,e,{value:{i:"O"+ ++r,w:{}}})},s=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!v(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!A(t,e)){if(!i(t))return"F";if(!n)return"E";a(t)}return t[e].i},getWeak:function(t,n){if(!A(t,e)){if(!i(t))return!0;if(!n)return!1;a(t)}return t[e].w},onFreeze:function(t){return o&&s.NEED&&i(t)&&!A(t,e)&&a(t),t}}}),It=(Ct.KEY,Ct.NEED,Ct.fastKey,Ct.getWeak,Ct.onFreeze,C.f),Nt=X("toStringTag"),Ot=function(t,e,n){t&&!A(t=n?t:t.prototype,Nt)&&It(t,Nt,{configurable:!0,value:e})},At={f:X},kt=C.f,Pt=function(t){var e=d.Symbol||(d.Symbol=p.Symbol||{});"_"==t.charAt(0)||t in e||kt(e,t,{value:At.f(t)})},Dt=_?Object.defineProperties:function(t,e){y(t);for(var n,r=yt(e),i=r.length,o=0;i>o;)C.f(t,n=r[o++],e[n]);return t},Rt=p.document,Lt=Rt&&Rt.documentElement,xt=lt("IE_PROTO"),Ft=function(){},Mt=function(){var t,e=w("iframe"),n=vt.length;for(e.style.display="none",Lt.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),Mt=t.F;n--;)delete Mt.prototype[vt[n]];return Mt()},jt=Object.create||function(t,e){var n;return null!==t?(Ft.prototype=y(t),n=new Ft,Ft.prototype=null,n[xt]=t):n=Mt(),void 0===e?n:Dt(n,e)},Ut=vt.concat("length","prototype"),Wt={f:Object.getOwnPropertyNames||function(t){return dt(t,Ut)}},Vt=Wt.f,Bt={}.toString,qt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Kt={f:function(t){return qt&&"[object Window]"==Bt.call(t)?function(t){try{return Vt(t)}catch(t){return qt.slice()}}(t):Vt(st(t))}},Ht=Object.getOwnPropertyDescriptor,Qt={f:_?Ht:function(t,e){if(t=st(t),e=T(e,!0),E)try{return Ht(t,e)}catch(t){}if(A(t,e))return I(!_t.f.call(t,e),t[e])}},Gt=Ct.KEY,Yt=Qt.f,zt=C.f,Xt=Kt.f,Jt=p.Symbol,$t=p.JSON,Zt=$t&&$t.stringify,te=X("_hidden"),ee=X("toPrimitive"),ne={}.propertyIsEnumerable,re=z("symbol-registry"),ie=z("symbols"),oe=z("op-symbols"),ae=Object.prototype,se="function"==typeof Jt,ue=p.QObject,ce=!ue||!ue.prototype||!ue.prototype.findChild,he=_&&g(function(){return 7!=jt(zt({},"a",{get:function(){return zt(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=Yt(ae,e);r&&delete ae[e],zt(t,e,n),r&&t!==ae&&zt(ae,e,r)}:zt,le=function(t){var e=ie[t]=jt(Jt.prototype);return e._k=t,e},fe=se&&"symbol"==typeof Jt.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof Jt},pe=function(t,e,n){return t===ae&&pe(oe,e,n),y(t),e=T(e,!0),y(n),A(ie,e)?(n.enumerable?(A(t,te)&&t[te][e]&&(t[te][e]=!1),n=jt(n,{enumerable:I(0,!1)})):(A(t,te)||zt(t,te,I(1,{})),t[te][e]=!0),he(t,e,n)):zt(t,e,n)},de=function(t,e){y(t);for(var n,r=function(t){var e=yt(t),n=gt.f;if(n)for(var r,i=n(t),o=_t.f,a=0;i.length>a;)o.call(t,r=i[a++])&&e.push(r);return e}(e=st(e)),i=0,o=r.length;o>i;)pe(t,n=r[i++],e[n]);return t},ve=function(t){var e=ne.call(this,t=T(t,!0));return!(this===ae&&A(ie,t)&&!A(oe,t))&&(!(e||!A(this,t)||!A(ie,t)||A(this,te)&&this[te][t])||e)},ye=function(t,e){if(t=st(t),e=T(e,!0),t!==ae||!A(ie,e)||A(oe,e)){var n=Yt(t,e);return!n||!A(ie,e)||A(t,te)&&t[te][e]||(n.enumerable=!0),n}},ge=function(t){for(var e,n=Xt(st(t)),r=[],i=0;n.length>i;)A(ie,e=n[i++])||e==te||e==Gt||r.push(e);return r},_e=function(t){for(var e,n=t===ae,r=Xt(n?oe:st(t)),i=[],o=0;r.length>o;)!A(ie,e=r[o++])||n&&!A(ae,e)||i.push(ie[e]);return i};se||(R((Jt=function(){if(this instanceof Jt)throw TypeError("Symbol is not a constructor!");var t=D(arguments.length>0?arguments[0]:void 0),e=function(n){this===ae&&e.call(oe,n),A(this,te)&&A(this[te],t)&&(this[te][t]=!1),he(this,t,I(1,n))};return _&&ce&&he(ae,t,{configurable:!0,set:e}),le(t)}).prototype,"toString",function(){return this._k}),Qt.f=ye,C.f=pe,Wt.f=Kt.f=ge,_t.f=ve,gt.f=_e,_&&R(ae,"propertyIsEnumerable",ve,!0),At.f=function(t){return le(X(t))}),F(F.G+F.W+F.F*!se,{Symbol:Jt});for(var me="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),be=0;me.length>be;)X(me[be++]);for(var we=yt(X.store),Ee=0;we.length>Ee;)Pt(we[Ee++]);F(F.S+F.F*!se,"Symbol",{for:function(t){return A(re,t+="")?re[t]:re[t]=Jt(t)},keyFor:function(t){if(!fe(t))throw TypeError(t+" is not a symbol!");for(var e in re)if(re[e]===t)return e},useSetter:function(){ce=!0},useSimple:function(){ce=!1}}),F(F.S+F.F*!se,"Object",{create:function(t,e){return void 0===e?jt(t):de(jt(t),e)},defineProperty:pe,defineProperties:de,getOwnPropertyDescriptor:ye,getOwnPropertyNames:ge,getOwnPropertySymbols:_e}),$t&&F(F.S+F.F*(!se||g(function(){var t=Jt();return"[null]"!=Zt([t])||"{}"!=Zt({a:t})||"{}"!=Zt(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(v(e)||void 0!==t)&&!fe(t))return G(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!fe(e))return e}),r[1]=e,Zt.apply($t,r)}}),Jt.prototype[ee]||N(Jt.prototype,ee,Jt.prototype.valueOf),Ot(Jt,"Symbol"),Ot(Math,"Math",!0),Ot(p.JSON,"JSON",!0);var Te=X("toStringTag"),Se="Arguments"==j(function(){return arguments}()),Ce={};Ce[X("toStringTag")]="z",Ce+""!="[object z]"&&R(Object.prototype,"toString",function(){return"[object "+function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),Te))?n:Se?j(e):"Object"==(r=j(e))&&"function"==typeof e.callee?"Arguments":r}(this)+"]"},!0),Pt("asyncIterator"),Pt("observable");d.Symbol;var Ie={},Ne={};N(Ne,X("iterator"),function(){return this});var Oe=function(t,e,n){t.prototype=jt(Ne,{next:I(1,n)}),Ot(t,e+" Iterator")},Ae=lt("IE_PROTO"),ke=Object.prototype,Pe=Object.getPrototypeOf||function(t){return t=V(t),A(t,Ae)?t[Ae]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?ke:null},De=X("iterator"),Re=!([].keys&&"next"in[].keys()),Le=function(){return this},xe=function(t,e,n,r,i,o,a){Oe(n,e,r);var s,u,c,h=function(t){if(!Re&&t in d)return d[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},l=e+" Iterator",f="values"==i,p=!1,d=t.prototype,v=d[De]||d["@@iterator"]||i&&d[i],y=v||h(i),g=i?f?h("entries"):y:void 0,_="Array"==e&&d.entries||v;if(_&&(c=Pe(_.call(new t)))!==Object.prototype&&c.next&&(Ot(c,l,!0),"function"!=typeof c[De]&&N(c,De,Le)),f&&v&&"values"!==v.name&&(p=!0,y=function(){return v.call(this)}),(Re||p||!d[De])&&N(d,De,y),Ie[e]=y,Ie[l]=Le,i)if(s={values:f?y:h("values"),keys:o?y:h("keys"),entries:g},a)for(u in s)u in d||R(d,u,s[u]);else F(F.P+F.F*(Re||p),e,s);return s},Fe=function(t){return function(e,n){var r,i,o=String(W(e)),a=K(n),s=o.length;return a<0||a>=s?t?"":void 0:(r=o.charCodeAt(a))<55296||r>56319||a+1===s||(i=o.charCodeAt(a+1))<56320||i>57343?t?o.charAt(a):r:t?o.slice(a,a+2):i-56320+(r-55296<<10)+65536}}(!0);xe(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=Fe(e,n),this._i+=t.length,{value:t,done:!1})});var Me=function(t,e){return{value:e,done:!!t}},je=xe(Array,"Array",function(t,e){this._t=st(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,Me(1)):Me(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values");Ie.Arguments=Ie.Array,nt("keys"),nt("values"),nt("entries");for(var Ue=X("iterator"),We=X("toStringTag"),Ve=Ie.Array,Be={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},qe=yt(Be),Ke=0;Ke<qe.length;Ke++){var He,Qe=qe[Ke],Ge=Be[Qe],Ye=p[Qe],ze=Ye&&Ye.prototype;if(ze&&(ze[Ue]||N(ze,Ue,Ve),ze[We]||N(ze,We,Qe),Ie[Qe]=Ve,Ge))for(He in je)ze[He]||R(ze,He,je[He],!0)}At.f("iterator")}.call(this,n(8).setImmediate,n(3))},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(9),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(3))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},a=!1,s=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){h(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&h(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){h(t.data)},r=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;r=function(e){var n=s.createElement("script");n.onreadystatechange=function(){h(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(h,0,t)},u.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var a={callback:t,args:e};return o[i]=a,r(i),i++},u.clearImmediate=c}function c(t){delete o[t]}function h(t){if(a)setTimeout(h,0,t);else{var e=o[t];if(e){a=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{c(t),a=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(3),n(4))},function(t,e){!function(t){"use strict";if(!t.fetch){var e={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(e.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(t){return t&&DataView.prototype.isPrototypeOf(t)},i=ArrayBuffer.isView||function(t){return t&&n.indexOf(Object.prototype.toString.call(t))>-1};h.prototype.append=function(t,e){t=s(t),e=u(e);var n=this.map[t];this.map[t]=n?n+","+e:e},h.prototype.delete=function(t){delete this.map[s(t)]},h.prototype.get=function(t){return t=s(t),this.has(t)?this.map[t]:null},h.prototype.has=function(t){return this.map.hasOwnProperty(s(t))},h.prototype.set=function(t,e){this.map[s(t)]=u(e)},h.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},h.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),c(t)},h.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),c(t)},h.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),c(t)},e.iterable&&(h.prototype[Symbol.iterator]=h.prototype.entries);var o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},v.call(y.prototype),v.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},_.error=function(){var t=new _(null,{status:0,statusText:""});return t.type="error",t};var a=[301,302,303,307,308];_.redirect=function(t,e){if(-1===a.indexOf(e))throw new RangeError("Invalid status code");return new _(null,{status:e,headers:{location:t}})},t.Headers=h,t.Request=y,t.Response=_,t.fetch=function(t,n){return new Promise(function(r,i){var o=new y(t,n),a=new XMLHttpRequest;a.onload=function(){var t={status:a.status,statusText:a.statusText,headers:function(t){var e=new h;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e}(a.getAllResponseHeaders()||"")};t.url="responseURL"in a?a.responseURL:t.headers.get("X-Request-URL");var e="response"in a?a.response:a.responseText;r(new _(e,t))},a.onerror=function(){i(new TypeError("Network request failed"))},a.ontimeout=function(){i(new TypeError("Network request failed"))},a.open(o.method,o.url,!0),"include"===o.credentials?a.withCredentials=!0:"omit"===o.credentials&&(a.withCredentials=!1),"responseType"in a&&e.blob&&(a.responseType="blob"),o.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}function s(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){var n={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return e.iterable&&(n[Symbol.iterator]=function(){return n}),n}function h(t){this.map={},t instanceof h?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function l(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function f(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function p(t){var e=new FileReader,n=f(e);return e.readAsArrayBuffer(t),n}function d(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(e.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(e.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(e.arrayBuffer&&e.blob&&r(t))this._bodyArrayBuffer=d(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!e.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!i(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=d(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},e.blob&&(this.blob=function(){var t=l(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?l(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t=l(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,n=f(e);return e.readAsText(t),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},e.formData&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(t,e){var n=(e=e||{}).body;if(t instanceof y){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new h(t.headers)),this.method=t.method,this.mode=t.mode,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new h(e.headers)),this.method=function(t){var e=t.toUpperCase();return o.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function g(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function _(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new h(e.headers),this.url=e.url||"",this._initBody(t)}}("undefined"!=typeof self?self:this)},function(t,e,n){"use strict";n.r(e);n(12)},function(t,e,n){"use strict";(function(t){var e=n(1),r=n.n(e);(function(){var t,e=e||{},n=this;function i(t){return"string"==typeof t}function o(t){return"boolean"==typeof t}function a(){}function s(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function u(t){return null===t}function c(t){return"array"==s(t)}function h(t){var e=s(t);return"array"==e||"object"==e&&"number"==typeof t.length}function l(t){return"function"==s(t)}function f(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var p="closure_uid_"+(1e9*Math.random()>>>0),d=0;function v(t,e,n){return t.call.apply(t.bind,arguments)}function y(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function g(t,e,n){return(g=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?v:y).apply(null,arguments)}function _(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var m=Date.now||function(){return+new Date};function b(t,e){function n(){}n.prototype=e.prototype,t.nb=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.dd=function(t,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return e.prototype[n].apply(t,i)}}function w(t){t.prototype.then=t.prototype.then,t.prototype.$goog_Thenable=!0}function E(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function T(t){if(Error.captureStackTrace)Error.captureStackTrace(this,T);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function S(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");T.call(this,n+t[r])}function C(t,e){throw new S("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function I(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function N(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function O(){this.b=this.a=null}b(T,Error),T.prototype.name="CustomError",b(S,T),S.prototype.name="AssertionError",I.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var A=new I(function(){return new P},function(t){t.reset()});function k(){var t=pt,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function P(){this.next=this.b=this.a=null}O.prototype.add=function(t,e){var n=A.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},P.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},P.prototype.reset=function(){this.next=this.b=this.a=null};var D=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if(i(t))return i(e)&&1==e.length?t.indexOf(e,0):-1;for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},R=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,o=i(t)?t.split(""):t,a=0;a<r;a++)a in o&&e.call(n,o[a],a,t)};var L=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),o=i(t)?t.split(""):t,a=0;a<n;a++)a in o&&(r[a]=e.call(void 0,o[a],a,t));return r},x=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=i(t)?t.split(""):t,o=0;o<n;o++)if(o in r&&e.call(void 0,r[o],o,t))return!0;return!1};function F(t,e){return 0<=D(t,e)}function M(t,e){var n;return(n=0<=(e=D(t,e)))&&Array.prototype.splice.call(t,e,1),n}function j(t,e){!function(t,e){var n=t.length,r=i(t)?t.split(""):t;for(--n;0<=n;--n)n in r&&e.call(void 0,r[n],n,t)}(t,function(n,r){e.call(void 0,n,r,t)&&1==Array.prototype.splice.call(t,r,1).length&&0})}function U(t){return Array.prototype.concat.apply([],arguments)}function W(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function V(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}var B=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function q(t){return J.test(t)?(-1!=t.indexOf("&")&&(t=t.replace(H,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(Q,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(G,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(Y,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(z,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(X,"&#0;")),t):t}var K,H=/&/g,Q=/</g,G=/>/g,Y=/"/g,z=/'/g,X=/\x00/g,J=/[\x00&<>"']/;function $(t,e){return-1!=t.indexOf(e)}function Z(t,e){return t<e?-1:t>e?1:0}t:{var tt=n.navigator;if(tt){var et=tt.userAgent;if(et){K=et;break t}}K=""}function nt(t){return $(K,t)}function rt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function it(t){for(var e in t)return!1;return!0}function ot(t){var e,n={};for(e in t)n[e]=t[e];return n}var at,st,ut="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ct(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<ut.length;o++)n=ut[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function ht(t){n.setTimeout(function(){throw t},0)}function lt(t,e){st||function(){if(n.Promise&&n.Promise.resolve){var t=n.Promise.resolve(void 0);st=function(){t.then(dt)}}else st=function(){var t=dt;!l(n.setImmediate)||n.Window&&n.Window.prototype&&!nt("Edge")&&n.Window.prototype.setImmediate==n.setImmediate?(at||(at=function(){var t=n.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!nt("Presto")&&(t=function(){var t=document.createElement("IFRAME");t.style.display="none",t.src="",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.write(""),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=g(function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()},this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!nt("Trident")&&!nt("MSIE")){var e=new t,r={},i=r;return e.port1.onmessage=function(){if(void 0!==r.next){var t=(r=r.next).vb;r.vb=null,t()}},function(t){i.next={vb:t},i=i.next,e.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(t){var e=document.createElement("SCRIPT");e.onreadystatechange=function(){e.onreadystatechange=null,e.parentNode.removeChild(e),e=null,t(),t=null},document.documentElement.appendChild(e)}:function(t){n.setTimeout(t,0)}}()),at(t)):n.setImmediate(t)}}(),ft||(st(),ft=!0),pt.add(t,e)}var ft=!1,pt=new O;function dt(){for(var t;t=k();){try{t.a.call(t.b)}catch(t){ht(t)}N(A,t)}ft=!1}function vt(t,e){if(this.a=yt,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=a)try{var n=this;t.call(e,function(t){Ot(n,gt,t)},function(t){if(!(t instanceof xt))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Ot(n,_t,t)})}catch(t){Ot(this,_t,t)}}var yt=0,gt=2,_t=3;function mt(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}mt.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var bt=new I(function(){return new mt},function(t){t.reset()});function wt(t,e,n){var r=bt.get();return r.g=t,r.b=e,r.f=n,r}function Et(t){if(t instanceof vt)return t;var e=new vt(a);return Ot(e,gt,t),e}function Tt(t){return new vt(function(e,n){n(t)})}function St(t,e,n){At(t,e,n,null)||lt(_(e,t))}function Ct(t){return new vt(function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Cb:!0,value:o}:{Cb:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)St(t[o],_(i,o,!0),_(i,o,!1));else e(r)})}function It(t,e){t.b||t.a!=gt&&t.a!=_t||kt(t),t.f?t.f.next=e:t.b=e,t.f=e}function Nt(t,e,n,r){var i=wt(null,null,null);return i.a=new vt(function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof xt?o(e):t(i)}catch(t){o(t)}}:o}),i.a.c=t,It(t,i),i.a}function Ot(t,e,n){t.a==yt&&(t===n&&(e=_t,n=new TypeError("Promise cannot resolve to itself")),t.a=1,At(n,t.Mc,t.Nc,t)||(t.i=n,t.a=e,t.c=null,kt(t),e!=_t||n instanceof xt||function(t,e){t.g=!0,lt(function(){t.g&&Lt.call(null,e)})}(t,n)))}function At(t,e,n,r){if(t instanceof vt)return It(t,wt(e||a,n||null,r)),!0;if(E(t))return t.then(e,n,r),!0;if(f(t))try{var i=t.then;if(l(i))return function(t,e,n,r,i){function o(t){a||(a=!0,r.call(i,t))}var a=!1;try{e.call(t,function(t){a||(a=!0,n.call(i,t))},o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function kt(t){t.h||(t.h=!0,lt(t.Xb,t))}function Pt(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Dt(t,e,n,r){if(n==_t&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,Rt(e,n,r);else try{e.c?e.g.call(e.f):Rt(e,n,r)}catch(t){Lt.call(null,t)}N(bt,e)}function Rt(t,e,n){e==gt?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}vt.prototype.then=function(t,e,n){return Nt(this,l(t)?t:null,l(e)?e:null,n)},w(vt),(t=vt.prototype).ia=function(t,e){return(t=wt(t,t,e)).c=!0,It(this,t),this},t.s=function(t,e){return Nt(this,null,t,e)},t.cancel=function(t){this.a==yt&&lt(function(){!function t(e,n){if(e.a==yt)if(e.c){var r=e.c;if(r.b){for(var i=0,o=null,a=null,s=r.b;s&&(s.c||(i++,s.a==e&&(o=s),!(o&&1<i)));s=s.next)o||(a=s);o&&(r.a==yt&&1==i?t(r,n):(a?((i=a).next==r.f&&(r.f=i),i.next=i.next.next):Pt(r),Dt(r,o,_t,n)))}e.c=null}else Ot(e,_t,n)}(this,new xt(t))},this)},t.Mc=function(t){this.a=yt,Ot(this,gt,t)},t.Nc=function(t){this.a=yt,Ot(this,_t,t)},t.Xb=function(){for(var t;t=Pt(this);)Dt(this,t,this.a,this.i);this.h=!1};var Lt=ht;function xt(t){T.call(this,t)}function Ft(){0!=Mt&&(jt[this[p]||(this[p]=++d)]=this),this.pa=this.pa,this.ja=this.ja}b(xt,T),xt.prototype.name="cancel";var Mt=0,jt={};function Ut(t){if(!t.pa&&(t.pa=!0,t.ua(),0!=Mt)){var e=t[p]||(t[p]=++d);if(0!=Mt&&t.ja&&0<t.ja.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete jt[e]}}function Wt(t){return Wt[" "](t),t}Ft.prototype.pa=!1,Ft.prototype.ua=function(){if(this.ja)for(;this.ja.length;)this.ja.shift()()},Wt[" "]=a;var Vt,Bt=nt("Opera"),qt=nt("Trident")||nt("MSIE"),Kt=nt("Edge"),Ht=Kt||qt,Qt=nt("Gecko")&&!($(K.toLowerCase(),"webkit")&&!nt("Edge"))&&!(nt("Trident")||nt("MSIE"))&&!nt("Edge"),Gt=$(K.toLowerCase(),"webkit")&&!nt("Edge");function Yt(){var t=n.document;return t?t.documentMode:void 0}t:{var zt="",Xt=function(){var t=K;return Qt?/rv:([^\);]+)(\)|;)/.exec(t):Kt?/Edge\/([\d\.]+)/.exec(t):qt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(t):Gt?/WebKit\/(\S+)/.exec(t):Bt?/(?:Version)[ \/]?(\S+)/.exec(t):void 0}();if(Xt&&(zt=Xt?Xt[1]:""),qt){var Jt=Yt();if(null!=Jt&&Jt>parseFloat(zt)){Vt=String(Jt);break t}}Vt=zt}var $t,Zt={};function te(t){return function(t,e){var n=Zt;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)}(t,function(){for(var e=0,n=B(String(Vt)).split("."),r=B(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=Z(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||Z(0==a[2].length,0==s[2].length)||Z(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e})}var ee=n.document;$t=ee&&qt?Yt()||("CSS1Compat"==ee.compatMode?parseInt(Vt,10):5):void 0;var ne=Object.freeze||function(t){return t},re=!qt||9<=Number($t),ie=qt&&!te("9"),oe=function(){if(!n.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});return n.addEventListener("test",a,e),n.removeEventListener("test",a,e),t}();function ae(t,e){this.type=t,this.b=this.target=e,this.Jb=!0}function se(t,e){if(ae.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Qt){t:{try{Wt(e.nodeName);var o=!0;break t}catch(t){}o=!1}o||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,null===r?(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0):(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType=i(t.pointerType)?t.pointerType:ue[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}ae.prototype.preventDefault=function(){this.Jb=!1},b(se,ae);var ue=ne({2:"touch",3:"pen",4:"mouse"});se.prototype.preventDefault=function(){se.nb.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,ie)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},se.prototype.f=function(){return this.a};var ce="closure_listenable_"+(1e6*Math.random()|0),he=0;function le(t){t.na=!0,t.listener=null,t.proxy=null,t.src=null,t.La=null}function fe(t){this.src=t,this.a={},this.b=0}function pe(t,e){var n=e.type;n in t.a&&M(t.a[n],e)&&(le(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function de(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.na&&o.listener==e&&o.capture==!!n&&o.La==r)return i}return-1}fe.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=de(t,e,r,i);return-1<a?(e=t[a],n||(e.Ia=!1)):((e=new function(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.La=i,this.key=++he,this.na=this.Ia=!1}(e,this.src,o,!!r,i)).Ia=n,t.push(e)),e};var ve="closure_lm_"+(1e6*Math.random()|0),ye={};function ge(t,e,n,r,i){if(r&&r.once)me(t,e,n,r,i);else if(c(e))for(var o=0;o<e.length;o++)ge(t,e[o],n,r,i);else n=Oe(n),t&&t[ce]?ke(t,e,n,f(r)?!!r.capture:!!r,i):_e(t,e,n,!1,r,i)}function _e(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var a=f(i)?!!i.capture:!!i,s=Ie(t);if(s||(t[ve]=s=new fe(t)),!(n=s.add(e,n,r,a,o)).proxy){if(r=function(){var t=Ce,e=re?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)oe||(i=a),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(Ee(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}0}}function me(t,e,n,r,i){if(c(e))for(var o=0;o<e.length;o++)me(t,e[o],n,r,i);else n=Oe(n),t&&t[ce]?Pe(t,e,n,f(r)?!!r.capture:!!r,i):_e(t,e,n,!0,r,i)}function be(t,e,n,r,i){if(c(e))for(var o=0;o<e.length;o++)be(t,e[o],n,r,i);else r=f(r)?!!r.capture:!!r,n=Oe(n),t&&t[ce]?(t=t.l,(e=String(e).toString())in t.a&&(-1<(n=de(o=t.a[e],n,r,i))&&(le(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--)))):t&&(t=Ie(t))&&(e=t.a[e.toString()],t=-1,e&&(t=de(e,n,r,i)),(n=-1<t?e[t]:null)&&we(n))}function we(t){if("number"!=typeof t&&t&&!t.na){var e=t.src;if(e&&e[ce])pe(e.l,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(Ee(n),r):e.addListener&&e.removeListener&&e.removeListener(r),0,(n=Ie(e))?(pe(n,t),0==n.b&&(n.src=null,e[ve]=null)):le(t)}}}function Ee(t){return t in ye?ye[t]:ye[t]="on"+t}function Te(t,e,n,r){var i=!0;if((t=Ie(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.na&&(o=Se(o,r),i=i&&!1!==o)}return i}function Se(t,e){var n=t.listener,r=t.La||t.src;return t.Ia&&we(t),n.call(r,e)}function Ce(t,e){if(t.na)return!0;if(!re){if(!e)t:{e=["window","event"];for(var r=n,i=0;i<e.length;i++)if(null==(r=r[e[i]])){e=null;break t}e=r}if(e=new se(i=e,this),r=!0,!(0>i.keyCode||void 0!=i.returnValue)){t:{var o=!1;if(0==i.keyCode)try{i.keyCode=-1;break t}catch(t){o=!0}(o||void 0==i.returnValue)&&(i.returnValue=!0)}for(i=[],o=e.b;o;o=o.parentNode)i.push(o);for(t=t.type,o=i.length-1;0<=o;o--){e.b=i[o];var a=Te(i[o],t,!0,e);r=r&&a}for(o=0;o<i.length;o++)e.b=i[o],a=Te(i[o],t,!1,e),r=r&&a}return r}return Se(t,new se(e,this))}function Ie(t){return(t=t[ve])instanceof fe?t:null}var Ne="__closure_events_fn_"+(1e9*Math.random()>>>0);function Oe(t){return l(t)?t:(t[Ne]||(t[Ne]=function(e){return t.handleEvent(e)}),t[Ne])}function Ae(){Ft.call(this),this.l=new fe(this),this.Qb=this,this.Ua=null}function ke(t,e,n,r,i){t.l.add(String(e),n,!1,r,i)}function Pe(t,e,n,r,i){t.l.add(String(e),n,!0,r,i)}function De(t,e,n,r){if(!(e=t.l.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.na&&a.capture==n){var s=a.listener,u=a.La||a.src;a.Ia&&pe(t.l,a),i=!1!==s.call(u,r)&&i}}return i&&0!=r.Jb}function Re(t,e,r){if(l(t))r&&(t=g(t,r));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=g(t.handleEvent,t)}return 2147483647<Number(e)?-1:n.setTimeout(t,e||0)}function Le(t){var e=null;return new vt(function(n,r){-1==(e=Re(function(){n(void 0)},t))&&r(Error("Failed to schedule timer."))}).s(function(t){throw n.clearTimeout(e),t})}function xe(t){if(t.S&&"function"==typeof t.S)return t.S();if(i(t))return t.split("");if(h(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function Fe(t){if(t.U&&"function"==typeof t.U)return t.U();if(!t.S||"function"!=typeof t.S){if(h(t)||i(t)){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function Me(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Me)for(n=t.U(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function je(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Ue(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Ue(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Ue(t,e){return Object.prototype.hasOwnProperty.call(t,e)}b(Ae,Ft),Ae.prototype[ce]=!0,Ae.prototype.addEventListener=function(t,e,n,r){ge(this,t,e,n,r)},Ae.prototype.removeEventListener=function(t,e,n,r){be(this,t,e,n,r)},Ae.prototype.dispatchEvent=function(t){var e,n=this.Ua;if(n)for(e=[];n;n=n.Ua)e.push(n);n=this.Qb;var r=t.type||t;if(i(t))t=new ae(t,n);else if(t instanceof ae)t.target=t.target||n;else{var o=t;ct(t=new ae(r,n),o)}if(o=!0,e)for(var a=e.length-1;0<=a;a--){var s=t.b=e[a];o=De(s,r,!0,t)&&o}if(o=De(s=t.b=n,r,!0,t)&&o,o=De(s,r,!1,t)&&o,e)for(a=0;a<e.length;a++)o=De(s=t.b=e[a],r,!1,t)&&o;return o},Ae.prototype.ua=function(){if(Ae.nb.ua.call(this),this.l){var t,e=this.l;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)0,le(n[r]);delete e.a[t],e.b--}}this.Ua=null},(t=Me.prototype).S=function(){je(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.U=function(){return je(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return Ue(this.b,t)?this.b[t]:e},t.set=function(t,e){Ue(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.U(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var We=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Ve(t,e){if(this.b=this.l=this.c="",this.i=null,this.h=this.g="",this.f=!1,t instanceof Ve){this.f=void 0!==e?e:t.f,Be(this,t.c),this.l=t.l,this.b=t.b,qe(this,t.i),this.g=t.g,e=t.a;var n=new rn;n.c=e.c,e.a&&(n.a=new Me(e.a),n.b=e.b),Ke(this,n),this.h=t.h}else t&&(n=String(t).match(We))?(this.f=!!e,Be(this,n[1]||"",!0),this.l=ze(n[2]||""),this.b=ze(n[3]||"",!0),qe(this,n[4]),this.g=ze(n[5]||"",!0),Ke(this,n[6]||"",!0),this.h=ze(n[7]||"")):(this.f=!!e,this.a=new rn(null,this.f))}function Be(t,e,n){t.c=n?ze(e,!0):e,t.c&&(t.c=t.c.replace(/:$/,""))}function qe(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.i=e}else t.i=null}function Ke(t,e,n){e instanceof rn?(t.a=e,function(t,e){e&&!t.f&&(on(t),t.c=null,t.a.forEach(function(t,e){var n=e.toLowerCase();e!=n&&(sn(this,e),cn(this,n,t))},t)),t.f=e}(t.a,t.f)):(n||(e=Xe(e,en)),t.a=new rn(e,t.f))}function He(t,e,n){t.a.set(e,n)}function Qe(t,e){return t.a.get(e)}function Ge(t){return t instanceof Ve?new Ve(t):new Ve(t,void 0)}function Ye(t,e){var n=new Ve(null,void 0);return Be(n,"https"),t&&(n.b=t),e&&(n.g=e),n}function ze(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Xe(t,e,n){return i(t)?(t=encodeURI(t).replace(e,Je),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Je(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Ve.prototype.toString=function(){var t=[],e=this.c;e&&t.push(Xe(e,$e,!0),":");var n=this.b;return(n||"file"==e)&&(t.push("//"),(e=this.l)&&t.push(Xe(e,$e,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.i)&&t.push(":",String(n))),(n=this.g)&&(this.b&&"/"!=n.charAt(0)&&t.push("/"),t.push(Xe(n,"/"==n.charAt(0)?tn:Ze,!0))),(n=this.a.toString())&&t.push("?",n),(n=this.h)&&t.push("#",Xe(n,nn)),t.join("")};var $e=/[#\/\?@]/g,Ze=/[#\?:]/g,tn=/[#\?]/g,en=/[#\?@]/g,nn=/#/g;function rn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function on(t){t.a||(t.a=new Me,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)}))}function an(t){var e=Fe(t);if(void 0===e)throw Error("Keys are undefined");var n=new rn(null,void 0);t=xe(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];c(o)?cn(n,i,o):n.add(i,o)}return n}function sn(t,e){on(t),e=hn(t,e),Ue(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Ue((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&je(t)))}function un(t,e){return on(t),e=hn(t,e),Ue(t.a.b,e)}function cn(t,e,n){sn(t,e),0<n.length&&(t.c=null,t.a.set(hn(t,e),W(n)),t.b+=n.length)}function hn(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}(t=rn.prototype).add=function(t,e){on(this),this.c=null,t=hn(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){on(this),this.a.forEach(function(n,r){R(n,function(n){t.call(e,n,r,this)},this)},this)},t.U=function(){on(this);for(var t=this.a.S(),e=this.a.U(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},t.S=function(t){on(this);var e=[];if(i(t))un(this,t)&&(e=U(e,this.a.get(hn(this,t))));else{t=this.a.S();for(var n=0;n<t.length;n++)e=U(e,t[n])}return e},t.set=function(t,e){return on(this),this.c=null,un(this,t=hn(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return 0<(t=t?this.S(t):[]).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.U(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.S(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}}return this.c=t.join("&")};var ln=!qt||9<=Number($t);function fn(){this.a="",this.b=dn}function pn(t){return t instanceof fn&&t.constructor===fn&&t.b===dn?t.a:(C("expected object of type Const, got '"+t+"'"),"type_error:Const")}fn.prototype.ma=!0,fn.prototype.la=function(){return this.a},fn.prototype.toString=function(){return"Const{"+this.a+"}"};var dn={};function vn(t){var e=new fn;return e.a=t,e}function yn(){this.a="",this.b=wn}function gn(t){return t instanceof yn&&t.constructor===yn&&t.b===wn?t.a:(C("expected object of type TrustedResourceUrl, got '"+t+"' of type "+s(t)),"type_error:TrustedResourceUrl")}function _n(t,e){var n=pn(t);if(!bn.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=new yn;return e.a=t,e}(t=n.replace(mn,function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof fn?pn(t):encodeURIComponent(String(t))}))}vn(""),yn.prototype.ma=!0,yn.prototype.la=function(){return this.a},yn.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var mn=/%{(\w+)}/g,bn=/^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i,wn={};function En(){this.a="",this.b=In}function Tn(t){return t instanceof En&&t.constructor===En&&t.b===In?t.a:(C("expected object of type SafeUrl, got '"+t+"' of type "+s(t)),"type_error:SafeUrl")}En.prototype.ma=!0,En.prototype.la=function(){return this.a},En.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Sn=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Cn(t){return t instanceof En?t:(t=t.ma?t.la():String(t),Sn.test(t)||(t="about:invalid#zClosurez"),Nn(t))}var In={};function Nn(t){var e=new En;return e.a=t,e}function On(){this.a="",this.b=An}Nn("about:blank"),On.prototype.ma=!0,On.prototype.la=function(){return this.a},On.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var An={};function kn(t){var e=new On;return e.a=t,e}function Pn(t){var e=document;return i(t)?e.getElementById(t):t}function Dn(t,e){rt(e,function(e,n){e&&e.ma&&(e=e.la()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:Rn.hasOwnProperty(n)?t.setAttribute(Rn[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e})}kn("<!DOCTYPE html>"),kn(""),kn("<br>");var Rn={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function Ln(t,e,n){var r=arguments,o=document,a=String(r[0]),s=r[1];if(!ln&&s&&(s.name||s.type)){if(a=["<",a],s.name&&a.push(' name="',q(s.name),'"'),s.type){a.push(' type="',q(s.type),'"');var u={};ct(u,s),delete u.type,s=u}a.push(">"),a=a.join("")}return a=o.createElement(a),s&&(i(s)?a.className=s:c(s)?a.className=s.join(" "):Dn(a,s)),2<r.length&&function(t,e,n){function r(n){n&&e.appendChild(i(n)?t.createTextNode(n):n)}for(var o=2;o<n.length;o++){var a=n[o];!h(a)||f(a)&&0<a.nodeType?r(a):R(xn(a)?W(a):a,r)}}(o,a,r),a}function xn(t){if(t&&"number"==typeof t.length){if(f(t))return"function"==typeof t.item||"string"==typeof t.item;if(l(t))return"function"==typeof t.item}return!1}function Fn(t){var e=[];return function t(e,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(c(n)){var i=n;n=i.length,r.push("[");for(var o="",a=0;a<n;a++)r.push(o),t(e,i[a],r),o=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(i in r.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,i)&&("function"!=typeof(a=n[i])&&(r.push(o),Un(i,r),r.push(":"),t(e,a,r),o=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":Un(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new function(){},t,e),e.join("")}var Mn={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},jn=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function Un(t,e){e.push('"',t.replace(jn,function(t){var e=Mn[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),Mn[t]=e),e}),'"')}function Wn(){var t=ir();return qt&&!!$t&&11==$t||/Edge\/\d+/.test(t)}function Vn(){return n.window&&n.window.location.href||self&&self.location&&self.location.href||""}function Bn(t,e){e=e||n.window;var r="about:blank";t&&(r=Tn(Cn(t))),e.location.href=r}function qn(t){return!!((t=(t||ir()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function Kn(t){t=t||n.window;try{t.close()}catch(t){}}function Hn(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(a in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=ir().toLowerCase(),r&&(e.target=r,$(n,"crios/")&&(e.target="_blank")),er(ir())==Zn&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof En?n:Cn(void 0!==n.href?n.href:String(n)),n=t.target||n.target,i=[],t)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+t[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(t[a]?1:0))}var a=i.join(",");if((nt("iPhone")&&!nt("iPod")&&!nt("iPad")||nt("iPad")||nt("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(a=r.document.createElement("A"),e instanceof En||e instanceof En||(e=e.ma?e.la():String(e),Sn.test(e)||(e="about:invalid#zClosurez"),e=Nn(e)),a.href=Tn(e),a.setAttribute("target",n),t.noreferrer&&a.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(t),a={}):t.noreferrer?(a=r.open("",n,a),t=Tn(e),a&&(Ht&&$(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),a.opener=null,vn("b/12014412, meta tag with sanitized URL"),t=kn(t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+q(t)+'">'),a.document.write(function(t){return t instanceof On&&t.constructor===On&&t.b===An?t.a:(C("expected object of type SafeHtml, got '"+t+"' of type "+s(t)),"type_error:SafeHtml")}(t)),a.document.close())):(a=r.open(Tn(e),n,a))&&t.noopener&&(a.opener=null),a)try{a.focus()}catch(t){}return a}var Qn=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;function Gn(){var t=null;return new vt(function(e){"complete"==n.document.readyState?e():(t=function(){e()},me(window,"load",t))}).s(function(e){throw be(window,"load",t),e})}function Yn(t){return t=t||ir(),!("file:"!==cr()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function zn(){var t=n.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Xn(){return"object"!=typeof n.window&&"function"==typeof n.importScripts}function Jn(){return r.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.a.INTERNAL.hasOwnProperty("node")?"Node":Xn()?"Worker":"Browser"}function $n(){var t=Jn();return"ReactNative"===t||"Node"===t}var Zn="Firefox",tr="Chrome";function er(t){var e=t.toLowerCase();return $(e,"opera/")||$(e,"opr/")||$(e,"opios/")?"Opera":$(e,"iemobile")?"IEMobile":$(e,"msie")||$(e,"trident/")?"IE":$(e,"edge/")?"Edge":$(e,"firefox/")?Zn:$(e,"silk/")?"Silk":$(e,"blackberry")?"Blackberry":$(e,"webos")?"Webos":!$(e,"safari/")||$(e,"chrome/")||$(e,"crios/")||$(e,"android")?!$(e,"chrome/")&&!$(e,"crios/")||$(e,"edge/")?$(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":tr:"Safari"}var nr={Tc:"FirebaseCore-web",Vc:"FirebaseUI-web"};function rr(t,e){e=e||[];var n,r=[],i={};for(n in nr)i[nr[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=Jn())?r=er(i=ir()):"Worker"===r&&(r=er(i=ir())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function ir(){return n.navigator&&n.navigator.userAgent||""}function or(t,e){t=t.split("."),e=e||n;for(var r=0;r<t.length&&"object"==typeof e&&null!=e;r++)e=e[t[r]];return r!=t.length&&(e=void 0),e}function ar(){try{var t=n.localStorage,e=dr();if(t)return t.setItem(e,"1"),t.removeItem(e),!Wn()||!!n.indexedDB}catch(t){return Xn()&&!!n.indexedDB}return!1}function sr(){return(ur()||"chrome-extension:"===cr()||Yn())&&!$n()&&ar()&&!Xn()}function ur(){return"http:"===cr()||"https:"===cr()}function cr(){return n.location&&n.location.protocol||null}function hr(t){return!qn(t=t||ir())&&er(t)!=Zn}function lr(t){return void 0===t?null:Fn(t)}function fr(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function pr(t){if(null!==t)return JSON.parse(t)}function dr(t){return t||Math.floor(1e9*Math.random()).toString()}function vr(t){return"Safari"!=er(t=t||ir())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function yr(){var t=n.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var r=0;r<t.CP.length;r++)t.CP[r]=null}function gr(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=ir(),e=Jn(),this.b=qn(t)||"ReactNative"===e}function _r(){var t=n.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function mr(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function br(){return!(!or("fireauth.oauthhelper",n)&&!or("fireauth.iframe",n))}gr.prototype.get=function(){var t=n.navigator;return!t||"boolean"!=typeof t.onLine||!ur()&&"chrome-extension:"!==cr()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var wr,Er={};function Tr(t){Er[t]||(Er[t]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t))}try{var Sr={};Object.defineProperty(Sr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Sr,"abcd",{configurable:!0,enumerable:!0,value:2}),wr=2==Sr.abcd}catch(t){wr=!1}function Cr(t,e,n){wr?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function Ir(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Cr(t,n,e[n])}function Nr(t){var e={};return Ir(e,t),e}function Or(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Cr(e,n,Or(t[n]));return e}var Ar="EMAIL_SIGNIN",kr="email",Pr="newEmail",Dr="requestType",Rr="email",Lr="fromEmail",xr="data",Fr="operation";function Mr(t,e){this.code=Ur+t,this.message=e||Wr[t]||""}function jr(t){var e=t&&t.code;return e?new Mr(e.substring(Ur.length),t.message):null}b(Mr,Error),Mr.prototype.D=function(){return{code:this.code,message:this.message}},Mr.prototype.toJSON=function(){return this.D()};var Ur="auth/",Wr={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","user-cancelled":"User did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function Vr(t){var e=t[Hr];if(void 0===e)throw new Mr("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new Mr("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[Br];if(n&&"object"==typeof n){e=n[Yr];var r=n[Qr];if(n=n[Gr],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new Mr("argument-error",Qr+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new Mr("argument-error",Gr+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new Mr("argument-error",Yr+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new Mr("missing-android-pkg-name")}}else if(void 0!==n)throw new Mr("argument-error",Br+" property must be a non null object when specified.");if(this.f=null,(e=t[Kr])&&"object"==typeof e){if("string"==typeof(e=e[zr])&&e.length)this.f=e;else if(void 0!==e)throw new Mr("argument-error",zr+" property must be a non empty string when specified.")}else if(void 0!==e)throw new Mr("argument-error",Kr+" property must be a non null object when specified.");if(void 0!==(t=t[qr])&&"boolean"!=typeof t)throw new Mr("argument-error",qr+" property must be a boolean when specified.");this.c=!!t}var Br="android",qr="handleCodeInApp",Kr="iOS",Hr="url",Qr="installApp",Gr="minimumVersion",Yr="packageName",zr="bundleId";function Xr(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e)null===e[n]&&delete e[n];return e}var Jr=null,$r=null;function Zr(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=$r[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Jr){Jr={},$r={};for(var t=0;65>t;t++)Jr[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t),$r[Jr[t]]=t,62<=t&&($r["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(t)]=t)}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;e(i<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}}(t,function(t){e+=String.fromCharCode(t)}),e}function ti(t){this.c=t.sub,m(),this.a=t.provider_id||t.firebase&&t.firebase.sign_in_provider||null,this.b=!!t.is_anonymous||"anonymous"==this.a}function ei(t){return(t=ni(t))&&t.sub&&t.iss&&t.aud&&t.exp?new ti(t):null}function ni(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(Zr(t))}catch(t){}return null}ti.prototype.f=function(){return this.b};var ri="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),ii=["client_id","response_type","scope","redirect_uri","state"],oi={Uc:{Ma:"locale",Ba:500,Aa:600,Na:"facebook.com",gb:ii},Wc:{Ma:null,Ba:500,Aa:620,Na:"github.com",gb:ii},Xc:{Ma:"hl",Ba:515,Aa:680,Na:"google.com",gb:ii},cd:{Ma:"lang",Ba:485,Aa:705,Na:"twitter.com",gb:ri}};function ai(t){for(var e in oi)if(oi[e].Na==t)return oi[e];return null}function si(t){var e={};e["facebook.com"]=fi,e["google.com"]=di,e["github.com"]=pi,e["twitter.com"]=vi;var n=t&&t[ci];try{if(n)return e[n]?new e[n](t):new li(t);if(void 0!==t[ui])return new hi(t)}catch(t){}return null}var ui="idToken",ci="providerId";function hi(t){var e=t[ci];if(!e&&t[ui]){var n=ei(t[ui]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Cr(this,"providerId",e),Cr(this,"isNewUser",n)}function li(t){hi.call(this,t),Cr(this,"profile",Or((t=pr(t.rawUserInfo||"{}"))||{}))}function fi(t){if(li.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function pi(t){if(li.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Cr(this,"username",this.profile&&this.profile.login||null)}function di(t){if(li.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function vi(t){if(li.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Cr(this,"username",t.screenName||null)}function yi(t){var e=Ge(t),n=Qe(e,"link"),r=Qe(Ge(n),"link");return Qe(Ge(e=Qe(e,"deep_link_id")),"link")||e||r||n||t}function gi(t,e){return t.then(function(t){if(t[Jo]){var n=ei(t[Jo]);if(!n||e!=n.c)throw new Mr("user-mismatch");return t}throw new Mr("user-mismatch")}).s(function(t){throw t&&t.code&&t.code==Ur+"user-not-found"?new Mr("user-mismatch"):t})}function _i(t,e,n){if(e.idToken||e.accessToken)e.idToken&&Cr(this,"idToken",e.idToken),e.accessToken&&Cr(this,"accessToken",e.accessToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new Mr("internal-error","failed to construct a credential");Cr(this,"accessToken",e.oauthToken),Cr(this,"secret",e.oauthTokenSecret)}Cr(this,"providerId",t),Cr(this,"signInMethod",n)}function mi(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,{postBody:an(e).toString(),requestUri:"http://localhost"}}function bi(t,e){this.Cc=e||[],Ir(this,{providerId:t,isOAuthProvider:!0}),this.xb={},this.bb=(ai(t)||{}).Ma||null,this.Za=null}function wi(t){bi.call(this,t,ii),this.a=[]}function Ei(){wi.call(this,"facebook.com")}function Ti(t){if(!t)throw new Mr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return f(t)&&(e=t.accessToken),(new Ei).credential(null,e)}function Si(){wi.call(this,"github.com")}function Ci(t){if(!t)throw new Mr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return f(t)&&(e=t.accessToken),(new Si).credential(null,e)}function Ii(){wi.call(this,"google.com"),this.ta("profile")}function Ni(t,e){var n=t;return f(t)&&(n=t.idToken,e=t.accessToken),(new Ii).credential(n,e)}function Oi(){bi.call(this,"twitter.com",ri)}function Ai(t,e){var n=t;if(f(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new Mr("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new _i("twitter.com",n,"twitter.com")}function ki(t,e,n){this.a=t,this.b=e,Cr(this,"providerId","password"),Cr(this,"signInMethod",n===Pi.EMAIL_LINK_SIGN_IN_METHOD?Pi.EMAIL_LINK_SIGN_IN_METHOD:Pi.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Pi(){Ir(this,{providerId:"password",isOAuthProvider:!1})}function Di(t,e){if(!(e=Ri(e)))throw new Mr("argument-error","Invalid email link!");return new ki(t,e,Pi.EMAIL_LINK_SIGN_IN_METHOD)}function Ri(t){var e=Qe((t=new function(t){this.a=Ge(t)}(t=yi(t))).a,"oobCode")||null;return"signIn"===(Qe(t.a,"mode")||null)&&e?e:null}function Li(t){if(!(t.Sa&&t.Ra||t.Fa&&t.$))throw new Mr("internal-error");this.a=t,Cr(this,"providerId","phone"),Cr(this,"signInMethod","phone")}function xi(t){return t.a.Fa&&t.a.$?{temporaryProof:t.a.Fa,phoneNumber:t.a.$}:{sessionInfo:t.a.Sa,code:t.a.Ra}}function Fi(t){try{this.a=t||r.a.auth()}catch(t){throw new Mr("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Ir(this,{providerId:"phone",isOAuthProvider:!1})}function Mi(t,e){if(!t)throw new Mr("missing-verification-id");if(!e)throw new Mr("missing-verification-code");return new Li({Sa:t,Ra:e})}function ji(t){if(t.temporaryProof&&t.phoneNumber)return new Li({Fa:t.temporaryProof,$:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret;t=t&&t.oauthIdToken;try{switch(e){case"google.com":return Ni(t,n);case"facebook.com":return Ti(n);case"github.com":return Ci(n);case"twitter.com":return Ai(n,r);default:return new wi(e).credential(t,n)}}catch(t){return null}}function Ui(t){if(!t.isOAuthProvider)throw new Mr("invalid-oauth-provider")}function Wi(t,e,n,r,i){if(this.b=t,this.c=e||null,this.f=n||null,this.g=r||null,this.a=i||null,!this.f&&!this.a)throw new Mr("invalid-auth-event");if(this.f&&this.a)throw new Mr("invalid-auth-event");if(this.f&&!this.g)throw new Mr("invalid-auth-event")}function Vi(t){return(t=t||{}).type?new Wi(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&jr(t.error)):null}function Bi(){this.b=null,this.a=[]}b(li,hi),b(fi,li),b(pi,li),b(di,li),b(vi,li),_i.prototype.ya=function(t){return da(t,mi(this))},_i.prototype.c=function(t,e){var n=mi(this);return n.idToken=e,va(t,n)},_i.prototype.f=function(t,e){return gi(ya(t,mi(this)),e)},_i.prototype.D=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),t},bi.prototype.Da=function(t){return this.xb=ot(t),this},b(wi,bi),wi.prototype.ta=function(t){return F(this.a,t)||this.a.push(t),this},wi.prototype.Db=function(){return W(this.a)},wi.prototype.credential=function(t,e){if(!t&&!e)throw new Mr("argument-error","credential failed: must provide the ID token and/or the access token.");return new _i(this.providerId,{idToken:t||null,accessToken:e||null},this.providerId)},b(Ei,wi),Cr(Ei,"PROVIDER_ID","facebook.com"),Cr(Ei,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),b(Si,wi),Cr(Si,"PROVIDER_ID","github.com"),Cr(Si,"GITHUB_SIGN_IN_METHOD","github.com"),b(Ii,wi),Cr(Ii,"PROVIDER_ID","google.com"),Cr(Ii,"GOOGLE_SIGN_IN_METHOD","google.com"),b(Oi,bi),Cr(Oi,"PROVIDER_ID","twitter.com"),Cr(Oi,"TWITTER_SIGN_IN_METHOD","twitter.com"),ki.prototype.ya=function(t){return this.signInMethod==Pi.EMAIL_LINK_SIGN_IN_METHOD?Ha(t,Sa,{email:this.a,oobCode:this.b}):Ha(t,Va,{email:this.a,password:this.b})},ki.prototype.c=function(t,e){return this.signInMethod==Pi.EMAIL_LINK_SIGN_IN_METHOD?Ha(t,Ca,{idToken:e,email:this.a,oobCode:this.b}):Ha(t,xa,{idToken:e,email:this.a,password:this.b})},ki.prototype.f=function(t,e){return gi(this.ya(t),e)},ki.prototype.D=function(){return{email:this.a,password:this.b,signInMethod:this.signInMethod}},Ir(Pi,{PROVIDER_ID:"password"}),Ir(Pi,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Ir(Pi,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Li.prototype.ya=function(t){return t.Ta(xi(this))},Li.prototype.c=function(t,e){var n=xi(this);return n.idToken=e,Ha(t,qa,n)},Li.prototype.f=function(t,e){var n=xi(this);return n.operation="REAUTH",gi(t=Ha(t,Ka,n),e)},Li.prototype.D=function(){var t={providerId:"phone"};return this.a.Sa&&(t.verificationId=this.a.Sa),this.a.Ra&&(t.verificationCode=this.a.Ra),this.a.Fa&&(t.temporaryProof=this.a.Fa),this.a.$&&(t.phoneNumber=this.a.$),t},Fi.prototype.Ta=function(t,e){var n=this.a.b;return Et(e.verify()).then(function(r){if(!i(r))throw new Mr("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":return function(t,e){return Ha(t,Ra,e)}(n,{phoneNumber:t,recaptchaToken:r}).then(function(t){return"function"==typeof e.reset&&e.reset(),t},function(t){throw"function"==typeof e.reset&&e.reset(),t});default:throw new Mr("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}})},Ir(Fi,{PROVIDER_ID:"phone"}),Ir(Fi,{PHONE_SIGN_IN_METHOD:"phone"}),Wi.prototype.D=function(){return{type:this.b,eventId:this.c,urlResponse:this.f,sessionId:this.g,error:this.a&&this.a.D()}};var qi=null;function Ki(t){var e="unauthorized-domain",n=void 0,r=Ge(t);t=r.b,"chrome-extension"==(r=r.c)?n=V("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=V("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",Mr.call(this,e,n)}function Hi(t,e,n){Mr.call(this,t,n),(t=e||{}).yb&&Cr(this,"email",t.yb),t.$&&Cr(this,"phoneNumber",t.$),t.credential&&Cr(this,"credential",t.credential)}function Qi(t){if(t.code){var e=t.code||"";0==e.indexOf(Ur)&&(e=e.substring(Ur.length));var n={credential:ji(t)};if(t.email)n.yb=t.email;else if(t.phoneNumber)n.$=t.phoneNumber;else if(!n.credential)return new Mr(e,t.message||void 0);return new Hi(e,n,t.message)}return null}Bi.prototype.subscribe=function(t){var e=this;this.a.push(t),this.b||(this.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=or("universalLinks.subscribe",n))&&t(null,this.b))},Bi.prototype.unsubscribe=function(t){j(this.a,function(e){return e==t})},b(Ki,Mr),b(Hi,Mr),Hi.prototype.D=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber);var e=this.credential&&this.credential.D();return e&&ct(t,e),t},Hi.prototype.toJSON=function(){return this.D()};var Gi,Yi=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;function zi(){}function Xi(t){return t.c||(t.c=t.b())}function Ji(){}function $i(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function Zi(){}function to(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseText="",this.status=-1,this.statusText="",this.a.onload=g(this.dc,this),this.a.onerror=g(this.Eb,this),this.a.onprogress=g(this.ec,this),this.a.ontimeout=g(this.hc,this)}function eo(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function no(t,e,n){this.reset(t,e,n,void 0,void 0)}zi.prototype.c=null,b(Ji,zi),Ji.prototype.a=function(){var t=$i(this);return t?new ActiveXObject(t):new XMLHttpRequest},Ji.prototype.b=function(){var t={};return $i(this)&&(t[0]=!0,t[1]=!0),t},Gi=new Ji,b(Zi,zi),Zi.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new to;throw Error("Unsupported browser")},Zi.prototype.b=function(){return{}},(t=to.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.dc=function(){this.status=200,this.responseText=this.a.responseText,eo(this,4)},t.Eb=function(){this.status=500,this.responseText="",eo(this,4)},t.hc=function(){this.Eb()},t.ec=function(){this.status=200,eo(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},no.prototype.a=null;function ro(t){this.f=t,this.b=this.c=this.a=null}function io(t,e){this.name=t,this.value=e}no.prototype.reset=function(t,e,n,r,i){"number"==typeof i||0,r||m(),delete this.a},io.prototype.toString=function(){return this.name};var oo=new io("SEVERE",1e3),ao=new io("WARNING",900),so=new io("CONFIG",700),uo=new io("FINE",500);ro.prototype.log=function(t,e,n){if(t.value>=function t(e){return e.c?e.c:e.a?t(e.a):(C("Root logger has no level set."),null)}(this).value)for(l(e)&&(e=e()),t=new no(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var co={},ho=null;function lo(t){var e;if(ho||(ho=new ro(""),co[""]=ho,ho.c=so),!(e=co[t])){e=new ro(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=lo(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,co[t]=e}return e}function fo(t,e){t&&t.log(uo,e,void 0)}function po(t){this.f=t}function vo(t){Ae.call(this),this.i=t,this.readyState=yo,this.status=0,this.responseText=this.statusText="",this.onreadystatechange=null,this.g=new Headers,this.b=null,this.h="GET",this.c="",this.a=!1,this.f=lo("goog.net.FetchXmlHttp")}b(po,zi),po.prototype.a=function(){return new vo(this.f)},po.prototype.b=function(t){return function(){return t}}({}),b(vo,Ae);var yo=0;function go(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function _o(t){Ae.call(this),this.headers=new Me,this.C=t||null,this.c=!1,this.w=this.a=null,this.h=this.N=this.m="",this.f=this.I=this.i=this.G=!1,this.g=0,this.u=null,this.o=mo,this.v=this.O=!1}(t=vo.prototype).open=function(t,e){if(this.readyState!=yo)throw this.abort(),Error("Error reopening a connection");this.h=t,this.c=e,this.readyState=1,go(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.g,method:this.h,credentials:void 0,cache:void 0};t&&(e.body=t),this.i.fetch(new Request(this.c,e)).then(this.gc.bind(this),this.Fb.bind(this))},t.abort=function(){this.responseText="",this.g=new Headers,this.status=0,1<=this.readyState&&this.a&&4!=this.readyState&&(this.readyState=4,this.a=!1,go(this)),this.readyState=yo},t.gc=function(t){this.a&&(this.b||(this.b=t.headers,this.readyState=2,go(this)),this.a&&(this.readyState=3,go(this),this.a&&t.text().then(this.fc.bind(this,t),this.Fb.bind(this))))},t.fc=function(t,e){this.a&&(this.status=t.status,this.statusText=t.statusText,this.responseText=e,this.readyState=4,go(this))},t.Fb=function(t){var e=this.f;e&&e.log(ao,"Failed to fetch url "+this.c,t instanceof Error?t:Error(t)),this.a&&(this.readyState=4,go(this))},t.setRequestHeader=function(t,e){this.g.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.f)&&t.log(ao,"Attempting to get response header but no headers have been received for url: "+this.c,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.f;return t&&t.log(ao,"Attempting to get all response headers but no headers have been received for url: "+this.c,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},b(_o,Ae);var mo="";_o.prototype.b=lo("goog.net.XhrIo");var bo=/^https?$/i,wo=["POST","PUT"];function Eo(t,e,r,o,a){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.m+"; newUri="+e);r=r?r.toUpperCase():"GET",t.m=e,t.h="",t.N=r,t.G=!1,t.c=!0,t.a=t.C?t.C.a():Gi.a(),t.w=t.C?Xi(t.C):Xi(Gi),t.a.onreadystatechange=g(t.Ib,t);try{fo(t.b,Po(t,"Opening Xhr")),t.I=!0,t.a.open(r,String(e),!0),t.I=!1}catch(e){return fo(t.b,Po(t,"Error opening Xhr: "+e.message)),void So(t,e)}e=o||"";var s=new Me(t.headers);a&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(h(t)||i(t))R(t,e,void 0);else for(var n=Fe(t),r=xe(t),o=r.length,a=0;a<o;a++)e.call(void 0,r[a],n&&n[a],t)}(a,function(t,e){s.set(e,t)}),a=function(t){t:{for(var e=To,n=t.length,r=i(t)?t.split(""):t,o=0;o<n;o++)if(o in r&&e.call(void 0,r[o],o,t)){e=o;break t}e=-1}return 0>e?null:i(t)?t.charAt(e):t[e]}(s.U()),o=n.FormData&&e instanceof n.FormData,!F(wo,r)||a||o||s.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),s.forEach(function(t,e){this.a.setRequestHeader(e,t)},t),t.o&&(t.a.responseType=t.o),"withCredentials"in t.a&&t.a.withCredentials!==t.O&&(t.a.withCredentials=t.O);try{Oo(t),0<t.g&&(t.v=function(t){return qt&&te(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),fo(t.b,Po(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.v)),t.v?(t.a.timeout=t.g,t.a.ontimeout=g(t.Ga,t)):t.u=Re(t.Ga,t.g,t)),fo(t.b,Po(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){fo(t.b,Po(t,"Send error: "+e.message)),So(t,e)}}function To(t){return"content-type"==t.toLowerCase()}function So(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,Co(t),No(t)}function Co(t){t.G||(t.G=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Io(t){if(t.c&&void 0!==e)if(t.w[1]&&4==Ao(t)&&2==ko(t))fo(t.b,Po(t,"Local request error detected and ignored"));else if(t.i&&4==Ao(t))Re(t.Ib,0,t);else if(t.dispatchEvent("readystatechange"),4==Ao(t)){fo(t.b,Po(t,"Request complete")),t.c=!1;try{var r,i=ko(t);t:switch(i){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var o=!0;break t;default:o=!1}if(!(r=o)){var a;if(a=0===i){var s=String(t.m).match(We)[1]||null;if(!s&&n.self&&n.self.location){var u=n.self.location.protocol;s=u.substr(0,u.length-1)}a=!bo.test(s?s.toLowerCase():"")}r=a}if(r)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Ao(t)?t.a.statusText:""}catch(e){fo(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+ko(t)+"]",Co(t)}}finally{No(t)}}}function No(t,e){if(t.a){Oo(t);var n=t.a,r=t.w[0]?a:null;t.a=null,t.w=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(oo,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Oo(t){t.a&&t.v&&(t.a.ontimeout=null),t.u&&(n.clearTimeout(t.u),t.u=null)}function Ao(t){return t.a?t.a.readyState:0}function ko(t){try{return 2<Ao(t)?t.a.status:-1}catch(t){return-1}}function Po(t,e){return e+" ["+t.N+" "+t.m+" "+ko(t)+"]"}function Do(t,e){this.g=[],this.v=t,this.u=e||null,this.f=this.a=!1,this.c=void 0,this.m=this.w=this.i=!1,this.h=0,this.b=null,this.l=0}function Ro(t,e,n){t.a=!0,t.c=n,t.f=!e,Mo(t)}function Lo(t){if(t.a){if(!t.m)throw new jo(t);t.m=!1}}function xo(t,e,n,r){t.g.push([e,n,r]),t.a&&Mo(t)}function Fo(t){return x(t.g,function(t){return l(t[1])})}function Mo(t){if(t.h&&t.a&&Fo(t)){var e=t.h,r=Vo[e];r&&(n.clearTimeout(r.a),delete Vo[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var i=r=!1;t.g.length&&!t.i;){var o=t.g.shift(),a=o[0],s=o[1];if(o=o[2],a=t.f?s:a)try{var u=a.call(o||t.u,e);void 0!==u&&(t.f=t.f&&(u==e||u instanceof Error),t.c=e=u),(E(e)||"function"==typeof n.Promise&&e instanceof n.Promise)&&(i=!0,t.i=!0)}catch(n){e=n,t.f=!0,Fo(t)||(r=!0)}}t.c=e,i&&(u=g(t.o,t,!0),i=g(t.o,t,!1),e instanceof Do?(xo(e,u,i),e.w=!0):e.then(u,i)),r&&(e=new Wo(e),Vo[e.a]=e,t.h=e.a)}function jo(){T.call(this)}function Uo(){T.call(this)}function Wo(t){this.a=n.setTimeout(g(this.c,this),0),this.b=t}(t=_o.prototype).Ga=function(){void 0!==e&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",fo(this.b,Po(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(fo(this.b,Po(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),No(this))},t.ua=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),No(this,!0)),_o.nb.ua.call(this)},t.Ib=function(){this.pa||(this.I||this.i||this.f?Io(this):this.vc())},t.vc=function(){Io(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.o){case mo:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(oo,"Response type "+this.o+" is not supported on this browser",void 0),null}catch(t){return fo(this.b,"Can not get response: "+t.message),null}},Do.prototype.cancel=function(t){if(this.a)this.c instanceof Do&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.v?this.v.call(this.u,this):this.m=!0,this.a||(t=new Uo(this),Lo(this),Ro(this,!1,t))}},Do.prototype.o=function(t,e){this.i=!1,Ro(this,t,e)},Do.prototype.C=function(){Lo(this),Ro(this,!0,null)},Do.prototype.then=function(t,e,n){var r,i,o=new vt(function(t,e){r=t,i=e});return xo(this,r,function(t){t instanceof Uo?o.cancel():i(t)}),o.then(t,e,n)},w(Do),b(jo,T),jo.prototype.message="Deferred has already fired",jo.prototype.name="AlreadyCalledError",b(Uo,T),Uo.prototype.message="Deferred was canceled",Uo.prototype.name="CanceledError",Wo.prototype.c=function(){throw delete Vo[this.a],this.b};var Vo={};function Bo(t){var e={},n=e.document||document,r=gn(t),i=document.createElement("SCRIPT"),o={Kb:i,Ga:void 0},a=new Do(qo,o),s=null,u=null!=e.timeout?e.timeout:5e3;return 0<u&&(s=window.setTimeout(function(){Ko(i,!0);var t=new Go(Qo,"Timeout reached for loading script "+r);Lo(a),Ro(a,!1,t)},u),o.Ga=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Ko(i,e.ed||!1,s),a.C())},i.onerror=function(){Ko(i,!0,s);var t=new Go(Ho,"Error while loading script "+r);Lo(a),Ro(a,!1,t)},ct(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),Dn(i,o),i.src=gn(t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),a}function qo(){if(this&&this.Kb){var t=this.Kb;t&&"SCRIPT"==t.tagName&&Ko(t,!0,this.Ga)}}function Ko(t,e,r){null!=r&&n.clearTimeout(r),t.onload=a,t.onerror=a,t.onreadystatechange=a,e&&window.setTimeout(function(){t&&t.parentNode&&t.parentNode.removeChild(t)},0)}var Ho=0,Qo=1;function Go(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),T.call(this,n),this.code=t}function Yo(t){this.f=t}function zo(t,e,i){if(this.b=t,t=e||{},this.i=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.l=t.secureTokenTimeout||$o,this.f=ot(t.secureTokenHeaders||Zo),this.g=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.h=t.firebaseTimeout||ta,this.a=ot(t.firebaseHeaders||ea),i&&(this.a["X-Client-Version"]=i,this.f["X-Client-Version"]=i),i="Node"==Jn(),!(i=n.XMLHttpRequest||i&&r.a.INTERNAL.node&&r.a.INTERNAL.node.XMLHttpRequest)&&!Xn())throw new Mr("internal-error","The XMLHttpRequest compatibility library was not found.");this.c=void 0,Xn()?this.c=new po(self):$n()?this.c=new Yo(i):this.c=new Zi}b(Go,T),b(Yo,zi),Yo.prototype.a=function(){return new this.f},Yo.prototype.b=function(){return{}};var Xo,Jo="idToken",$o=new gr(3e4,6e4),Zo={"Content-Type":"application/x-www-form-urlencoded"},ta=new gr(3e4,6e4),ea={"Content-Type":"application/json"};function na(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function ra(t,e){e?(t.a["X-Client-Version"]=e,t.f["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.f["X-Client-Version"])}function ia(t,e,r,i,o,a,s){(function(){var t=ir();return!((t=er(t)!=tr?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||qt&&$t&&!(9<$t))})()||Xn()?t=g(t.o,t):(Xo||(Xo=new vt(function(t,e){!function(t,e){if(((window.gapi||{}).client||{}).request)t();else{n[aa]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))};var r=_n(oa,{onload:aa});!function(t,e){xo(t,null,e,void 0)}(Bo(r),function(){e(Error("CORS_UNSUPPORTED"))})}}(t,e)})),t=g(t.m,t)),t(e,r,i,o,a,s)}zo.prototype.o=function(t,e,r,i,o,a){if(Xn()&&(void 0===n.fetch||void 0===n.Headers||void 0===n.Request))throw new Mr("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var s=new _o(this.c);if(a){s.g=Math.max(0,a);var u=setTimeout(function(){s.dispatchEvent("timeout")},a)}ke(s,"complete",function(){u&&clearTimeout(u);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return fo(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)}),Pe(s,"ready",function(){u&&clearTimeout(u),Ut(this)}),Pe(s,"timeout",function(){u&&clearTimeout(u),Ut(this),e&&e(null)}),Eo(s,t,r,i,o)};var oa=vn("https://apis.google.com/js/client.js?onload=%{onload}"),aa="__fcb"+Math.floor(1e6*Math.random()).toString();function sa(t){if(!Yi.test(t.email))throw new Mr("invalid-email")}function ua(t){"email"in t&&sa(t)}function ca(t){if(!t[Jo])throw new Mr("internal-error")}function ha(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new Mr("internal-error")}else{if(!t.sessionInfo)throw new Mr("missing-verification-id");if(!t.code)throw new Mr("missing-verification-code")}}zo.prototype.m=function(t,e,n,r,i){var o=this;Xo.then(function(){window.gapi.client.setApiKey(o.b);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})}).s(function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})})},zo.prototype.Pa=function(){return Ha(this,Fa,{})},zo.prototype.ob=function(t,e){return Ha(this,La,{idToken:t,email:e})},zo.prototype.pb=function(t,e){return Ha(this,xa,{idToken:t,password:e})};var la={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function fa(t){if(!t.requestUri||!t.sessionId&&!t.postBody)throw new Mr("internal-error")}function pa(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Qi(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Qi(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Qi(t)):t.errorMessage&&(e=Qa(t.errorMessage)),e)throw e;if(!t[Jo])throw new Mr("internal-error")}function da(t,e){return e.returnIdpCredential=!0,Ha(t,Ma,e)}function va(t,e){return e.returnIdpCredential=!0,Ha(t,Ua,e)}function ya(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,Ha(t,ja,e)}function ga(t){if(!t.oobCode)throw new Mr("invalid-action-code")}(t=zo.prototype).qb=function(t,e){var n={idToken:t},r=[];return rt(la,function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)}),r.length&&(n.deleteAttribute=r),Ha(this,La,n)},t.jb=function(t,e){return ct(t={requestType:"PASSWORD_RESET",email:t},e),Ha(this,Aa,t)},t.kb=function(t,e){return ct(t={requestType:"EMAIL_SIGNIN",email:t},e),Ha(this,Na,t)},t.ib=function(t,e){return ct(t={requestType:"VERIFY_EMAIL",idToken:t},e),Ha(this,Oa,t)},t.Ta=function(t){return Ha(this,Ba,t)},t.Ya=function(t,e){return Ha(this,Da,{oobCode:t,newPassword:e})},t.Ja=function(t){return Ha(this,ma,{oobCode:t})},t.Va=function(t){return Ha(this,_a,{oobCode:t})};var _a={endpoint:"setAccountInfo",B:ga,da:"email"},ma={endpoint:"resetPassword",B:ga,J:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e)throw new Mr("internal-error")}},ba={endpoint:"signupNewUser",B:function(t){if(sa(t),!t.password)throw new Mr("weak-password")},J:ca,R:!0},wa={endpoint:"createAuthUri"},Ea={endpoint:"deleteAccount",T:["idToken"]},Ta={endpoint:"setAccountInfo",T:["idToken","deleteProvider"],B:function(t){if(!c(t.deleteProvider))throw new Mr("internal-error")}},Sa={endpoint:"emailLinkSignin",T:["email","oobCode"],B:sa,J:ca,R:!0},Ca={endpoint:"emailLinkSignin",T:["idToken","email","oobCode"],B:sa,J:ca,R:!0},Ia={endpoint:"getAccountInfo"},Na={endpoint:"getOobConfirmationCode",T:["requestType"],B:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new Mr("internal-error");sa(t)},da:"email"},Oa={endpoint:"getOobConfirmationCode",T:["idToken","requestType"],B:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new Mr("internal-error")},da:"email"},Aa={endpoint:"getOobConfirmationCode",T:["requestType"],B:function(t){if("PASSWORD_RESET"!=t.requestType)throw new Mr("internal-error");sa(t)},da:"email"},ka={tb:!0,endpoint:"getProjectConfig",Hb:"GET"},Pa={tb:!0,endpoint:"getRecaptchaParam",Hb:"GET",J:function(t){if(!t.recaptchaSiteKey)throw new Mr("internal-error")}},Da={endpoint:"resetPassword",B:ga,da:"email"},Ra={endpoint:"sendVerificationCode",T:["phoneNumber","recaptchaToken"],da:"sessionInfo"},La={endpoint:"setAccountInfo",T:["idToken"],B:ua,R:!0},xa={endpoint:"setAccountInfo",T:["idToken"],B:function(t){if(ua(t),!t.password)throw new Mr("weak-password")},J:ca,R:!0},Fa={endpoint:"signupNewUser",J:ca,R:!0},Ma={endpoint:"verifyAssertion",B:fa,J:pa,R:!0},ja={endpoint:"verifyAssertion",B:fa,J:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new Mr("user-not-found");if(t.errorMessage)throw Qa(t.errorMessage);if(!t[Jo])throw new Mr("internal-error")},R:!0},Ua={endpoint:"verifyAssertion",B:function(t){if(fa(t),!t.idToken)throw new Mr("internal-error")},J:pa,R:!0},Wa={endpoint:"verifyCustomToken",B:function(t){if(!t.token)throw new Mr("invalid-custom-token")},J:ca,R:!0},Va={endpoint:"verifyPassword",B:function(t){if(sa(t),!t.password)throw new Mr("wrong-password")},J:ca,R:!0},Ba={endpoint:"verifyPhoneNumber",B:ha,J:ca},qa={endpoint:"verifyPhoneNumber",B:function(t){if(!t.idToken)throw new Mr("internal-error");ha(t)},J:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Qi(t);ca(t)}},Ka={Wb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:ha,J:ca};function Ha(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(void 0===r||null===r||""===r)return!1}return!0}(n,e.T))return Tt(new Mr("internal-error"));var r,i=e.Hb||"POST";return Et(n).then(e.B).then(function(){return e.R&&(n.returnSecureToken=!0),function(t,e,n,r,i,o){var a=Ge(t.g+e);He(a,"key",t.b),o&&He(a,"cb",m().toString());var s="GET"==n;if(s)for(var u in r)r.hasOwnProperty(u)&&He(a,u,r[u]);return new vt(function(e,o){ia(t,a.toString(),function(t){t?t.error?o(Ga(t,i||{})):e(t):o(new Mr("network-request-failed"))},n,s?void 0:Fn(fr(r)),t.a,t.h.get())})}(t,e.endpoint,i,n,e.Wb,e.tb||!1)}).then(function(t){return r=t}).then(e.J).then(function(){if(!e.da)return r;if(!(e.da in r))throw new Mr("internal-error");return r[e.da]})}function Qa(t){return Ga({error:{errors:[{message:t}],code:400,message:t}})}function Ga(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new Mr(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",ct(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*(.*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new Mr(r[i],e);return!e&&t&&(e=lr(t)),new Mr("internal-error",e)}var Ya,za={Zc:{$a:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",hb:"https://securetoken.googleapis.com/v1/token",id:"p"},ad:{$a:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",hb:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},bd:{$a:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",hb:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};function Xa(t){for(var e in za)if(za[e].id===t)return{firebaseEndpoint:(t=za[e]).$a,secureTokenEndpoint:t.hb};return null}function Ja(t){this.b=t,this.a=null,this.eb=function(t){return(es||(es=new vt(function(t,e){function r(){yr(),or("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){yr(),e(Error("Network Error"))},timeout:Za.get()})}if(or("gapi.iframes.Iframe"))t();else if(or("gapi.load"))r();else{var i="__iframefcb"+Math.floor(1e6*Math.random()).toString();n[i]=function(){or("gapi.load")?r():e(Error("Network Error"))},Et(Bo(i=_n($a,{onload:i}))).s(function(){e(Error("Network Error"))})}}).s(function(t){throw es=null,t}))).then(function(){return new vt(function(e,n){or("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:or("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout(function(){n(Error("Network Error"))},ts.get());r.ping(i).then(i,function(){n(Error("Network Error"))})})})})}(this)}Ya=Xa("__EID__")?"__EID__":void 0;var $a=vn("https://apis.google.com/js/api.js?onload=%{onload}"),Za=new gr(3e4,6e4),ts=new gr(5e3,15e3),es=null;function ns(t,e,n){this.i=t,this.g=e,this.h=n,this.f=null,this.a=Ye(this.i,"/__/auth/iframe"),He(this.a,"apiKey",this.g),He(this.a,"appName",this.h),this.b=null,this.c=[]}function rs(t,e,n,r,i){this.o=t,this.m=e,this.c=n,this.l=r,this.h=this.g=this.i=null,this.a=i,this.f=null}function is(t){try{return r.a.app(t).auth().xa()}catch(t){return[]}}function os(t,e,n,r,i){this.m=t,this.f=e,this.b=n,this.c=r||null,this.h=i||null,this.o=this.u=this.v=null,this.g=[],this.l=this.a=null}function as(t){var e=Vn();return function(t){return Ha(t,ka,{}).then(function(t){return t.authorizedDomains||[]})}(t).then(function(t){t:{var n=Ge(e),r=n.c;n=n.b;for(var i=0;i<t.length;i++){var o=t[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=Ge(o).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:Qn.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){t=!0;break t}}t=!1}if(!t)throw new Ki(Vn())})}function ss(t){return t.l?t.l:(t.l=Gn().then(function(){if(!t.u){var e=t.c,n=t.h,r=is(t.b),i=new ns(t.m,t.f,t.b);i.f=e,i.b=n,i.c=W(r||[]),t.u=i.toString()}t.i=new Ja(t.u),function(t){if(!t.i)throw Error("IfcHandler must be initialized!");!function(t,e){t.eb.then(function(){t.a.register("authEvent",e,or("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})}(t.i,function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=Vi(e.authEvent),n=0;n<t.g.length;n++)r=t.g[n](e)||r;return(n={}).status=r?"ACK":"ERROR",Et(n)}return n.status="ERROR",Et(n)})}(t)}),t.l)}function us(t){return t.o||(t.v=t.c?rr(t.c,is(t.b)):null,t.o=new zo(t.f,Xa(t.h),t.v)),t.o}function cs(t,e,n,r,i,o,a,s,u,c){return(t=new rs(t,e,n,r,i)).i=o,t.g=a,t.h=s,t.b=ot(u||null),t.f=c,t.toString()}function hs(t){if(this.a=t||r.a.INTERNAL.reactNative&&r.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new Mr("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function ls(t){this.b=t,this.a={},this.c=g(this.f,this)}ns.prototype.toString=function(){return this.f?He(this.a,"v",this.f):sn(this.a.a,"v"),this.b?He(this.a,"eid",this.b):sn(this.a.a,"eid"),this.c.length?He(this.a,"fw",this.c.join(",")):sn(this.a.a,"fw"),this.a.toString()},rs.prototype.toString=function(){var t=Ye(this.o,"/__/auth/handler");if(He(t,"apiKey",this.m),He(t,"appName",this.c),He(t,"authType",this.l),this.a.isOAuthProvider){var e=this.a;try{var n=r.a.app(this.c).auth().ea()}catch(t){n=null}for(var i in e.Za=n,He(t,"providerId",this.a.providerId),n=fr((e=this.a).xb))n[i]=n[i].toString();i=e.Cc,n=ot(n);for(var o=0;o<i.length;o++){var a=i[o];a in n&&delete n[a]}e.bb&&e.Za&&!n[e.bb]&&(n[e.bb]=e.Za),it(n)||He(t,"customParameters",lr(n))}if("function"==typeof this.a.Db&&((e=this.a.Db()).length&&He(t,"scopes",e.join(","))),this.i?He(t,"redirectUrl",this.i):sn(t.a,"redirectUrl"),this.g?He(t,"eventId",this.g):sn(t.a,"eventId"),this.h?He(t,"v",this.h):sn(t.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Qe(t,s)&&He(t,s,this.b[s]);return this.f?He(t,"eid",this.f):sn(t.a,"eid"),(s=is(this.c)).length&&He(t,"fw",s.join(",")),t.toString()},(t=os.prototype).Ea=function(t,e,n){var r=new Mr("popup-closed-by-user"),i=new Mr("web-storage-unsupported"),o=this,a=!1;return this.ga().then(function(){(function(t){var e={type:"webStorageSupport"};return ss(t).then(function(){return function(t,e){return t.eb.then(function(){return new vt(function(n){t.a.send(e.type,e,n,or("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})}(t.i,e)}).then(function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()})})(o).then(function(n){n||(t&&Kn(t),e(i),a=!0)})}).s(function(){}).then(function(){if(!a)return function(t){return new vt(function(e){return function n(){Le(2e3).then(function(){if(t&&!t.closed)return n();e()})}()})}(t)}).then(function(){if(!a)return Le(n).then(function(){e(r)})})},t.Lb=function(){var t=ir();return!hr(t)&&!vr(t)},t.Gb=function(){return!1},t.Bb=function(t,e,n,r,i,o,a){if(!t)return Tt(new Mr("popup-blocked"));if(a&&!hr())return this.ga().s(function(e){Kn(t),i(e)}),r(),Et();this.a||(this.a=as(us(this)));var s=this;return this.a.then(function(){var e=s.ga().s(function(e){throw Kn(t),i(e),e});return r(),e}).then(function(){(Ui(n),a)||Bn(cs(s.m,s.f,s.b,e,n,null,o,s.c,void 0,s.h),t)}).s(function(t){throw"auth/network-request-failed"==t.code&&(s.a=null),t})},t.Ca=function(t,e,n){this.a||(this.a=as(us(this)));var r=this;return this.a.then(function(){Ui(e),Bn(cs(r.m,r.f,r.b,t,e,Vn(),n,r.c,void 0,r.h))}).s(function(t){throw"auth/network-request-failed"==t.code&&(r.a=null),t})},t.ga=function(){var t=this;return ss(this).then(function(){return t.i.eb}).s(function(){throw t.a=null,new Mr("network-request-failed")})},t.Pb=function(){return!0},t.va=function(t){this.g.push(t)},t.Ka=function(t){j(this.g,function(e){return e==t})},(t=hs.prototype).get=function(t){return Et(this.a.getItem(t)).then(function(t){return t&&pr(t)})},t.set=function(t,e){return Et(this.a.setItem(t,lr(e)))},t.P=function(t){return Et(this.a.removeItem(t))},t.Y=function(){},t.ca=function(){};var fs,ps=[];function ds(t){this.a=t}function vs(t){this.c=t,this.b=!1,this.a=[]}function ys(t,e,n,r){var i,o,a,s,u=n||{},c=null;if(t.b)return Tt(Error("connection_unavailable"));var h=r?800:50,l="undefined"!=typeof MessageChannel?new MessageChannel:null;return new vt(function(n,r){l?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),l.port1.start(),a=setTimeout(function(){r(Error("unsupported_event"))},h),c={messageChannel:l,onMessage:o=function(t){t.data.eventId===i&&("ack"===t.data.status?(clearTimeout(a),s=setTimeout(function(){r(Error("timeout"))},3e3)):"done"===t.data.status?(clearTimeout(s),void 0!==t.data.response?n(t.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},t.a.push(c),l.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:i,data:u},[l.port2])):r(Error("connection_unavailable"))}).then(function(e){return gs(t,c),e}).s(function(e){throw gs(t,c),e})}function gs(t,e){if(e){var n=e.messageChannel,r=e.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),j(t.a,function(t){return t==e})}}function _s(){if(!ws())throw new Mr("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.m=n.indexedDB,this.type="indexedDB",this.g=this.l=this.f=this.i=null,this.u=!1,this.h=null;var t=this;Xn()&&self?(this.l=function(){var t=Xn()?self:null;if(R(ps,function(n){n.b==t&&(e=n)}),!e){var e=new ls(t);ps.push(e)}return e}(),this.l.subscribe("keyChanged",function(e,n){return Is(t).then(function(e){return 0<e.length&&R(t.a,function(t){t(e)}),{keyProcessed:F(e,n.key)}})}),this.l.subscribe("ping",function(){return Et(["keyChanged"])})):function(){var t=n.navigator;return t&&t.serviceWorker?Et().then(function(){return t.serviceWorker.ready}).then(function(t){return t.active||null}).s(function(){return null}):Et(null)}().then(function(e){(t.h=e)&&(t.g=new vs(new ds(e)),ys(t.g,"ping",null,!0).then(function(e){e[0].fulfilled&&F(e[0].value,"keyChanged")&&(t.u=!0)}).s(function(){}))})}function ms(t){return new vt(function(e,n){var r=t.m.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new vt(function(e,n){var r=t.m.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}})}(t).then(function(){return ms(t)}).then(function(t){e(t)}).s(function(t){n(t)})}})}function bs(t){return t.o||(t.o=ms(t)),t.o}function ws(){try{return!!n.indexedDB}catch(t){return!1}}function Es(t){return t.objectStore("firebaseLocalStorage")}function Ts(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function Ss(t){return new vt(function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(Error(t.target.errorCode))}})}function Cs(t,e){return t.g&&t.h&&function(){var t=n.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?ys(t.g,"keyChanged",{key:e},t.u).then(function(){}).s(function(){}):Et()}function Is(t){return bs(t).then(function(t){var e=Es(Ts(t,!1));return e.getAll?Ss(e.getAll()):new vt(function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(Error(t.target.errorCode))}})}).then(function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=function t(e,n){var r,i=[];for(r in e)r in n?typeof e[r]!=typeof n[r]?i.push(r):"object"==typeof e[r]&&null!=e[r]&&null!=n[r]?0<t(e[r],n[r]).length&&i.push(r):e[r]!==n[r]&&i.push(r):i.push(r);for(r in n)r in e||i.push(r);return i}(t.c,n),t.c=n}return r})}function Ns(t){t.i&&t.i.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function Os(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Et().then(function(){if(ws()){var t=dr(),r="__sak"+t;return fs||(fs=new _s),(n=fs).set(r,t).then(function(){return n.get(r)}).then(function(e){if(e!==t)throw Error("indexedDB not supported!");return n.P(r)}).then(function(){return n}).s(function(){return e.c})}return e.c}).then(function(t){return e.type=t.type,t.Y(function(t){R(e.a,function(e){e(t)})}),t})}function As(){this.a={},this.type="inMemory"}function ks(){if(!function(){var t="Node"==Jn();if(!(t=Ps()||t&&r.a.INTERNAL.node&&r.a.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Jn())throw new Mr("internal-error","The LocalStorage compatibility library was not found.");throw new Mr("web-storage-unsupported")}this.a=Ps()||r.a.INTERNAL.node.localStorage,this.type="localStorage"}function Ps(){try{var t=n.localStorage,e=dr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Ds(){this.type="nullStorage"}function Rs(){if(!function(){var t="Node"==Jn();if(!(t=Ls()||t&&r.a.INTERNAL.node&&r.a.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Jn())throw new Mr("internal-error","The SessionStorage compatibility library was not found.");throw new Mr("web-storage-unsupported")}this.a=Ls()||r.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Ls(){try{var t=n.sessionStorage,e=dr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}ls.prototype.f=function(t){var e=t.data.eventType,n=t.data.eventId,r=this.a[e];if(r&&0<r.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var i=[];R(r,function(e){i.push(Et().then(function(){return e(t.origin,t.data.data)}))}),Ct(i).then(function(r){var i=[];R(r,function(t){i.push({fulfilled:t.Cb,value:t.value,reason:t.reason?t.reason.message:void 0})}),R(i,function(t){for(var e in t)void 0===t[e]&&delete t[e]}),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:i})})}},ls.prototype.subscribe=function(t,e){it(this.a)&&this.b.addEventListener("message",this.c),void 0===this.a[t]&&(this.a[t]=[]),this.a[t].push(e)},ls.prototype.unsubscribe=function(t,e){void 0!==this.a[t]&&e?(j(this.a[t],function(t){return t==e}),0==this.a[t].length&&delete this.a[t]):e||delete this.a[t],it(this.a)&&this.b.removeEventListener("message",this.c)},ds.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},vs.prototype.close=function(){for(;0<this.a.length;)gs(this,this.a[0]);this.b=!0},(t=_s.prototype).set=function(t,e){var n,r=!1,i=this;return bs(this).then(function(e){return Ss((e=Es(Ts(n=e,!0))).get(t))}).then(function(o){var a=Es(Ts(n,!0));return o?(o.value=e,Ss(a.put(o))):(i.b++,r=!0,(o={}).fbase_key=t,o.value=e,Ss(a.add(o)))}).then(function(){return i.c[t]=e,Cs(i,t)}).ia(function(){r&&i.b--})},t.get=function(t){return bs(this).then(function(e){return Ss(Es(Ts(e,!1)).get(t))}).then(function(t){return t&&t.value})},t.P=function(t){var e=!1,n=this;return bs(this).then(function(r){return e=!0,n.b++,Ss(Es(Ts(r,!0)).delete(t))}).then(function(){return delete n.c[t],Cs(n,t)}).ia(function(){e&&n.b--})},t.Y=function(t){0==this.a.length&&function(t){Ns(t),function e(){t.f=setTimeout(function(){t.i=Is(t).then(function(e){0<e.length&&R(t.a,function(t){t(e)})}).then(function(){e()}).s(function(t){"STOP_EVENT"!=t.message&&e()})},800)}()}(this),this.a.push(t)},t.ca=function(t){j(this.a,function(e){return e==t}),0==this.a.length&&Ns(this)},(t=Os.prototype).get=function(t){return this.b.then(function(e){return e.get(t)})},t.set=function(t,e){return this.b.then(function(n){return n.set(t,e)})},t.P=function(t){return this.b.then(function(e){return e.P(t)})},t.Y=function(t){this.a.push(t)},t.ca=function(t){j(this.a,function(e){return e==t})},(t=As.prototype).get=function(t){return Et(this.a[t])},t.set=function(t,e){return this.a[t]=e,Et()},t.P=function(t){return delete this.a[t],Et()},t.Y=function(){},t.ca=function(){},(t=ks.prototype).get=function(t){var e=this;return Et().then(function(){return pr(e.a.getItem(t))})},t.set=function(t,e){var n=this;return Et().then(function(){var r=lr(e);null===r?n.P(t):n.a.setItem(t,r)})},t.P=function(t){var e=this;return Et().then(function(){e.a.removeItem(t)})},t.Y=function(t){n.window&&ge(n.window,"storage",t)},t.ca=function(t){n.window&&be(n.window,"storage",t)},(t=Ds.prototype).get=function(){return Et(null)},t.set=function(){return Et()},t.P=function(){return Et()},t.Y=function(){},t.ca=function(){},(t=Rs.prototype).get=function(t){var e=this;return Et().then(function(){return pr(e.a.getItem(t))})},t.set=function(t,e){var n=this;return Et().then(function(){var r=lr(e);null===r?n.P(t):n.a.setItem(t,r)})},t.P=function(t){var e=this;return Et().then(function(){e.a.removeItem(t)})},t.Y=function(){},t.ca=function(){};var xs,Fs,Ms={A:ks,Qa:Rs},js={A:ks,Qa:Rs},Us={A:hs,Qa:Ds},Ws={A:ks,Qa:Ds},Vs={Yc:"local",NONE:"none",$c:"session"};function Bs(){var t=!(vr(ir())||!zn()),e=hr(),r=ar();this.o=t,this.h=e,this.l=r,this.a={},xs||(xs=new function(){var t={};t.Browser=Ms,t.Node=js,t.ReactNative=Us,t.Worker=Ws,this.a=t[Jn()]}),t=xs;try{this.g=!Wn()&&br()||!n.indexedDB?new t.a.A:new Os(Xn()?new As:new t.a.A)}catch(t){this.g=new As,this.h=!0}try{this.i=new t.a.Qa}catch(t){this.i=new As}this.m=new As,this.f=g(this.Ob,this),this.b={}}function qs(){return Fs||(Fs=new Bs),Fs}function Ks(t,e){switch(e){case"session":return t.i;case"none":return t.m;default:return t.g}}function Hs(t,e){return"firebase:"+t.name+(e?":"+e:"")}function Qs(t,e,n){return n=Hs(e,n),"local"==e.A&&(t.b[n]=null),Ks(t,e.A).P(n)}function Gs(t){t.c&&(clearInterval(t.c),t.c=null)}(t=Bs.prototype).get=function(t,e){return Ks(this,t.A).get(Hs(t,e))},t.set=function(t,e,n){var r=Hs(t,n),i=this,o=Ks(this,t.A);return o.set(r,e).then(function(){return o.get(r)}).then(function(e){"local"==t.A&&(i.b[r]=e)})},t.addListener=function(t,e,r){t=Hs(t,e),this.l&&(this.b[t]=n.localStorage.getItem(t)),it(this.a)&&(Ks(this,"local").Y(this.f),this.h||(Wn()||!br())&&n.indexedDB||!this.l||function(t){Gs(t),t.c=setInterval(function(){for(var e in t.a){var r=n.localStorage.getItem(e),i=t.b[e];r!=i&&(t.b[e]=r,r=new se({type:"storage",key:e,target:window,oldValue:i,newValue:r,a:!0}),t.Ob(r))}},1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(r)},t.removeListener=function(t,e,n){t=Hs(t,e),this.a[t]&&(j(this.a[t],function(t){return t==n}),0==this.a[t].length&&delete this.a[t]),it(this.a)&&(Ks(this,"local").ca(this.f),Gs(this))},t.Ob=function(t){if(t&&t.f){var e=t.a.key;if(null==e)for(var r in this.a){var i=this.b[r];void 0===i&&(i=null);var o=n.localStorage.getItem(r);o!==i&&(this.b[r]=o,this.Wa(r))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?Ks(this,"local").ca(this.f):Gs(this),this.o)if(r=n.localStorage.getItem(e),(i=t.a.newValue)!==r)null!==i?n.localStorage.setItem(e,i):n.localStorage.removeItem(e);else if(this.b[e]===i&&void 0===t.a.a)return;var a=this;r=function(){void 0===t.a.a&&a.b[e]===n.localStorage.getItem(e)||(a.b[e]=n.localStorage.getItem(e),a.Wa(e))},qt&&$t&&10==$t&&n.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(r,10):r()}}else R(t,g(this.Wa,this))},t.Wa=function(t){this.a[t]&&R(this.a[t],function(t){t()})};var Ys,zs={name:"authEvent",A:"local"};function Xs(t,e){this.b=Js,this.f=n.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=n.Int32Array?new Int32Array(64):Array(64),void 0!==Ys||(Ys=n.Int32Array?new Int32Array(iu):iu),this.reset()}b(Xs,function(){this.b=-1});for(var Js=64,$s=Js-1,Zs=[],tu=0;tu<$s;tu++)Zs[tu]=0;var eu=U(128,Zs);function nu(t){for(var e=t.f,n=t.l,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+a|0}r=0|t.a[0],i=0|t.a[1];var s=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],l=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var f=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&h^~c&l)+(0|Ys[e])|0)+(0|n[e])|0)|0,o=l,l=h,h=c,c=u+a|0,u=s,s=i,i=r,r=a+f|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+s|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+l|0,t.a[7]=t.a[7]+o|0}function ru(t,e,n){void 0===n&&(n=e.length);var r=0,o=t.c;if(i(e))for(;r<n;)t.f[o++]=e.charCodeAt(r++),o==t.b&&(nu(t),o=0);else{if(!h(e))throw Error("message must be string or array");for(;r<n;){var a=e[r++];if(!("number"==typeof a&&0<=a&&255>=a&&a==(0|a)))throw Error("message must be a byte array");t.f[o++]=a,o==t.b&&(nu(t),o=0)}}t.c=o,t.g+=n}Xs.prototype.reset=function(){this.g=this.c=0,this.a=n.Int32Array?new Int32Array(this.h):W(this.h)};var iu=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function ou(){Xs.call(this,8,au)}b(ou,Xs);var au=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function su(t,e,n,r,i){this.m=t,this.i=e,this.l=n,this.o=r||null,this.u=i||null,this.h=e+":"+n,this.v=new function(){this.a=qs()},this.g=new function(t){this.a=t,this.b=qs()}(this.h),this.f=null,this.b=[],this.a=this.c=null}function uu(t){return new Mr("invalid-cordova-configuration",t)}function cu(t){var e=new ou;ru(e,t),t=[];var n=8*e.g;56>e.c?ru(e,eu,56-e.c):ru(e,eu,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(nu(e),r=n=0;r<e.i;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return L(t,function(t){return 1<(t=t.toString(16)).length?t:"0"+t}).join("")}(t)}function hu(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function lu(t){return t.f||(t.f=t.ga().then(function(){return new vt(function(e){t.va(function n(r){return e(r),t.Ka(n),!1}),function(t){function e(e){i=!0,o&&o.cancel(),fu(t).then(function(n){var i=r;if(n&&e&&e.url){var o=null;-1!=(i=yi(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=pr(Qe(o=Ge(i),"firebaseError")||null))?jr(o):null)?new Wi(n.b,n.c,null,null,o):new Wi(n.b,n.c,i,n.g)),i=o||r}hu(t,i)})}var r=new Wi("unknown",null,null,null,new Mr("no-auth-event")),i=!1,o=Le(500).then(function(){return fu(t).then(function(){i||hu(t,r)})}),a=n.handleOpenURL;n.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(or("BuildInfo.packageName",n).toLowerCase()+"://")&&e({url:t}),"function"==typeof a)try{a(t)}catch(t){console.error(t)}},qi||(qi=new Bi),qi.subscribe(e)}(t)})})),t.f}function fu(t){var e=null;return function(t){return t.b.get(zs,t.a).then(function(t){return Vi(t)})}(t.g).then(function(n){return e=n,Qs((n=t.g).b,zs,n.a)}).then(function(){return e})}(t=su.prototype).ga=function(){return this.za?this.za:this.za=(Yn(void 0)?Gn().then(function(){return new vt(function(t,e){var r=n.document,i=setTimeout(function(){e(Error("Cordova framework is not ready."))},1e3);r.addEventListener("deviceready",function(){clearTimeout(i),t()},!1)})}):Tt(Error("Cordova must run in an Android or iOS file scheme."))).then(function(){if("function"!=typeof or("universalLinks.subscribe",n))throw uu("cordova-universal-links-plugin is not installed");if(void 0===or("BuildInfo.packageName",n))throw uu("cordova-plugin-buildinfo is not installed");if("function"!=typeof or("cordova.plugins.browsertab.openUrl",n))throw uu("cordova-plugin-browsertab is not installed");if("function"!=typeof or("cordova.InAppBrowser.open",n))throw uu("cordova-plugin-inappbrowser is not installed")},function(){throw new Mr("cordova-not-ready")})},t.Ea=function(t,e){return e(new Mr("operation-not-supported-in-this-environment")),Et()},t.Bb=function(){return Tt(new Mr("operation-not-supported-in-this-environment"))},t.Pb=function(){return!1},t.Lb=function(){return!0},t.Gb=function(){return!0},t.Ca=function(t,e,r){if(this.c)return Tt(new Mr("redirect-operation-pending"));var i=this,o=n.document,a=null,s=null,u=null,c=null;return this.c=Et().then(function(){return Ui(e),lu(i)}).then(function(){return function(t,e,r,i){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),a=new Wi(e,i,null,o,new Mr("no-auth-event")),s=or("BuildInfo.packageName",n);if("string"!=typeof s)throw new Mr("invalid-cordova-configuration");var u=or("BuildInfo.displayName",n),c={};if(ir().toLowerCase().match(/iphone|ipad|ipod/))c.ibi=s;else{if(!ir().toLowerCase().match(/android/))return Tt(new Mr("operation-not-supported-in-this-environment"));c.apn=s}u&&(c.appDisplayName=u),o=cu(o),c.sessionId=o;var h=cs(t.m,t.i,t.l,e,r,null,i,t.o,c,t.u);return t.ga().then(function(){var e=t.h;return t.v.a.set(zs,a.D(),e)}).then(function(){var e=or("cordova.plugins.browsertab.isAvailable",n);if("function"!=typeof e)throw new Mr("invalid-cordova-configuration");var r=null;e(function(e){if(e){if("function"!=typeof(r=or("cordova.plugins.browsertab.openUrl",n)))throw new Mr("invalid-cordova-configuration");r(h)}else{if("function"!=typeof(r=or("cordova.InAppBrowser.open",n)))throw new Mr("invalid-cordova-configuration");e=!(!(e=ir()).match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)),t.a=r(h,e?"_blank":"_system","location=yes")}})})}(i,t,e,r)}).then(function(){return new vt(function(t,e){s=function(){var e=or("cordova.plugins.browsertab.close",n);return t(),"function"==typeof e&&e(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.va(s),u=function(){a||(a=Le(2e3).then(function(){e(new Mr("redirect-cancelled-by-user"))}))},c=function(){_r()&&u()},o.addEventListener("resume",u,!1),ir().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",c,!1)}).s(function(t){return fu(i).then(function(){throw t})})}).ia(function(){u&&o.removeEventListener("resume",u,!1),c&&o.removeEventListener("visibilitychange",c,!1),a&&a.cancel(),s&&i.Ka(s),i.c=null})},t.va=function(t){this.b.push(t),lu(this).s(function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Wi("unknown",null,null,null,new Mr("no-auth-event")),t(e))})},t.Ka=function(t){j(this.b,function(e){return e==t})};var pu={name:"pendingRedirect",A:"session"};function du(t){return Qs(t.b,pu,t.a)}function vu(t,e,n){this.u=t,this.l=e,this.m=n,this.h=[],this.f=!1,this.i=g(this.ab,this),this.b=new Cu,this.o=new Au,this.g=new function(t){this.a=t,this.b=qs()}(this.l+":"+this.m),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.o,this.c.linkViaPopup=this.o,this.c.reauthViaPopup=this.o,this.a=yu(this.u,this.l,this.m,Ya)}function yu(t,e,n,i){var o=r.a.SDK_VERSION||null;return Yn()?new su(t,e,n,o,i):new os(t,e,n,o,i)}function gu(t){t.f||(t.f=!0,t.a.va(t.i));var e=t.a;return t.a.ga().s(function(n){throw t.a==e&&t.reset(),n})}function _u(t){t.a.Lb()&&gu(t).s(function(e){var n=new Wi("unknown",null,null,null,new Mr("operation-not-supported-in-this-environment"));Eu(e)&&t.ab(n)}),t.a.Gb()||Iu(t.b)}(t=vu.prototype).reset=function(){this.f=!1,this.a.Ka(this.i),this.a=yu(this.u,this.l,this.m)},t.Xa=function(){this.b.Xa()},t.subscribe=function(t){if(F(this.h,t)||this.h.push(t),!this.f){var e=this;(function(t){return t.b.get(pu,t.a).then(function(t){return"pending"==t})})(this.g).then(function(t){t?du(e.g).then(function(){gu(e).s(function(t){var n=new Wi("unknown",null,null,null,new Mr("operation-not-supported-in-this-environment"));Eu(t)&&e.ab(n)})}):_u(e)}).s(function(){_u(e)})}},t.unsubscribe=function(t){j(this.h,function(e){return e==t})},t.ab=function(t){if(!t)throw new Mr("invalid-auth-event");for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.ub(t.b,t.c)){(e=this.c[t.b])&&e.h(t,r),e=!0;break}}return Iu(this.b),e};var mu=new gr(2e3,1e4),bu=new gr(3e4,6e4);function wu(t,e,n,r,i,o){return t.a.Bb(e,n,r,function(){t.f||(t.f=!0,t.a.va(t.i))},function(){t.reset()},i,o)}function Eu(t){return!(!t||"auth/cordova-not-ready"!=t.code)}vu.prototype.fa=function(){return this.b.fa()},vu.prototype.Ca=function(t,e,n){var r,i=this;return function(t){return t.b.set(pu,"pending",t.a)}(this.g).then(function(){return i.a.Ca(t,e,n).s(function(t){if(Eu(t))throw new Mr("operation-not-supported-in-this-environment");return r=t,du(i.g).then(function(){throw r})}).then(function(){return i.a.Pb()?new vt(function(){}):du(i.g).then(function(){return i.fa()}).then(function(){}).s(function(){})})})},vu.prototype.Ea=function(t,e,n,r){return this.a.Ea(n,function(n){t.ha(e,null,n,r)},mu.get())};var Tu={};function Su(t,e,n){var r=e+":"+n;return Tu[r]||(Tu[r]=new vu(t,e,n)),Tu[r]}function Cu(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Iu(t){t.g||(t.g=!0,Ou(t,!1,null,null))}function Nu(t,e){if(t.b=function(){return Et(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Ou(t,e,n,r){e?r?function(t,e){if(t.b=function(){return Tt(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):Nu(t,n):Nu(t,{user:null}),t.f=[],t.c=[]}function Au(){}function ku(){this.rb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.rb},set:function(t){this.rb=t},enumerable:!1})}function Pu(t,e){this.a=e,Cr(this,"verificationId",t)}function Du(t,e,n,r){return new Fi(t).Ta(e,n).then(function(t){return new Pu(t,r)})}function Ru(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function Lu(t){this.f=t,this.b=this.a=null,this.c=0}function xu(t,e){var n=e[Jo],r=e.refreshToken;e=Fu(e.expiresIn),t.b=n,t.c=e,t.a=r}function Fu(t){return m()+1e3*parseInt(t,10)}function Mu(t,e){return function(t,e){return new vt(function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?ia(t,t.i+"?key="+encodeURIComponent(t.b),function(t){t?t.error?r(Ga(t)):t.access_token&&t.refresh_token?n(t):r(new Mr("internal-error")):r(new Mr("network-request-failed"))},"POST",an(e).toString(),t.f,t.l.get()):r(new Mr("internal-error"))})}(t.f,e).then(function(e){return t.b=e.access_token,t.c=Fu(e.expires_in),t.a=e.refresh_token,{accessToken:t.b,expirationTime:t.c,refreshToken:t.a}}).s(function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e})}function ju(t,e){this.a=t||null,this.b=e||null,Ir(this,{lastSignInTime:mr(e||null),creationTime:mr(t||null)})}function Uu(t,e){for(var n in ae.call(this,t),e)this[n]=e[n]}function Wu(t,e,n){this.G=[],this.m=t.apiKey,this.o=t.appName,this.u=t.authDomain||null,t=r.a.SDK_VERSION?rr(r.a.SDK_VERSION):null,this.b=new zo(this.m,Xa(Ya),t),this.h=new Lu(this.b),Gu(this,e[Jo]),xu(this.h,e),Cr(this,"refreshToken",this.h.a),Xu(this,n||{}),Ae.call(this),this.I=!1,this.u&&sr()&&(this.a=Su(this.u,this.m,this.o)),this.N=[],this.i=null,this.w=function(t){return new Ru(function(){return t.F(!0)},function(t){return!(!t||"auth/network-request-failed"!=t.code)},function(){var e=t.h.c-m()-3e5;return 0<e?e:0})}(this),this.V=g(this.Ha,this);var i=this;this.ka=null,this.sa=function(t){i.oa(t.g)},this.X=null,this.O=[],this.ra=function(t){Bu(i,t.c)},this.W=null}function Vu(t,e){t.X&&be(t.X,"languageCodeChanged",t.sa),(t.X=e)&&ge(e,"languageCodeChanged",t.sa)}function Bu(t,e){t.O=e,ra(t.b,r.a.SDK_VERSION?rr(r.a.SDK_VERSION,t.O):null)}function qu(t,e){t.W&&be(t.W,"frameworkChanged",t.ra),(t.W=e)&&ge(e,"frameworkChanged",t.ra)}function Ku(t){try{return r.a.app(t.o).auth()}catch(e){throw new Mr("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.o+"'!")}}function Hu(t){t.C||t.w.b||(t.w.start(),be(t,"tokenChanged",t.V),ge(t,"tokenChanged",t.V))}function Qu(t){be(t,"tokenChanged",t.V),t.w.stop()}function Gu(t,e){t.qa=e,Cr(t,"_lat",e)}function Yu(t){for(var e=[],n=0;n<t.N.length;n++)e.push(t.N[n](t));return Ct(e).then(function(){return t})}function zu(t){t.a&&!t.I&&(t.I=!0,t.a.subscribe(t))}function Xu(t,e){Ir(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,metadata:new ju(e.createdAt,e.lastLoginAt),providerData:[]})}function Ju(){}function $u(t){return Et().then(function(){if(t.C)throw new Mr("app-deleted")})}function Zu(t){return L(t.providerData,function(t){return t.providerId})}function tc(t,e){e&&(ec(t,e.providerId),t.providerData.push(e))}function ec(t,e){j(t.providerData,function(t){return t.providerId==e})}function nc(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Cr(t,e,n)}function rc(t,e){t!=e&&(Ir(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,providerData:[]}),e.metadata?Cr(t,"metadata",function(t){return new ju(t.a,t.b)}(e.metadata)):Cr(t,"metadata",new ju),R(e.providerData,function(e){tc(t,e)}),function(t,e){t.b=e.b,t.a=e.a,t.c=e.c}(t.h,e.h),Cr(t,"refreshToken",t.h.a))}function ic(t){return t.F().then(function(e){var n=t.isAnonymous;return function(t,e){return Ha(t.b,Ia,{idToken:e}).then(g(t.wc,t))}(t,e).then(function(){return n||nc(t,"isAnonymous",!1),e})})}function oc(t,e){e[Jo]&&t.qa!=e[Jo]&&(xu(t.h,e),t.dispatchEvent(new Uu("tokenChanged")),Gu(t,e[Jo]),nc(t,"refreshToken",t.h.a))}function ac(t,e){return ic(t).then(function(){if(F(Zu(t),e))return Yu(t).then(function(){throw new Mr("provider-already-linked")})})}function sc(t,e,n){return Nr({user:t,credential:ji(e),additionalUserInfo:e=si(e),operationType:n})}function uc(t,e){return oc(t,e),t.reload().then(function(){return t})}function cc(t,e,n,i,o){if(!sr())return Tt(new Mr("operation-not-supported-in-this-environment"));if(t.i&&!o)return Tt(t.i);var a=ai(n.providerId),s=dr(t.uid+":::"),u=null;(!hr()||zn())&&t.u&&n.isOAuthProvider&&(u=cs(t.u,t.m,t.o,e,n,null,s,r.a.SDK_VERSION||null));var c=Hn(u,a&&a.Ba,a&&a.Aa);return i=i().then(function(){if(lc(t),!o)return t.F().then(function(){})}).then(function(){return wu(t.a,c,e,n,s,!!u)}).then(function(){return new vt(function(n,r){t.ha(e,null,new Mr("cancelled-popup-request"),t.g||null),t.f=n,t.v=r,t.g=s,t.c=t.a.Ea(t,e,c,s)})}).then(function(t){return c&&Kn(c),t?Nr(t):null}).s(function(t){throw c&&Kn(c),t}),fc(t,i,o)}function hc(t,e,n,r,i){if(!sr())return Tt(new Mr("operation-not-supported-in-this-environment"));if(t.i&&!i)return Tt(t.i);var o=null,a=dr(t.uid+":::");return r=r().then(function(){if(lc(t),!i)return t.F().then(function(){})}).then(function(){return t.aa=a,Yu(t)}).then(function(e){return t.ba&&(e=(e=t.ba).b.set(dc,t.D(),e.a)),e}).then(function(){return t.a.Ca(e,n,a)}).s(function(e){if(o=e,t.ba)return vc(t.ba);throw o}).then(function(){if(o)throw o}),fc(t,r,i)}function lc(t){if(!t.a||!t.I){if(t.a&&!t.I)throw new Mr("internal-error");throw new Mr("auth-domain-config-required")}}function fc(t,e,n){var r=function(t,e,n){return t.i&&!n?(e.cancel(),Tt(t.i)):e.s(function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.i||t.dispatchEvent(new Uu("userInvalidated")),t.i=e),e})}(t,e,n);return t.G.push(r),r.ia(function(){M(t.G,r)}),r}function pc(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName},n={};if(!(t.stsTokenManager&&t.stsTokenManager.accessToken&&t.stsTokenManager.expirationTime))return null;n[Jo]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null,n.expiresIn=(t.stsTokenManager.expirationTime-m())/1e3;var r=new Wu(e,n,t);return t.providerData&&R(t.providerData,function(t){t&&tc(r,Nr(t))}),t.redirectEventId&&(r.aa=t.redirectEventId),r}Cu.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Cu.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.b,r=t.c,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?t.a?(Ou(this,!0,null,t.a),Et()):e.wa(n,r)?function(t,e,n){n=n.wa(e.b,e.c);var r=e.f,i=e.g,o=!!e.b.match(/Redirect$/);n(r,i).then(function(e){Ou(t,o,e,null)}).s(function(e){Ou(t,o,null,e)})}(this,t,e):Tt(new Mr("invalid-auth-event")):(Ou(this,!1,null,null),Et())}else Tt(new Mr("invalid-auth-event"))},Cu.prototype.Xa=function(){this.g&&!this.i&&Ou(this,!1,null,null)},Cu.prototype.fa=function(){var t=this;return new vt(function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new Mr("timeout");t.a&&t.a.cancel(),t.a=Le(bu.get()).then(function(){t.b||(t.g=!0,Ou(t,!0,null,e))})}(t))})},Au.prototype.h=function(t,e){if(t){var n=t.b,r=t.c;t.a?(e.ha(t.b,null,t.a,t.c),Et()):e.wa(n,r)?function(t,e){var n=t.c,r=t.b;e.wa(r,n)(t.f,t.g).then(function(t){e.ha(r,t,null,n)}).s(function(t){e.ha(r,null,t,n)})}(t,e):Tt(new Mr("invalid-auth-event"))}else Tt(new Mr("invalid-auth-event"))},Pu.prototype.confirm=function(t){return t=Mi(this.verificationId,t),this.a(t)},Ru.prototype.start=function(){this.a=this.c,function t(e,r){e.stop();e.b=Le(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(e,r)).then(function(){return function(){var t=n.document,e=null;return _r()||!t?Et():new vt(function(n){e=function(){_r()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)}).s(function(n){throw t.removeEventListener("visibilitychange",e,!1),n})}()}).then(function(){return e.h()}).then(function(){t(e,!0)}).s(function(n){e.i(n)&&t(e,!1)})}(this,!0)},Ru.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},Lu.prototype.D=function(){return{apiKey:this.f.b,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}},Lu.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?Tt(new Mr("user-token-expired")):t||!this.b||m()>this.c-3e4?this.a?Mu(this,{grant_type:"refresh_token",refresh_token:this.a}):Et(null):Et({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})},ju.prototype.D=function(){return{lastLoginAt:this.b,createdAt:this.a}},b(Uu,ae),b(Wu,Ae),Wu.prototype.oa=function(t){this.ka=t,na(this.b,t)},Wu.prototype.ea=function(){return this.ka},Wu.prototype.xa=function(){return W(this.O)},Wu.prototype.Ha=function(){this.w.b&&(this.w.stop(),this.w.start())},Cr(Wu.prototype,"providerId","firebase"),(t=Wu.prototype).reload=function(){var t=this;return fc(this,$u(this).then(function(){return ic(t).then(function(){return Yu(t)}).then(Ju)}))},t.cc=function(t){return this.F(t).then(function(t){return new function(t){var e=ni(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new Mr("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Ir(this,{token:t,expirationTime:mr(1e3*e.exp),authTime:mr(1e3*e.auth_time),issuedAtTime:mr(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,claims:e})}(t)})},t.F=function(t){var e=this;return fc(this,$u(this).then(function(){return e.h.getToken(t)}).then(function(t){if(!t)throw new Mr("internal-error");return t.accessToken!=e.qa&&(Gu(e,t.accessToken),e.dispatchEvent(new Uu("tokenChanged"))),nc(e,"refreshToken",t.refreshToken),t.accessToken}))},t.wc=function(t){if(!(t=t.users)||!t.length)throw new Mr("internal-error");Xu(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?L(t,function(t){return new function(t,e,n,r,i,o){Ir(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)}):[]}(t),n=0;n<e.length;n++)tc(this,e[n]);nc(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length))},t.fb=function(t){var e=this,n=null;return fc(this,t.f(this.b,this.uid).then(function(t){return oc(e,t),n=sc(e,t,"reauthenticate"),e.i=null,e.reload()}).then(function(){return n}),!0)},t.xc=function(t){return Tr("firebase.User.prototype.reauthenticateWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential instead."),this.fb(t).then(function(){})},t.cb=function(t){var e=this,n=null;return fc(this,ac(this,t.providerId).then(function(){return e.F()}).then(function(n){return t.c(e.b,n)}).then(function(t){return n=sc(e,t,"link"),uc(e,t)}).then(function(){return n}))},t.oc=function(t){return Tr("firebase.User.prototype.linkWithCredential is deprecated. Please use firebase.User.prototype.linkAndRetrieveDataWithCredential instead."),this.cb(t).then(function(t){return t.user})},t.pc=function(t,e){var n=this;return fc(this,ac(this,"phone").then(function(){return Du(Ku(n),t,e,g(n.cb,n))}))},t.yc=function(t,e){var n=this;return fc(this,Et().then(function(){return Du(Ku(n),t,e,g(n.fb,n))}),!0)},t.ob=function(t){var e=this;return fc(this,this.F().then(function(n){return e.b.ob(n,t)}).then(function(t){return oc(e,t),e.reload()}))},t.Qc=function(t){var e=this;return fc(this,this.F().then(function(n){return t.c(e.b,n)}).then(function(t){return oc(e,t),e.reload()}))},t.pb=function(t){var e=this;return fc(this,this.F().then(function(n){return e.b.pb(n,t)}).then(function(t){return oc(e,t),e.reload()}))},t.qb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return $u(this);var e=this;return fc(this,this.F().then(function(n){return e.b.qb(n,{displayName:t.displayName,photoUrl:t.photoURL})}).then(function(t){return oc(e,t),nc(e,"displayName",t.displayName||null),nc(e,"photoURL",t.photoUrl||null),R(e.providerData,function(t){"password"===t.providerId&&(Cr(t,"displayName",e.displayName),Cr(t,"photoURL",e.photoURL))}),Yu(e)}).then(Ju))},t.Oc=function(t){var e=this;return fc(this,ic(this).then(function(n){return F(Zu(e),t)?function(t,e,n){return Ha(t,Ta,{idToken:e,deleteProvider:n})}(e.b,n,[t]).then(function(t){var n={};return R(t.providerUserInfo||[],function(t){n[t.providerId]=!0}),R(Zu(e),function(t){n[t]||ec(e,t)}),n[Fi.PROVIDER_ID]||Cr(e,"phoneNumber",null),Yu(e)}):Yu(e).then(function(){throw new Mr("no-such-provider")})}))},t.delete=function(){var t=this;return fc(this,this.F().then(function(e){return Ha(t.b,Ea,{idToken:e})}).then(function(){t.dispatchEvent(new Uu("userDeleted"))})).then(function(){for(var e=0;e<t.G.length;e++)t.G[e].cancel("app-deleted");Vu(t,null),qu(t,null),t.G=[],t.C=!0,Qu(t),Cr(t,"refreshToken",null),t.a&&t.a.unsubscribe(t)})},t.ub=function(t,e){return!!("linkViaPopup"==t&&(this.g||null)==e&&this.f||"reauthViaPopup"==t&&(this.g||null)==e&&this.f||"linkViaRedirect"==t&&(this.aa||null)==e||"reauthViaRedirect"==t&&(this.aa||null)==e)},t.ha=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.g||null)||(n&&this.v?this.v(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.wa=function(t,e){return"linkViaPopup"==t&&e==(this.g||null)?g(this.zb,this):"reauthViaPopup"==t&&e==(this.g||null)?g(this.Ab,this):"linkViaRedirect"==t&&(this.aa||null)==e?g(this.zb,this):"reauthViaRedirect"==t&&(this.aa||null)==e?g(this.Ab,this):null},t.qc=function(t){var e=this;return cc(this,"linkViaPopup",t,function(){return ac(e,t.providerId).then(function(){return Yu(e)})},!1)},t.zc=function(t){return cc(this,"reauthViaPopup",t,function(){return Et()},!0)},t.rc=function(t){var e=this;return hc(this,"linkViaRedirect",t,function(){return ac(e,t.providerId)},!1)},t.Ac=function(t){return hc(this,"reauthViaRedirect",t,function(){return Et()},!0)},t.zb=function(t,e){var n=this;this.c&&(this.c.cancel(),this.c=null);var r=null;return fc(this,this.F().then(function(r){return va(n.b,{requestUri:t,sessionId:e,idToken:r})}).then(function(t){return r=sc(n,t,"link"),uc(n,t)}).then(function(){return r}))},t.Ab=function(t,e){var n=this;this.c&&(this.c.cancel(),this.c=null);var r=null;return fc(this,Et().then(function(){return gi(ya(n.b,{requestUri:t,sessionId:e}),n.uid)}).then(function(t){return r=sc(n,t,"reauthenticate"),oc(n,t),n.i=null,n.reload()}).then(function(){return r}),!0)},t.ib=function(t){var e=this,n=null;return fc(this,this.F().then(function(e){return n=e,void 0===t||it(t)?{}:Xr(new Vr(t))}).then(function(t){return e.b.ib(n,t)}).then(function(t){if(e.email!=t)return e.reload()}).then(function(){}))},t.toJSON=function(){return this.D()},t.D=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.m,appName:this.o,authDomain:this.u,stsTokenManager:this.h.D(),redirectEventId:this.aa||null};return this.metadata&&ct(t,this.metadata.D()),R(this.providerData,function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))}),t};var dc={name:"redirectUser",A:"session"};function vc(t){return Qs(t.b,dc,t.a)}function yc(t){this.a=t,this.b=qs(),this.c=null,this.f=function(t){var e=mc("local"),r=mc("session"),i=mc("none");return function(t,e,r){var i=Hs(e,r),o=Ks(t,e.A);return t.get(e,r).then(function(a){var s=null;try{s=pr(n.localStorage.getItem(i))}catch(t){}if(s&&!a)return n.localStorage.removeItem(i),t.set(e,s,r);s&&a&&"localStorage"!=o.type&&n.localStorage.removeItem(i)})}(t.b,e,t.a).then(function(){return t.b.get(r,t.a)}).then(function(n){return n?r:t.b.get(i,t.a).then(function(n){return n?i:t.b.get(e,t.a).then(function(n){return n?e:t.b.get(_c,t.a).then(function(t){return t?mc(t):e})})})}).then(function(e){return t.c=e,gc(t,e.A)}).s(function(){t.c||(t.c=e)})}(this),this.b.addListener(mc("local"),this.a,g(this.g,this))}function gc(t,e){var n,r=[];for(n in Vs)Vs[n]!==e&&r.push(Qs(t.b,mc(Vs[n]),t.a));return r.push(Qs(t.b,_c,t.a)),function(t){return new vt(function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},a=function(t){n(t)},s=0;s<t.length;s++)St(t[s],_(o,s),a);else e(i)})}(r)}yc.prototype.g=function(){var t=this,e=mc("local");Tc(this,function(){return Et().then(function(){return t.c&&"local"!=t.c.A?t.b.get(e,t.a):null}).then(function(n){if(n)return gc(t,"local").then(function(){t.c=e})})})};var _c={name:"persistence",A:"session"};function mc(t){return{name:"authUser",A:t}}function bc(t,e){return Tc(t,function(){return t.b.set(t.c,e.D(),t.a)})}function wc(t){return Tc(t,function(){return Qs(t.b,t.c,t.a)})}function Ec(t,e){return Tc(t,function(){return t.b.get(t.c,t.a).then(function(t){return t&&e&&(t.authDomain=e),pc(t||{})})})}function Tc(t,e){return t.f=t.f.then(e,e),t.f}function Sc(t){if(this.m=!1,Cr(this,"settings",new ku),Cr(this,"app",t),!Pc(this).options||!Pc(this).options.apiKey)throw new Mr("invalid-api-key");t=r.a.SDK_VERSION?rr(r.a.SDK_VERSION):null,this.b=new zo(Pc(this).options&&Pc(this).options.apiKey,Xa(Ya),t),this.N=[],this.o=[],this.I=[],this.Sb=r.a.INTERNAL.createSubscribe(g(this.kc,this)),this.O=void 0,this.Tb=r.a.INTERNAL.createSubscribe(g(this.mc,this)),Ac(this,null),this.h=new yc(Pc(this).options.apiKey+":"+Pc(this).name),this.w=new function(t){this.a=t,this.b=qs()}(Pc(this).options.apiKey+":"+Pc(this).name),this.V=xc(this,function(t){var e=Pc(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(dc,t.a).then(function(t){return t&&e&&(t.authDomain=e),pc(t||{})})}(t.w,Pc(t).options.authDomain).then(function(e){return(t.C=e)&&(e.ba=t.w),vc(t.w)});return xc(t,e)}(t).then(function(){return Ec(t.h,e)}).then(function(e){return e?(e.ba=t.w,t.C&&(t.C.aa||null)==(e.aa||null)?e:e.reload().then(function(){return bc(t.h,e).then(function(){return e})}).s(function(n){return"auth/network-request-failed"==n.code?e:wc(t.h)})):null}).then(function(e){Ac(t,e||null)});return xc(t,n)}(this)),this.i=xc(this,function(t){return t.V.then(function(){return t.fa()}).s(function(){}).then(function(){if(!t.m)return t.ka()}).s(function(){}).then(function(){if(!t.m){t.X=!0;var e=t.h;e.b.addListener(mc("local"),e.a,t.ka)}})}(this)),this.X=!1,this.ka=g(this.Lc,this),this.Ha=g(this.Z,this),this.qa=g(this.ac,this),this.ra=g(this.ic,this),this.sa=g(this.jc,this),function(t){var e=Pc(t).options.authDomain,n=Pc(t).options.apiKey;e&&sr()&&(t.Rb=t.V.then(function(){if(!t.m){if(t.a=Su(e,n,Pc(t).name),t.a.subscribe(t),Dc(t)&&zu(Dc(t)),t.C){zu(t.C);var r=t.C;r.oa(t.ea()),Vu(r,t),Bu(r=t.C,t.G),qu(r,t),t.C=null}return t.a}}))}(this),this.INTERNAL={},this.INTERNAL.delete=g(this.delete,this),this.INTERNAL.logFramework=g(this.sc,this),this.u=0,Ae.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ea()},set:function(t){this.oa(t)},enumerable:!1}),t.W=null}(this),this.G=[]}function Cc(t){ae.call(this,"languageCodeChanged"),this.g=t}function Ic(t){ae.call(this,"frameworkChanged"),this.c=t}function Nc(t){return t.Rb||Tt(new Mr("auth-domain-config-required"))}function Oc(t,e){var n={};return n.apiKey=Pc(t).options.apiKey,n.authDomain=Pc(t).options.authDomain,n.appName=Pc(t).name,t.V.then(function(){return function(t,e,n,r){var i=new Wu(t,e);return n&&(i.ba=n),r&&Bu(i,r),i.reload().then(function(){return i})}(n,e,t.w,t.xa())}).then(function(e){return Dc(t)&&e.uid==Dc(t).uid?(rc(Dc(t),e),t.Z(e)):(Ac(t,e),zu(e),t.Z(e))}).then(function(){Lc(t)})}function Ac(t,e){Dc(t)&&(function(t,e){j(t.N,function(t){return t==e})}(Dc(t),t.Ha),be(Dc(t),"tokenChanged",t.qa),be(Dc(t),"userDeleted",t.ra),be(Dc(t),"userInvalidated",t.sa),Qu(Dc(t))),e&&(e.N.push(t.Ha),ge(e,"tokenChanged",t.qa),ge(e,"userDeleted",t.ra),ge(e,"userInvalidated",t.sa),0<t.u&&Hu(e)),Cr(t,"currentUser",e),e&&(e.oa(t.ea()),Vu(e,t),Bu(e,t.G),qu(e,t))}function kc(t,e){var n=null,r=null;return xc(t,e.then(function(e){return n=ji(e),r=si(e),Oc(t,e)}).then(function(){return Nr({user:Dc(t),credential:n,additionalUserInfo:r,operationType:"signIn"})}))}function Pc(t){return t.app}function Dc(t){return t.currentUser}function Rc(t){return Dc(t)&&Dc(t)._lat||null}function Lc(t){if(t.X){for(var e=0;e<t.o.length;e++)t.o[e]&&t.o[e](Rc(t));if(t.O!==t.getUid()&&t.I.length)for(t.O=t.getUid(),e=0;e<t.I.length;e++)t.I[e]&&t.I[e](Rc(t))}}function xc(t,e){return t.N.push(e),e.ia(function(){M(t.N,e)}),e}function Fc(){}function Mc(){this.a={},this.b=1e12}yc.prototype.lb=function(t){var e=null,n=this;return function(t){var e=new Mr("invalid-persistence-type"),n=new Mr("unsupported-persistence-type");t:{for(r in Vs)if(Vs[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(Jn()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;default:if(!ar()&&"none"!==t)throw n}}(t),Tc(this,function(){return t!=n.c.A?n.b.get(n.c,n.a).then(function(r){return e=r,gc(n,t)}).then(function(){if(n.c=mc(t),e)return n.b.set(n.c,e,n.a)}):Et()})},b(Sc,Ae),b(Cc,ae),b(Ic,ae),(t=Sc.prototype).lb=function(t){return xc(this,t=this.h.lb(t))},t.oa=function(t){this.W===t||this.m||(this.W=t,na(this.b,this.W),this.dispatchEvent(new Cc(this.ea())))},t.ea=function(){return this.W},t.Rc=function(){var t=n.navigator;this.oa(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.sc=function(t){this.G.push(t),ra(this.b,r.a.SDK_VERSION?rr(r.a.SDK_VERSION,this.G):null),this.dispatchEvent(new Ic(this.G))},t.xa=function(){return W(this.G)},t.toJSON=function(){return{apiKey:Pc(this).options.apiKey,authDomain:Pc(this).options.authDomain,appName:Pc(this).name,currentUser:Dc(this)&&Dc(this).D()}},t.ub=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==e&&!!this.f;default:return!1}},t.ha=function(t,e,n,r){"signInViaPopup"==t&&this.g==r&&(n&&this.v?this.v(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.wa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.g==e&&this.f?g(this.$b,this):null},t.$b=function(t,e){var n=this;t={requestUri:t,sessionId:e},this.c&&(this.c.cancel(),this.c=null);var r=null,i=null,o=da(n.b,t).then(function(t){return r=ji(t),i=si(t),t});return xc(this,t=n.V.then(function(){return o}).then(function(t){return Oc(n,t)}).then(function(){return Nr({user:Dc(n),credential:r,additionalUserInfo:i,operationType:"signIn"})}))},t.Jc=function(t){if(!sr())return Tt(new Mr("operation-not-supported-in-this-environment"));var e=this,n=ai(t.providerId),i=dr(),o=null;(!hr()||zn())&&Pc(this).options.authDomain&&t.isOAuthProvider&&(o=cs(Pc(this).options.authDomain,Pc(this).options.apiKey,Pc(this).name,"signInViaPopup",t,null,i,r.a.SDK_VERSION||null));var a=Hn(o,n&&n.Ba,n&&n.Aa);return xc(this,n=Nc(this).then(function(e){return wu(e,a,"signInViaPopup",t,i,!!o)}).then(function(){return new vt(function(t,n){e.ha("signInViaPopup",null,new Mr("cancelled-popup-request"),e.g),e.f=t,e.v=n,e.g=i,e.c=e.a.Ea(e,"signInViaPopup",a,i)})}).then(function(t){return a&&Kn(a),t?Nr(t):null}).s(function(t){throw a&&Kn(a),t}))},t.Kc=function(t){if(!sr())return Tt(new Mr("operation-not-supported-in-this-environment"));var e=this;return xc(this,Nc(this).then(function(){return function(t){return Tc(t,function(){return t.b.set(_c,t.c.A,t.a)})}(e.h)}).then(function(){return e.a.Ca("signInViaRedirect",t)}))},t.fa=function(){if(!sr())return Tt(new Mr("operation-not-supported-in-this-environment"));var t=this;return xc(this,Nc(this).then(function(){return t.a.fa()}).then(function(t){return t?Nr(t):null}))},t.Pc=function(t){if(!t)return Tt(new Mr("null-user"));var e=this,n={};n.apiKey=Pc(this).options.apiKey,n.authDomain=Pc(this).options.authDomain,n.appName=Pc(this).name;var r=function(t,e,n,r){e=e||{apiKey:t.m,authDomain:t.u,appName:t.o};var i=t.h,o={};return o[Jo]=i.b,o.refreshToken=i.a,o.expiresIn=(i.c-m())/1e3,e=new Wu(e,o),n&&(e.ba=n),r&&Bu(e,r),rc(e,t),e}(t,n,e.w,e.xa());return xc(this,this.i.then(function(){if(Pc(e).options.apiKey!=t.m)return r.reload()}).then(function(){return Dc(e)&&t.uid==Dc(e).uid?(rc(Dc(e),t),e.Z(t)):(Ac(e,r),zu(r),e.Z(r))}).then(function(){Lc(e)}))},t.mb=function(){var t=this;return xc(this,this.i.then(function(){return Dc(t)?(Ac(t,null),wc(t.h).then(function(){Lc(t)})):Et()}))},t.Lc=function(){var t=this;return Ec(this.h,Pc(this).options.authDomain).then(function(e){if(!t.m){var n;if(n=Dc(t)&&e){n=Dc(t).uid;var r=e.uid;n=void 0!==n&&null!==n&&""!==n&&void 0!==r&&null!==r&&""!==r&&n==r}if(n)return rc(Dc(t),e),Dc(t).F();(Dc(t)||e)&&(Ac(t,e),e&&(zu(e),e.ba=t.w),t.a&&t.a.subscribe(t),Lc(t))}})},t.Z=function(t){return bc(this.h,t)},t.ac=function(){Lc(this),this.Z(Dc(this))},t.ic=function(){this.mb()},t.jc=function(){this.mb()},t.kc=function(t){var e=this;this.addAuthTokenListener(function(){t.next(Dc(e))})},t.mc=function(t){var e=this;!function(t,e){t.I.push(e),xc(t,t.i.then(function(){!t.m&&F(t.I,e)&&t.O!==t.getUid()&&(t.O=t.getUid(),e(Rc(t)))}))}(this,function(){t.next(Dc(e))})},t.uc=function(t,e,n){var i=this;return this.X&&r.a.Promise.resolve().then(function(){l(t)?t(Dc(i)):l(t.next)&&t.next(Dc(i))}),this.Sb(t,e,n)},t.tc=function(t,e,n){var i=this;return this.X&&r.a.Promise.resolve().then(function(){i.O=i.getUid(),l(t)?t(Dc(i)):l(t.next)&&t.next(Dc(i))}),this.Tb(t,e,n)},t.bc=function(t){var e=this;return xc(this,this.i.then(function(){return Dc(e)?Dc(e).F(t).then(function(t){return{accessToken:t}}):null}))},t.Mb=function(t){var e=this;return this.i.then(function(){return kc(e,Ha(e.b,Wa,{token:t}))}).then(function(t){var n=t.user;return nc(n,"isAnonymous",!1),e.Z(n),t})},t.Dc=function(t){return Tr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCustomToken is deprecated. Please use firebase.auth.Auth.prototype.signInWithCustomToken instead."),this.Mb(t)},t.Ec=function(t,e){return Tr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.signInWithEmailAndPassword instead."),this.Nb(t,e)},t.Nb=function(t,e){var n=this;return this.i.then(function(){return kc(n,Ha(n.b,Va,{email:t,password:e}))})},t.wb=function(t,e){var n=this;return this.i.then(function(){return kc(n,Ha(n.b,ba,{email:t,password:e}))})},t.Vb=function(t,e){return Tr("firebase.auth.Auth.prototype.createUserAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.createUserWithEmailAndPassword instead."),this.wb(t,e)},t.Gc=function(t){return Tr("firebase.auth.Auth.prototype.signInWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential instead."),this.Oa(t).then(function(t){return t.user})},t.Oa=function(t){var e=this;return this.i.then(function(){return kc(e,t.ya(e.b))})},t.Pa=function(){var t=this;return this.i.then(function(){var e=Dc(t);return e&&e.isAnonymous?Nr({user:e,credential:null,additionalUserInfo:Nr({providerId:null,isNewUser:!1}),operationType:"signIn"}):kc(t,t.b.Pa()).then(function(e){var n=e.user;return nc(n,"isAnonymous",!0),t.Z(n),e})})},t.Fc=function(){return Tr("firebase.auth.Auth.prototype.signInAnonymouslyAndRetrieveData is deprecated. Please use firebase.auth.Auth.prototype.signInAnonymously instead."),this.Pa()},t.getUid=function(){return Dc(this)&&Dc(this).uid||null},t.Ub=function(t){this.addAuthTokenListener(t),this.u++,0<this.u&&Dc(this)&&Hu(Dc(this))},t.Bc=function(t){var e=this;R(this.o,function(n){n==t&&e.u--}),0>this.u&&(this.u=0),0==this.u&&Dc(this)&&Qu(Dc(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.o.push(t),xc(this,this.i.then(function(){e.m||F(e.o,t)&&t(Rc(e))}))},t.removeAuthTokenListener=function(t){j(this.o,function(e){return e==t})},t.delete=function(){this.m=!0;for(var t=0;t<this.N.length;t++)this.N[t].cancel("app-deleted");return this.N=[],this.h&&(t=this.h).b.removeListener(mc("local"),t.a,this.ka),this.a&&(this.a.unsubscribe(this),this.a.Xa()),r.a.Promise.resolve()},t.Yb=function(t){return Tr("firebase.auth.Auth.prototype.fetchProvidersForEmail is deprecated. Please use firebase.auth.Auth.prototype.fetchSignInMethodsForEmail instead."),xc(this,function(t,e){return Ha(t,wa,{identifier:e,continueUri:ur()?Vn():"http://localhost"}).then(function(t){return t.allProviders||[]})}(this.b,t))},t.Zb=function(t){return xc(this,function(t,e){return Ha(t,wa,{identifier:e,continueUri:ur()?Vn():"http://localhost"}).then(function(t){return t.signinMethods||[]})}(this.b,t))},t.nc=function(t){return!!Ri(t)},t.kb=function(t,e){var n=this;return xc(this,Et().then(function(){var t=new Vr(e);if(!t.c)throw new Mr("argument-error",qr+" must be true when sending sign in link to email");return Xr(t)}).then(function(e){return n.b.kb(t,e)}).then(function(){}))},t.Sc=function(t){return this.Ja(t).then(function(t){return t.data.email})},t.Ya=function(t,e){return xc(this,this.b.Ya(t,e).then(function(){}))},t.Ja=function(t){return xc(this,this.b.Ja(t).then(function(t){return new function(t){var e={},n=t[kr],r=t[Pr];if(!(t=t[Dr])||t!=Ar&&!n)throw Error("Invalid provider user info!");e[Lr]=r||null,e[Rr]=n||null,Cr(this,Fr,t),Cr(this,xr,Or(e))}(t)}))},t.Va=function(t){return xc(this,this.b.Va(t).then(function(){}))},t.jb=function(t,e){var n=this;return xc(this,Et().then(function(){return void 0===e||it(e)?{}:Xr(new Vr(e))}).then(function(e){return n.b.jb(t,e)}).then(function(){}))},t.Ic=function(t,e){return xc(this,Du(this,t,e,g(this.Oa,this)))},t.Hc=function(t,e){var n=this;return xc(this,Et().then(function(){var r=Di(t,e||Vn());return n.Oa(r)}))},Fc.prototype.render=function(){},Fc.prototype.reset=function(){},Fc.prototype.getResponse=function(){},Fc.prototype.execute=function(){};var jc=null;function Uc(t,e){return(e=Wc(e))&&t.a[e]||null}function Wc(t){return(t=void 0===t?1e12:t)?t.toString():null}function Vc(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=Pn(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():ge(this.f,"click",this.i)}function Bc(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function qc(){}Mc.prototype.render=function(t,e){return this.a[this.b.toString()]=new Vc(t,e),this.b++},Mc.prototype.reset=function(t){var e=Uc(this,t);t=Wc(t),e&&t&&(e.delete(),delete this.a[t])},Mc.prototype.getResponse=function(t){return(t=Uc(this,t))?t.getResponse():null},Mc.prototype.execute=function(t){(t=Uc(this,t))&&t.execute()},Vc.prototype.getResponse=function(){return Bc(this),this.b},Vc.prototype.execute=function(){Bc(this);var t=this;this.a||(this.a=setTimeout(function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout(function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()},6e4)},500))},Vc.prototype.delete=function(){Bc(this),this.g=!0,clearTimeout(this.a),this.a=null,be(this.f,"click",this.i)},qc.prototype.g=function(){return jc||(jc=new Mc),Et(jc)},qc.prototype.c=function(){};var Kc=null;function Hc(){this.b=n.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Qc=vn("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Gc=new gr(3e4,6e4);Hc.prototype.g=function(t){var e=this;return new vt(function(r,i){var o=setTimeout(function(){i(new Mr("network-request-failed"))},Gc.get());!n.grecaptcha||t!==e.f&&!e.b?(n[e.a]=function(){if(n.grecaptcha){e.f=t;var a=n.grecaptcha.render;n.grecaptcha.render=function(t,n){return t=a(t,n),e.b++,t},clearTimeout(o),r(n.grecaptcha)}else clearTimeout(o),i(new Mr("internal-error"));delete n[e.a]},Et(Bo(_n(Qc,{onload:e.a,hl:t||""}))).s(function(){clearTimeout(o),i(new Mr("internal-error","Unable to load external reCAPTCHA dependencies!"))})):(clearTimeout(o),r(n.grecaptcha))})},Hc.prototype.c=function(){this.b--};var Yc=null;function zc(t,e,r,i,o,a,s){if(Cr(this,"type","recaptcha"),this.c=this.f=null,this.C=!1,this.m=e,this.g=null,s?(Kc||(Kc=new qc),s=Kc):(Yc||(Yc=new Hc),s=Yc),this.o=s,this.a=r||{theme:"light",type:"image"},this.h=[],this.a[$c])throw new Mr("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Zc],!n.document)throw new Mr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!Pn(e)||!this.i&&Pn(e).hasChildNodes())throw new Mr("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.u=new zo(t,a||null,o||null),this.v=i||function(){return null};var u=this;this.l=[];var c=this.a[Xc];this.a[Xc]=function(t){if(th(u,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=or(c,n);"function"==typeof e&&e(t)}};var h=this.a[Jc];this.a[Jc]=function(){if(th(u,null),"function"==typeof h)h();else if("string"==typeof h){var t=or(h,n);"function"==typeof t&&t()}}}var Xc="callback",Jc="expired-callback",$c="sitekey",Zc="size";function th(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function eh(t,e){return t.h.push(e),e.ia(function(){M(t.h,e)}),e}function nh(t){if(t.C)throw new Mr("internal-error","RecaptchaVerifier instance has been destroyed.")}function rh(t,e,n){var i=!1;try{this.b=n||r.a.app()}catch(t){throw new Mr("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new Mr("invalid-api-key");n=this.b.options.apiKey;var o=this,a=null;try{a=this.b.auth().xa()}catch(t){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}a=r.a.SDK_VERSION?rr(r.a.SDK_VERSION,a):null,zc.call(this,n,t,e,function(){try{var t=o.b.auth().ea()}catch(e){t=null}return t},a,Xa(Ya),i)}function ih(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<e.length;a++)if(e[a].optional)o=!0;else{if(o)throw new Mr("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].M(n[i])&&!o){if(e=e[i],0>i||i>=oh.length)throw new Mr("internal-error","Argument validator received an unsupported number of arguments.");n=oh[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.K+".";break t}r=null}}if(r)throw new Mr("argument-error",t+" failed: "+r)}(t=zc.prototype).za=function(){var t=this;return this.f?this.f:this.f=eh(this,Et().then(function(){if(ur()&&!Xn())return Gn();throw new Mr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")}).then(function(){return t.o.g(t.v())}).then(function(e){return t.g=e,Ha(t.u,Pa,{})}).then(function(e){t.a[$c]=e.recaptchaSiteKey}).s(function(e){throw t.f=null,e}))},t.render=function(){nh(this);var t=this;return eh(this,this.za().then(function(){if(null===t.c){var e=t.m;if(!t.i){var n=Pn(e);e=Ln("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c}))},t.verify=function(){nh(this);var t=this;return eh(this,this.render().then(function(e){return new vt(function(n){var r=t.g.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){j(t.l,function(t){return t==e})}(t,i),n(e))};t.l.push(i),t.i&&t.g.execute(t.c)}})}))},t.reset=function(){nh(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){nh(this),this.C=!0,this.o.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=Pn(this.m);for(var e;e=t.firstChild;)t.removeChild(e)}},b(rh,zc);var oh="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function ah(t,e){return{name:t||"",K:"a valid string",optional:!!e,M:i}}function sh(t,e){return{name:t||"",K:"a boolean",optional:!!e,M:o}}function uh(t,e){return{name:t||"",K:"a valid object",optional:!!e,M:f}}function ch(t,e){return{name:t||"",K:"a function",optional:!!e,M:l}}function hh(t,e){return{name:t||"",K:"null",optional:!!e,M:u}}function lh(t){return{name:t?t+"Credential":"credential",K:t?"a valid "+t+" credential":"a valid credential",optional:!1,M:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ya||!n)}}}function fh(){return{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(t){return!!(t&&i(t.type)&&l(t.verify))}}}function ph(t,e,n,r){return{name:n||"",K:t.K+" or "+e.K,optional:!!r,M:function(n){return t.M(n)||e.M(n)}}}function dh(t,e){for(var n in e){var r=e[n].name;t[r]=gh(r,t[n],e[n].j)}}function vh(t,e){for(var n in e){var r=e[n].name;r!==n&&Object.defineProperty(t,r,{get:_(function(t){return this[t]},n),set:_(function(t,e,n,r){ih(t,[n],[r],!0),this[e]=r},r,n,e[n].sb),enumerable:!0})}}function yh(t,e,n,r){t[e]=gh(e,n,r)}function gh(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return ih(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}dh(Sc.prototype,{Va:{name:"applyActionCode",j:[ah("code")]},Ja:{name:"checkActionCode",j:[ah("code")]},Ya:{name:"confirmPasswordReset",j:[ah("code"),ah("newPassword")]},wb:{name:"createUserWithEmailAndPassword",j:[ah("email"),ah("password")]},Vb:{name:"createUserAndRetrieveDataWithEmailAndPassword",j:[ah("email"),ah("password")]},Yb:{name:"fetchProvidersForEmail",j:[ah("email")]},Zb:{name:"fetchSignInMethodsForEmail",j:[ah("email")]},fa:{name:"getRedirectResult",j:[]},nc:{name:"isSignInWithEmailLink",j:[ah("emailLink")]},tc:{name:"onAuthStateChanged",j:[ph(uh(),ch(),"nextOrObserver"),ch("opt_error",!0),ch("opt_completed",!0)]},uc:{name:"onIdTokenChanged",j:[ph(uh(),ch(),"nextOrObserver"),ch("opt_error",!0),ch("opt_completed",!0)]},jb:{name:"sendPasswordResetEmail",j:[ah("email"),ph(uh("opt_actionCodeSettings",!0),hh(null,!0),"opt_actionCodeSettings",!0)]},kb:{name:"sendSignInLinkToEmail",j:[ah("email"),uh("actionCodeSettings")]},lb:{name:"setPersistence",j:[ah("persistence")]},Oa:{name:"signInAndRetrieveDataWithCredential",j:[lh()]},Pa:{name:"signInAnonymously",j:[]},Fc:{name:"signInAnonymouslyAndRetrieveData",j:[]},Gc:{name:"signInWithCredential",j:[lh()]},Mb:{name:"signInWithCustomToken",j:[ah("token")]},Dc:{name:"signInAndRetrieveDataWithCustomToken",j:[ah("token")]},Nb:{name:"signInWithEmailAndPassword",j:[ah("email"),ah("password")]},Hc:{name:"signInWithEmailLink",j:[ah("email"),ah("emailLink",!0)]},Ec:{name:"signInAndRetrieveDataWithEmailAndPassword",j:[ah("email"),ah("password")]},Ic:{name:"signInWithPhoneNumber",j:[ah("phoneNumber"),fh()]},Jc:{name:"signInWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Kc:{name:"signInWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Pc:{name:"updateCurrentUser",j:[ph({name:"user",K:"an instance of Firebase User",optional:!1,M:function(t){return!!(t&&t instanceof Wu)}},hh(),"user")]},mb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[ah(null,!0)]},Rc:{name:"useDeviceLanguage",j:[]},Sc:{name:"verifyPasswordResetCode",j:[ah("code")]}}),vh(Sc.prototype,{lc:{name:"languageCode",sb:ph(ah(),hh(),"languageCode")}}),Sc.Persistence=Vs,Sc.Persistence.LOCAL="local",Sc.Persistence.SESSION="session",Sc.Persistence.NONE="none",dh(Wu.prototype,{delete:{name:"delete",j:[]},cc:{name:"getIdTokenResult",j:[sh("opt_forceRefresh",!0)]},F:{name:"getIdToken",j:[sh("opt_forceRefresh",!0)]},cb:{name:"linkAndRetrieveDataWithCredential",j:[lh()]},oc:{name:"linkWithCredential",j:[lh()]},pc:{name:"linkWithPhoneNumber",j:[ah("phoneNumber"),fh()]},qc:{name:"linkWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},rc:{name:"linkWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},fb:{name:"reauthenticateAndRetrieveDataWithCredential",j:[lh()]},xc:{name:"reauthenticateWithCredential",j:[lh()]},yc:{name:"reauthenticateWithPhoneNumber",j:[ah("phoneNumber"),fh()]},zc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Ac:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},ib:{name:"sendEmailVerification",j:[ph(uh("opt_actionCodeSettings",!0),hh(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[ah(null,!0)]},Oc:{name:"unlink",j:[ah("provider")]},ob:{name:"updateEmail",j:[ah("email")]},pb:{name:"updatePassword",j:[ah("password")]},Qc:{name:"updatePhoneNumber",j:[lh("phone")]},qb:{name:"updateProfile",j:[uh("profile")]}}),dh(Mc.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),dh(Fc.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),dh(vt.prototype,{ia:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),vh(ku.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",sb:sh("appVerificationDisabledForTesting")}}),dh(Pu.prototype,{confirm:{name:"confirm",j:[ah("verificationCode")]}}),yh(Pi,"credential",function(t,e){return new ki(t,e)},[ah("email"),ah("password")]),dh(Ei.prototype,{ta:{name:"addScope",j:[ah("scope")]},Da:{name:"setCustomParameters",j:[uh("customOAuthParameters")]}}),yh(Ei,"credential",Ti,[ph(ah(),uh(),"token")]),yh(Pi,"credentialWithLink",Di,[ah("email"),ah("emailLink")]),dh(Si.prototype,{ta:{name:"addScope",j:[ah("scope")]},Da:{name:"setCustomParameters",j:[uh("customOAuthParameters")]}}),yh(Si,"credential",Ci,[ph(ah(),uh(),"token")]),dh(Ii.prototype,{ta:{name:"addScope",j:[ah("scope")]},Da:{name:"setCustomParameters",j:[uh("customOAuthParameters")]}}),yh(Ii,"credential",Ni,[ph(ah(),ph(uh(),hh()),"idToken"),ph(ah(),hh(),"accessToken",!0)]),dh(Oi.prototype,{Da:{name:"setCustomParameters",j:[uh("customOAuthParameters")]}}),yh(Oi,"credential",Ai,[ph(ah(),uh(),"token"),ah("secret",!0)]),dh(wi.prototype,{ta:{name:"addScope",j:[ah("scope")]},credential:{name:"credential",j:[ph(ah(),hh(),"idToken",!0),ph(ah(),hh(),"accessToken",!0)]},Da:{name:"setCustomParameters",j:[uh("customOAuthParameters")]}}),yh(Fi,"credential",Mi,[ah("verificationId"),ah("verificationCode")]),dh(Fi.prototype,{Ta:{name:"verifyPhoneNumber",j:[ah("phoneNumber"),fh()]}}),dh(Mr.prototype,{toJSON:{name:"toJSON",j:[ah(null,!0)]}}),dh(Hi.prototype,{toJSON:{name:"toJSON",j:[ah(null,!0)]}}),dh(Ki.prototype,{toJSON:{name:"toJSON",j:[ah(null,!0)]}}),dh(rh.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),function(){if(void 0===r.a||!r.a.INTERNAL||!r.a.INTERNAL.registerService)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={Auth:Sc,Error:Mr};yh(t,"EmailAuthProvider",Pi,[]),yh(t,"FacebookAuthProvider",Ei,[]),yh(t,"GithubAuthProvider",Si,[]),yh(t,"GoogleAuthProvider",Ii,[]),yh(t,"TwitterAuthProvider",Oi,[]),yh(t,"OAuthProvider",wi,[ah("providerId")]),yh(t,"PhoneAuthProvider",Fi,[{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(t){return!!(t&&t instanceof Sc)}}]),yh(t,"RecaptchaVerifier",rh,[ph(ah(),{name:"",K:"an HTML element",optional:!1,M:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),uh("recaptchaParameters",!0),{name:"app",K:"an instance of Firebase App",optional:!0,M:function(t){return!!(t&&t instanceof r.a.app.App)}}]),r.a.INTERNAL.registerService("auth",function(t,e){return e({INTERNAL:{getUid:g((t=new Sc(t)).getUid,t),getToken:g(t.bc,t),addAuthTokenListener:g(t.Ub,t),removeAuthTokenListener:g(t.Bc,t)}}),t},t,function(t,e){if("create"===t)try{e.auth()}catch(t){}}),r.a.INTERNAL.extendNamespace({User:Wu})}()}).call(void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(3))},function(t,e,n){"use strict";n.r(e);n(14)},function(t,e,n){"use strict";(function(r){Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=n(15),a=n(0),s=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(n(1)),u=function(){function t(t){this.domStorage_=t,this.prefix_="firebase:"}return t.prototype.set=function(t,e){null==e?this.domStorage_.removeItem(this.prefixedName_(t)):this.domStorage_.setItem(this.prefixedName_(t),i.stringify(e))},t.prototype.get=function(t){var e=this.domStorage_.getItem(this.prefixedName_(t));return null==e?null:i.jsonEval(e)},t.prototype.remove=function(t){this.domStorage_.removeItem(this.prefixedName_(t))},t.prototype.prefixedName_=function(t){return this.prefix_+t},t.prototype.toString=function(){return this.domStorage_.toString()},t}(),c=function(){function t(){this.cache_={},this.isInMemoryStorage=!0}return t.prototype.set=function(t,e){null==e?delete this.cache_[t]:this.cache_[t]=e},t.prototype.get=function(t){return i.contains(this.cache_,t)?this.cache_[t]:null},t.prototype.remove=function(t){delete this.cache_[t]},t}(),h=function(t){try{if("undefined"!=typeof window&&void 0!==window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new u(e)}}catch(t){}return new c},l=h("localStorage"),f=h("sessionStorage"),p=new o.Logger("@firebase/database"),d=function(){var t=1;return function(){return t++}}(),v=function(t){var e=i.stringToByteArray(t),n=new i.Sha1;n.update(e);var r=n.digest();return i.base64.encodeByteArray(r)},y=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n="",r=0;r<t.length;r++)Array.isArray(t[r])||t[r]&&"object"==typeof t[r]&&"number"==typeof t[r].length?n+=y.apply(null,t[r]):"object"==typeof t[r]?n+=i.stringify(t[r]):n+=t[r],n+=" ";return n},g=null,_=!0,m=function(t,e){i.assert(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?(p.logLevel=o.LogLevel.VERBOSE,g=p.log.bind(p),e&&f.set("logging_enabled",!0)):"function"==typeof t?g=t:(g=null,f.remove("logging_enabled"))},b=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(!0===_&&(_=!1,null===g&&!0===f.get("logging_enabled")&&m(!0)),g){var n=y.apply(null,t);g(n)}},w=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];b.apply(void 0,[t].concat(e))}},E=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE INTERNAL ERROR: "+y.apply(void 0,t);p.error(n)},T=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE FATAL ERROR: "+y.apply(void 0,t);throw p.error(n),new Error(n)},S=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE WARNING: "+y.apply(void 0,t);p.warn(n)},C=function(t){return"number"==typeof t&&(t!=t||t==Number.POSITIVE_INFINITY||t==Number.NEGATIVE_INFINITY)},I="[MIN_NAME]",N="[MAX_NAME]",O=function(t,e){if(t===e)return 0;if(t===I||e===N)return-1;if(e===I||t===N)return 1;var n=F(t),r=F(e);return null!==n?null!==r?n-r==0?t.length-e.length:n-r:-1:null!==r?1:t<e?-1:1},A=function(t,e){return t===e?0:t<e?-1:1},k=function(t,e){if(e&&t in e)return e[t];throw new Error("Missing required key ("+t+") in object: "+i.stringify(e))},P=function(t){if("object"!=typeof t||null===t)return i.stringify(t);var e=[];for(var n in t)e.push(n);e.sort();for(var r="{",o=0;o<e.length;o++)0!==o&&(r+=","),r+=i.stringify(e[o]),r+=":",r+=P(t[e[o]]);return r+="}"},D=function(t,e){var n=t.length;if(n<=e)return[t];for(var r=[],i=0;i<n;i+=e)i+e>n?r.push(t.substring(i,n)):r.push(t.substring(i,i+e));return r},R=function(t,e){if(Array.isArray(t))for(var n=0;n<t.length;++n)e(n,t[n]);else i.forEach(t,function(t,n){return e(n,t)})},L=function(t){i.assert(!C(t),"Invalid JSON number");var e,n,r,o,a,s,u;for(0===t?(n=0,r=0,e=1/t==-1/0?1:0):(e=t<0,(t=Math.abs(t))>=Math.pow(2,-1022)?(n=(o=Math.min(Math.floor(Math.log(t)/Math.LN2),1023))+1023,r=Math.round(t*Math.pow(2,52-o)-Math.pow(2,52))):(n=0,r=Math.round(t/Math.pow(2,-1074)))),s=[],a=52;a;a-=1)s.push(r%2?1:0),r=Math.floor(r/2);for(a=11;a;a-=1)s.push(n%2?1:0),n=Math.floor(n/2);s.push(e?1:0),s.reverse(),u=s.join("");var c="";for(a=0;a<64;a+=8){var h=parseInt(u.substr(a,8),2).toString(16);1===h.length&&(h="0"+h),c+=h}return c.toLowerCase()},x=new RegExp("^-?\\d{1,10}$"),F=function(t){if(x.test(t)){var e=Number(t);if(e>=-2147483648&&e<=2147483647)return e}return null},M=function(t){try{t()}catch(t){setTimeout(function(){var e=t.stack||"";throw S("Exception was thrown by user callback.",e),t},Math.floor(0))}},j=function(){return("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0},U=function(t,e){var n=setTimeout(t,e);return"object"==typeof n&&n.unref&&n.unref(),n},W=function(){function t(t,e){if(void 0===e){this.pieces_=t.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=t,this.pieceNum_=e}return Object.defineProperty(t,"Empty",{get:function(){return new t("")},enumerable:!0,configurable:!0}),t.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},t.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},t.prototype.popFront=function(){var e=this.pieceNum_;return e<this.pieces_.length&&e++,new t(this.pieces_,e)},t.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},t.prototype.toString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+this.pieces_[e]);return t||"/"},t.prototype.toUrlEncodedString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+encodeURIComponent(String(this.pieces_[e])));return t||"/"},t.prototype.slice=function(t){return void 0===t&&(t=0),this.pieces_.slice(this.pieceNum_+t)},t.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var e=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)e.push(this.pieces_[n]);return new t(e,0)},t.prototype.child=function(e){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(e instanceof t)for(r=e.pieceNum_;r<e.pieces_.length;r++)n.push(e.pieces_[r]);else{var i=e.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new t(n,0)},t.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},t.relativePath=function(e,n){var r=e.getFront(),i=n.getFront();if(null===r)return n;if(r===i)return t.relativePath(e.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+e+")")},t.comparePaths=function(t,e){for(var n=t.slice(),r=e.slice(),i=0;i<n.length&&i<r.length;i++){var o=O(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1},t.prototype.equals=function(t){if(this.getLength()!==t.getLength())return!1;for(var e=this.pieceNum_,n=t.pieceNum_;e<=this.pieces_.length;e++,n++)if(this.pieces_[e]!==t.pieces_[n])return!1;return!0},t.prototype.contains=function(t){var e=this.pieceNum_,n=t.pieceNum_;if(this.getLength()>t.getLength())return!1;for(;e<this.pieces_.length;){if(this.pieces_[e]!==t.pieces_[n])return!1;++e,++n}return!0},t}(),V=function(){function t(t,e){this.errorPrefix_=e,this.parts_=t.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=i.stringLength(this.parts_[n]);this.checkValid_()}return Object.defineProperty(t,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!0,configurable:!0}),Object.defineProperty(t,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!0,configurable:!0}),t.prototype.push=function(t){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(t),this.byteLength_+=i.stringLength(t),this.checkValid_()},t.prototype.pop=function(){var t=this.parts_.pop();this.byteLength_-=i.stringLength(t),this.parts_.length>0&&(this.byteLength_-=1)},t.prototype.checkValid_=function(){if(this.byteLength_>t.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+t.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>t.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+t.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},t.prototype.toErrorString=function(){return 0==this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},t}(),B="long_polling",q=function(){function t(t,e,n,r,i){void 0===i&&(i=""),this.secure=e,this.namespace=n,this.webSocketOnly=r,this.persistenceKey=i,this.host=t.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=l.get("host:"+t)||this.host}return t.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()},t.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},t.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},t.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},t.prototype.updateHost=function(t){t!==this.internalHost&&(this.internalHost=t,this.isCacheableHost()&&l.set("host:"+this.host,this.internalHost))},t.prototype.connectionURL=function(t,e){var n;if(i.assert("string"==typeof t,"typeof type must == string"),i.assert("object"==typeof e,"typeof params must == object"),"websocket"===t)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if(t!==B)throw new Error("Unknown connection type: "+t);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(e.ns=this.namespace);var r=[];return i.forEach(e,function(t,e){r.push(t+"="+e)}),n+r.join("&")},t.prototype.toString=function(){var t=this.toURLString();return this.persistenceKey&&(t+="<"+this.persistenceKey+">"),t},t.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},t}();var K,H,Q=function(t){var e=G(t),n=e.subdomain;"firebase"===e.domain&&T(e.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!=n||"localhost"===e.domain||T("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),e.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&S("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var r="ws"===e.scheme||"wss"===e.scheme;return{repoInfo:new q(e.host,e.secure,n,r),path:new W(e.pathString)}},G=function(t){var e="",n="",r="",i="",o=!0,a="https",s=443;if("string"==typeof t){var u=t.indexOf("//");u>=0&&(a=t.substring(0,u-1),t=t.substring(u+2));var c=t.indexOf("/");-1===c&&(c=t.length);var h=t.indexOf("?");-1===h&&(h=t.length),e=t.substring(0,Math.min(c,h)),c<h&&(i=function(t){for(var e="",n=t.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(t){}e+="/"+i}return e}(t.substring(c,h)));var l=function(t){var e={};"?"===t.charAt(0)&&(t=t.substring(1));for(var n=0,r=t.split("&");n<r.length;n++){var i=r[n];if(0!==i.length){var o=i.split("=");2===o.length?e[decodeURIComponent(o[0])]=decodeURIComponent(o[1]):S("Invalid query segment '"+i+"' in query '"+t+"'")}}return e}(t.substring(Math.min(t.length,h)));(u=e.indexOf(":"))>=0?(o="https"===a||"wss"===a,s=parseInt(e.substring(u+1),10)):u=t.length;var f=e.split(".");3===f.length?(n=f[1],r=f[0].toLowerCase()):2===f.length?n=f[0]:"localhost"===f[0].slice(0,u).toLowerCase()&&(n="localhost"),""===r&&"ns"in l&&(r=l.ns)}return{host:e,port:s,domain:n,subdomain:r,secure:o,scheme:a,pathString:i}},Y=/[\[\].#$\/\u0000-\u001F\u007F]/,z=/[\[\].#$\u0000-\u001F\u007F]/,X=function(t){return"string"==typeof t&&0!==t.length&&!Y.test(t)},J=function(t){return"string"==typeof t&&0!==t.length&&!z.test(t)},$=function(t){return null===t||"string"==typeof t||"number"==typeof t&&!C(t)||t&&"object"==typeof t&&i.contains(t,".sv")},Z=function(t,e,n,r,o){o&&void 0===n||tt(i.errorPrefix(t,e,o),n,r)},tt=function(t,e,n){var r=n instanceof W?new V(n,t):n;if(void 0===e)throw new Error(t+"contains undefined "+r.toErrorString());if("function"==typeof e)throw new Error(t+"contains a function "+r.toErrorString()+" with contents = "+e.toString());if(C(e))throw new Error(t+"contains "+e.toString()+" "+r.toErrorString());if("string"==typeof e&&e.length>10485760/3&&i.stringLength(e)>10485760)throw new Error(t+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+e.substring(0,50)+"...')");if(e&&"object"==typeof e){var o=!1,a=!1;if(i.forEach(e,function(e,n){if(".value"===e)o=!0;else if(".priority"!==e&&".sv"!==e&&(a=!0,!X(e)))throw new Error(t+" contains an invalid key ("+e+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(e),tt(t,n,r),r.pop()}),o&&a)throw new Error(t+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},et=function(t,e,n,r,o){if(!o||void 0!==n){var a=i.errorPrefix(t,e,o);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(a+" must be an object containing the children to replace.");var s=[];i.forEach(n,function(t,e){var n=new W(t);if(tt(a,e,r.child(n)),".priority"===n.getBack()&&!$(e))throw new Error(a+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");s.push(n)}),function(t,e){var n,r;for(n=0;n<e.length;n++)for(var i=(r=e[n]).slice(),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!X(i[o]))throw new Error(t+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');e.sort(W.comparePaths);var a=null;for(n=0;n<e.length;n++){if(r=e[n],null!==a&&a.contains(r))throw new Error(t+"contains a path "+a.toString()+" that is ancestor of another path "+r.toString());a=r}}(a,s)}},nt=function(t,e,n,r){if(!r||void 0!==n){if(C(n))throw new Error(i.errorPrefix(t,e,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!$(n))throw new Error(i.errorPrefix(t,e,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},rt=function(t,e,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(i.errorPrefix(t,e,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},it=function(t,e,n,r){if(!(r&&void 0===n||X(n)))throw new Error(i.errorPrefix(t,e,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},ot=function(t,e,n,r){if(!(r&&void 0===n||J(n)))throw new Error(i.errorPrefix(t,e,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},at=function(t,e){if(".info"===e.getFront())throw new Error(t+" failed = Can't modify data under /.info/")},st=function(t,e,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!X(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(t){return t&&(t=t.replace(/^\/*\.info(\/|$)/,"/")),J(t)}(r))throw new Error(i.errorPrefix(t,e,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},ut=function(){function t(t,e){this.repo_=t,this.path_=e}return t.prototype.cancel=function(t){i.validateArgCount("OnDisconnect.cancel",0,1,arguments.length),i.validateCallback("OnDisconnect.cancel",1,t,!0);var e=new i.Deferred;return this.repo_.onDisconnectCancel(this.path_,e.wrapCallback(t)),e.promise},t.prototype.remove=function(t){i.validateArgCount("OnDisconnect.remove",0,1,arguments.length),at("OnDisconnect.remove",this.path_),i.validateCallback("OnDisconnect.remove",1,t,!0);var e=new i.Deferred;return this.repo_.onDisconnectSet(this.path_,null,e.wrapCallback(t)),e.promise},t.prototype.set=function(t,e){i.validateArgCount("OnDisconnect.set",1,2,arguments.length),at("OnDisconnect.set",this.path_),Z("OnDisconnect.set",1,t,this.path_,!1),i.validateCallback("OnDisconnect.set",2,e,!0);var n=new i.Deferred;return this.repo_.onDisconnectSet(this.path_,t,n.wrapCallback(e)),n.promise},t.prototype.setWithPriority=function(t,e,n){i.validateArgCount("OnDisconnect.setWithPriority",2,3,arguments.length),at("OnDisconnect.setWithPriority",this.path_),Z("OnDisconnect.setWithPriority",1,t,this.path_,!1),nt("OnDisconnect.setWithPriority",2,e,!1),i.validateCallback("OnDisconnect.setWithPriority",3,n,!0);var r=new i.Deferred;return this.repo_.onDisconnectSetWithPriority(this.path_,t,e,r.wrapCallback(n)),r.promise},t.prototype.update=function(t,e){if(i.validateArgCount("OnDisconnect.update",1,2,arguments.length),at("OnDisconnect.update",this.path_),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,S("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}et("OnDisconnect.update",1,t,this.path_,!1),i.validateCallback("OnDisconnect.update",2,e,!0);var o=new i.Deferred;return this.repo_.onDisconnectUpdate(this.path_,t,o.wrapCallback(e)),o.promise},t}(),ct=function(){function t(t,e){this.committed=t,this.snapshot=e}return t.prototype.toJSON=function(){return i.validateArgCount("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},t}(),ht=function(){var t="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",e=0,n=[];return function(r){var o,a=r===e;e=r;var s=new Array(8);for(o=7;o>=0;o--)s[o]=t.charAt(r%64),r=Math.floor(r/64);i.assert(0===r,"Cannot push at time == 0");var u=s.join("");if(a){for(o=11;o>=0&&63===n[o];o--)n[o]=0;n[o]++}else for(o=0;o<12;o++)n[o]=Math.floor(64*Math.random());for(o=0;o<12;o++)u+=t.charAt(n[o]);return i.assert(20===u.length,"nextPushId: Length should be 20."),u}}(),lt=function(){function t(t,e){this.name=t,this.node=e}return t.Wrap=function(e,n){return new t(e,n)},t}(),ft=function(){function t(){}return t.prototype.getCompare=function(){return this.compare.bind(this)},t.prototype.indexedValueChanged=function(t,e){var n=new lt(I,t),r=new lt(I,e);return 0!==this.compare(n,r)},t.prototype.minPost=function(){return lt.MIN},t}(),pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.__extends(e,t),Object.defineProperty(e,"__EMPTY_NODE",{get:function(){return K},set:function(t){K=t},enumerable:!0,configurable:!0}),e.prototype.compare=function(t,e){return O(t.name,e.name)},e.prototype.isDefinedOn=function(t){throw i.assertionError("KeyIndex.isDefinedOn not expected to be called.")},e.prototype.indexedValueChanged=function(t,e){return!1},e.prototype.minPost=function(){return lt.MIN},e.prototype.maxPost=function(){return new lt(N,K)},e.prototype.makePost=function(t,e){return i.assert("string"==typeof t,"KeyIndex indexValue must always be a string."),new lt(t,K)},e.prototype.toString=function(){return".key"},e}(ft),dt=new pt;var vt,yt,gt,_t=function(t){return"number"==typeof t?"number:"+L(t):"string:"+t},mt=function(t){if(t.isLeafNode()){var e=t.val();i.assert("string"==typeof e||"number"==typeof e||"object"==typeof e&&i.contains(e,".sv"),"Priority must be a string or number.")}else i.assert(t===H||t.isEmpty(),"priority of unexpected type.");i.assert(t===H||t.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},bt=function(){function t(e,n){void 0===n&&(n=t.__childrenNodeConstructor.EMPTY_NODE),this.value_=e,this.priorityNode_=n,this.lazyHash_=null,i.assert(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),mt(this.priorityNode_)}return Object.defineProperty(t,"__childrenNodeConstructor",{get:function(){return vt},set:function(t){vt=t},enumerable:!0,configurable:!0}),t.prototype.isLeafNode=function(){return!0},t.prototype.getPriority=function(){return this.priorityNode_},t.prototype.updatePriority=function(e){return new t(this.value_,e)},t.prototype.getImmediateChild=function(e){return".priority"===e?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.getChild=function(e){return e.isEmpty()?this:".priority"===e.getFront()?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.hasChild=function(){return!1},t.prototype.getPredecessorChildName=function(t,e){return null},t.prototype.updateImmediateChild=function(e,n){return".priority"===e?this.updatePriority(n):n.isEmpty()&&".priority"!==e?this:t.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,n).updatePriority(this.priorityNode_)},t.prototype.updateChild=function(e,n){var r=e.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:(i.assert(".priority"!==r||1===e.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,t.__childrenNodeConstructor.EMPTY_NODE.updateChild(e.popFront(),n)))},t.prototype.isEmpty=function(){return!1},t.prototype.numChildren=function(){return 0},t.prototype.forEachChild=function(t,e){return!1},t.prototype.val=function(t){return t&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.priorityNode_.isEmpty()||(t+="priority:"+_t(this.priorityNode_.val())+":");var e=typeof this.value_;t+=e+":",t+="number"===e?L(this.value_):this.value_,this.lazyHash_=v(t)}return this.lazyHash_},t.prototype.getValue=function(){return this.value_},t.prototype.compareTo=function(e){return e===t.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof t.__childrenNodeConstructor?-1:(i.assert(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))},t.prototype.compareToLeafNode_=function(e){var n=typeof e.value_,r=typeof this.value_,o=t.VALUE_TYPE_ORDER.indexOf(n),a=t.VALUE_TYPE_ORDER.indexOf(r);return i.assert(o>=0,"Unknown leaf type: "+n),i.assert(a>=0,"Unknown leaf type: "+r),o===a?"object"===r?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:a-o},t.prototype.withIndex=function(){return this},t.prototype.isIndexed=function(){return!0},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode()){var e=t;return this.value_===e.value_&&this.priorityNode_.equals(e.priorityNode_)}return!1},t.VALUE_TYPE_ORDER=["object","boolean","number","string"],t}();var wt,Et,Tt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.__extends(e,t),e.prototype.compare=function(t,e){var n=t.node.getPriority(),r=e.node.getPriority(),i=n.compareTo(r);return 0===i?O(t.name,e.name):i},e.prototype.isDefinedOn=function(t){return!t.getPriority().isEmpty()},e.prototype.indexedValueChanged=function(t,e){return!t.getPriority().equals(e.getPriority())},e.prototype.minPost=function(){return lt.MIN},e.prototype.maxPost=function(){return new lt(N,new bt("[PRIORITY-POST]",gt))},e.prototype.makePost=function(t,e){var n=yt(t);return new lt(e,new bt("[PRIORITY-POST]",n))},e.prototype.toString=function(){return".priority"},e}(ft)),St=function(){function t(t,e,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!t.isEmpty();)if(t=t,o=e?n(t.key,e):1,r&&(o*=-1),o<0)t=this.isReverse_?t.left:t.right;else{if(0===o){this.nodeStack_.push(t);break}this.nodeStack_.push(t),t=this.isReverse_?t.right:t.left}}return t.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var t,e=this.nodeStack_.pop();if(t=this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value},this.isReverse_)for(e=e.left;!e.isEmpty();)this.nodeStack_.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack_.push(e),e=e.left;return t},t.prototype.hasNext=function(){return this.nodeStack_.length>0},t.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var t=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value}},t}(),Ct=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:Nt.EMPTY_NODE,this.right=null!=o?o:Nt.EMPTY_NODE}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.count=function(){return this.left.count()+1+this.right.count()},t.prototype.isEmpty=function(){return!1},t.prototype.inorderTraversal=function(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)},t.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},t.prototype.minKey=function(){return this.min_().key},t.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},t.prototype.insert=function(t,e,n){var r,i;return(i=(r=n(t,(i=this).key))<0?i.copy(null,null,null,i.left.insert(t,e,n),null):0===r?i.copy(null,e,null,null,null):i.copy(null,null,null,null,i.right.insert(t,e,n))).fixUp_()},t.prototype.removeMin_=function(){if(this.left.isEmpty())return Nt.EMPTY_NODE;var t=this;return t.left.isRed_()||t.left.left.isRed_()||(t=t.moveRedLeft_()),(t=t.copy(null,null,null,t.left.removeMin_(),null)).fixUp_()},t.prototype.remove=function(t,e){var n,r;if(e(t,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(t,e),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===e(t,n.key)){if(n.right.isEmpty())return Nt.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(t,e))}return n.fixUp_()},t.prototype.isRed_=function(){return this.color},t.prototype.fixUp_=function(){var t=this;return t.right.isRed_()&&!t.left.isRed_()&&(t=t.rotateLeft_()),t.left.isRed_()&&t.left.left.isRed_()&&(t=t.rotateRight_()),t.left.isRed_()&&t.right.isRed_()&&(t=t.colorFlip_()),t},t.prototype.moveRedLeft_=function(){var t=this.colorFlip_();return t.right.left.isRed_()&&(t=(t=(t=t.copy(null,null,null,null,t.right.rotateRight_())).rotateLeft_()).colorFlip_()),t},t.prototype.moveRedRight_=function(){var t=this.colorFlip_();return t.left.left.isRed_()&&(t=(t=t.rotateRight_()).colorFlip_()),t},t.prototype.rotateLeft_=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.rotateRight_=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.colorFlip_=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.checkMaxDepth_=function(){var t=this.check_();return Math.pow(2,t)<=this.count()+1},t.prototype.check_=function(){var t;if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");if((t=this.left.check_())!==this.right.check_())throw new Error("Black depths differ");return t+(this.isRed_()?0:1)},t.RED=!0,t.BLACK=!1,t}(),It=function(){function t(){}return t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.insert=function(t,e,n){return new Ct(t,e,null)},t.prototype.remove=function(t,e){return this},t.prototype.count=function(){return 0},t.prototype.isEmpty=function(){return!0},t.prototype.inorderTraversal=function(t){return!1},t.prototype.reverseTraversal=function(t){return!1},t.prototype.minKey=function(){return null},t.prototype.maxKey=function(){return null},t.prototype.check_=function(){return 0},t.prototype.isRed_=function(){return!1},t}(),Nt=function(){function t(e,n){void 0===n&&(n=t.EMPTY_NODE),this.comparator_=e,this.root_=n}return t.prototype.insert=function(e,n){return new t(this.comparator_,this.root_.insert(e,n,this.comparator_).copy(null,null,Ct.BLACK,null,null))},t.prototype.remove=function(e){return new t(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,Ct.BLACK,null,null))},t.prototype.get=function(t){for(var e,n=this.root_;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key)))return n.value;e<0?n=n.left:e>0&&(n=n.right)}return null},t.prototype.getPredecessorKey=function(t){for(var e,n=this.root_,r=null;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}e<0?n=n.left:e>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},t.prototype.isEmpty=function(){return this.root_.isEmpty()},t.prototype.count=function(){return this.root_.count()},t.prototype.minKey=function(){return this.root_.minKey()},t.prototype.maxKey=function(){return this.root_.maxKey()},t.prototype.inorderTraversal=function(t){return this.root_.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.root_.reverseTraversal(t)},t.prototype.getIterator=function(t){return new St(this.root_,null,this.comparator_,!1,t)},t.prototype.getIteratorFrom=function(t,e){return new St(this.root_,t,this.comparator_,!1,e)},t.prototype.getReverseIteratorFrom=function(t,e){return new St(this.root_,t,this.comparator_,!0,e)},t.prototype.getReverseIterator=function(t){return new St(this.root_,null,this.comparator_,!0,t)},t.EMPTY_NODE=new It,t}(),Ot=Math.log(2),At=function(){function t(t){this.count=function(t){return parseInt(Math.log(t)/Ot,10)}(t+1),this.current_=this.count-1;var e=function(t){return parseInt(Array(t+1).join("1"),2)}(this.count);this.bits_=t+1&e}return t.prototype.nextBitIsOne=function(){var t=!(this.bits_&1<<this.current_);return this.current_--,t},t}(),kt=function(t,e,n,r){t.sort(e);var i=function(e,r){var o,a,s=r-e;if(0==s)return null;if(1==s)return o=t[e],a=n?n(o):o,new Ct(a,o.node,Ct.BLACK,null,null);var u=parseInt(s/2,10)+e,c=i(e,u),h=i(u+1,r);return o=t[u],a=n?n(o):o,new Ct(a,o.node,Ct.BLACK,c,h)},o=function(e){for(var r=null,o=null,a=t.length,s=function(e,r){var o=a-e,s=a;a-=e;var c=i(o+1,s),h=t[o],l=n?n(h):h;u(new Ct(l,h.node,r,null,c))},u=function(t){r?(r.left=t,r=t):(o=t,r=t)},c=0;c<e.count;++c){var h=e.nextBitIsOne(),l=Math.pow(2,e.count-(c+1));h?s(l,Ct.BLACK):(s(l,Ct.BLACK),s(l,Ct.RED))}return o}(new At(t.length));return new Nt(r||e,o)},Pt={},Dt=function(){function t(t,e){this.indexes_=t,this.indexSet_=e}return Object.defineProperty(t,"Default",{get:function(){return i.assert(Pt&&Tt,"ChildrenNode.ts has not been loaded"),wt=wt||new t({".priority":Pt},{".priority":Tt})},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var e=i.safeGet(this.indexes_,t);if(!e)throw new Error("No index defined for "+t);return e===Pt?null:e},t.prototype.hasIndex=function(t){return i.contains(this.indexSet_,t.toString())},t.prototype.addIndex=function(e,n){i.assert(e!==dt,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,o=[],a=!1,s=n.getIterator(lt.Wrap),u=s.getNext();u;)a=a||e.isDefinedOn(u.node),o.push(u),u=s.getNext();r=a?kt(o,e.getCompare()):Pt;var c=e.toString(),h=i.clone(this.indexSet_);h[c]=e;var l=i.clone(this.indexes_);return l[c]=r,new t(l,h)},t.prototype.addToIndexes=function(e,n){var r=this;return new t(i.map(this.indexes_,function(t,o){var a=i.safeGet(r.indexSet_,o);if(i.assert(a,"Missing index implementation for "+o),t===Pt){if(a.isDefinedOn(e.node)){for(var s=[],u=n.getIterator(lt.Wrap),c=u.getNext();c;)c.name!=e.name&&s.push(c),c=u.getNext();return s.push(e),kt(s,a.getCompare())}return Pt}var h=n.get(e.name),l=t;return h&&(l=l.remove(new lt(e.name,h))),l.insert(e,e.node)}),this.indexSet_)},t.prototype.removeFromIndexes=function(e,n){return new t(i.map(this.indexes_,function(t){if(t===Pt)return t;var r=n.get(e.name);return r?t.remove(new lt(e.name,r)):t}),this.indexSet_)},t}();function Rt(t,e){return O(t.name,e.name)}function Lt(t,e){return O(t,e)}var xt=function(){function t(t,e,n){this.children_=t,this.priorityNode_=e,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&mt(this.priorityNode_),this.children_.isEmpty()&&i.assert(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(t,"EMPTY_NODE",{get:function(){return Et||(Et=new t(new Nt(Lt),null,Dt.Default))},enumerable:!0,configurable:!0}),t.prototype.isLeafNode=function(){return!1},t.prototype.getPriority=function(){return this.priorityNode_||Et},t.prototype.updatePriority=function(e){return this.children_.isEmpty()?this:new t(this.children_,e,this.indexMap_)},t.prototype.getImmediateChild=function(t){if(".priority"===t)return this.getPriority();var e=this.children_.get(t);return null===e?Et:e},t.prototype.getChild=function(t){var e=t.getFront();return null===e?this:this.getImmediateChild(e).getChild(t.popFront())},t.prototype.hasChild=function(t){return null!==this.children_.get(t)},t.prototype.updateImmediateChild=function(e,n){if(i.assert(n,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(n);var r=new lt(e,n),o=void 0,a=void 0;return n.isEmpty()?(o=this.children_.remove(e),a=this.indexMap_.removeFromIndexes(r,this.children_)):(o=this.children_.insert(e,n),a=this.indexMap_.addToIndexes(r,this.children_)),new t(o,o.isEmpty()?Et:this.priorityNode_,a)},t.prototype.updateChild=function(t,e){var n=t.getFront();if(null===n)return e;i.assert(".priority"!==t.getFront()||1===t.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(t.popFront(),e);return this.updateImmediateChild(n,r)},t.prototype.isEmpty=function(){return this.children_.isEmpty()},t.prototype.numChildren=function(){return this.children_.count()},t.prototype.val=function(e){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(Tt,function(a,s){n[a]=s.val(e),r++,o&&t.INTEGER_REGEXP_.test(a)?i=Math.max(i,Number(a)):o=!1}),!e&&o&&i<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return e&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.getPriority().isEmpty()||(t+="priority:"+_t(this.getPriority().val())+":"),this.forEachChild(Tt,function(e,n){var r=n.hash();""!==r&&(t+=":"+e+":"+r)}),this.lazyHash_=""===t?"":v(t)}return this.lazyHash_},t.prototype.getPredecessorChildName=function(t,e,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new lt(t,e));return i?i.name:null}return this.children_.getPredecessorKey(t)},t.prototype.getFirstChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.minKey();return n&&n.name}return this.children_.minKey()},t.prototype.getFirstChild=function(t){var e=this.getFirstChildName(t);return e?new lt(e,this.children_.get(e)):null},t.prototype.getLastChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.maxKey();return n&&n.name}return this.children_.maxKey()},t.prototype.getLastChild=function(t){var e=this.getLastChildName(t);return e?new lt(e,this.children_.get(e)):null},t.prototype.forEachChild=function(t,e){var n=this.resolveIndex_(t);return n?n.inorderTraversal(function(t){return e(t.name,t.node)}):this.children_.inorderTraversal(e)},t.prototype.getIterator=function(t){return this.getIteratorFrom(t.minPost(),t)},t.prototype.getIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getIteratorFrom(t,function(t){return t});for(var r=this.children_.getIteratorFrom(t.name,lt.Wrap),i=r.peek();null!=i&&e.compare(i,t)<0;)r.getNext(),i=r.peek();return r},t.prototype.getReverseIterator=function(t){return this.getReverseIteratorFrom(t.maxPost(),t)},t.prototype.getReverseIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getReverseIteratorFrom(t,function(t){return t});for(var r=this.children_.getReverseIteratorFrom(t.name,lt.Wrap),i=r.peek();null!=i&&e.compare(i,t)>0;)r.getNext(),i=r.peek();return r},t.prototype.compareTo=function(t){return this.isEmpty()?t.isEmpty()?0:-1:t.isLeafNode()||t.isEmpty()?1:t===Ft?-1:0},t.prototype.withIndex=function(e){if(e===dt||this.indexMap_.hasIndex(e))return this;var n=this.indexMap_.addIndex(e,this.children_);return new t(this.children_,this.priorityNode_,n)},t.prototype.isIndexed=function(t){return t===dt||this.indexMap_.hasIndex(t)},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode())return!1;var e=t;if(this.getPriority().equals(e.getPriority())){if(this.children_.count()===e.children_.count()){for(var n=this.getIterator(Tt),r=e.getIterator(Tt),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},t.prototype.resolveIndex_=function(t){return t===dt?null:this.indexMap_.get(t.toString())},t.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,t}(),Ft=new(function(t){function e(){return t.call(this,new Nt(Lt),xt.EMPTY_NODE,Dt.Default)||this}return a.__extends(e,t),e.prototype.compareTo=function(t){return t===this?0:1},e.prototype.equals=function(t){return t===this},e.prototype.getPriority=function(){return this},e.prototype.getImmediateChild=function(t){return xt.EMPTY_NODE},e.prototype.isEmpty=function(){return!1},e}(xt));Object.defineProperties(lt,{MIN:{value:new lt(I,xt.EMPTY_NODE)},MAX:{value:new lt(N,Ft)}}),pt.__EMPTY_NODE=xt.EMPTY_NODE,bt.__childrenNodeConstructor=xt,function(t){H=t}(Ft),function(t){gt=t}(Ft);var Mt=!0;function jt(t,e){if(void 0===e&&(e=null),null===t)return xt.EMPTY_NODE;if("object"==typeof t&&".priority"in t&&(e=t[".priority"]),i.assert(null===e||"string"==typeof e||"number"==typeof e||"object"==typeof e&&".sv"in e,"Invalid priority type found: "+typeof e),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new bt(t,jt(e));if(t instanceof Array||!Mt){var n=xt.EMPTY_NODE,r=t;return i.forEach(r,function(t,e){if(i.contains(r,t)&&"."!==t.substring(0,1)){var o=jt(e);!o.isLeafNode()&&o.isEmpty()||(n=n.updateImmediateChild(t,o))}}),n.updatePriority(jt(e))}var o=[],a=!1,s=t;if(i.forEach(s,function(t,e){if("string"!=typeof t||"."!==t.substring(0,1)){var n=jt(s[t]);n.isEmpty()||(a=a||!n.getPriority().isEmpty(),o.push(new lt(t,n)))}}),0==o.length)return xt.EMPTY_NODE;var u=kt(o,Rt,function(t){return t.name},Lt);if(a){var c=kt(o,Tt.getCompare());return new xt(u,jt(e),new Dt({".priority":c},{".priority":Tt}))}return new xt(u,jt(e),Dt.Default)}!function(t){yt=t}(jt);var Ut,Wt,Vt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.__extends(e,t),e.prototype.compare=function(t,e){var n=t.node.compareTo(e.node);return 0===n?O(t.name,e.name):n},e.prototype.isDefinedOn=function(t){return!0},e.prototype.indexedValueChanged=function(t,e){return!t.equals(e)},e.prototype.minPost=function(){return lt.MIN},e.prototype.maxPost=function(){return lt.MAX},e.prototype.makePost=function(t,e){var n=jt(t);return new lt(e,n)},e.prototype.toString=function(){return".value"},e}(ft)),Bt=function(t){function e(e){var n=t.call(this)||this;return n.indexPath_=e,i.assert(!e.isEmpty()&&".priority"!==e.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return a.__extends(e,t),e.prototype.extractChild=function(t){return t.getChild(this.indexPath_)},e.prototype.isDefinedOn=function(t){return!t.getChild(this.indexPath_).isEmpty()},e.prototype.compare=function(t,e){var n=this.extractChild(t.node),r=this.extractChild(e.node),i=n.compareTo(r);return 0===i?O(t.name,e.name):i},e.prototype.makePost=function(t,e){var n=jt(t),r=xt.EMPTY_NODE.updateChild(this.indexPath_,n);return new lt(e,r)},e.prototype.maxPost=function(){var t=xt.EMPTY_NODE.updateChild(this.indexPath_,Ft);return new lt(N,t)},e.prototype.toString=function(){return this.indexPath_.slice().join("/")},e}(ft),qt=function(){function t(t,e,n){this.node_=t,this.ref_=e,this.index_=n}return t.prototype.val=function(){return i.validateArgCount("DataSnapshot.val",0,0,arguments.length),this.node_.val()},t.prototype.exportVal=function(){return i.validateArgCount("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},t.prototype.toJSON=function(){return i.validateArgCount("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},t.prototype.exists=function(){return i.validateArgCount("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},t.prototype.child=function(e){i.validateArgCount("DataSnapshot.child",0,1,arguments.length),e=String(e),ot("DataSnapshot.child",1,e,!1);var n=new W(e),r=this.ref_.child(n);return new t(this.node_.getChild(n),r,Tt)},t.prototype.hasChild=function(t){i.validateArgCount("DataSnapshot.hasChild",1,1,arguments.length),ot("DataSnapshot.hasChild",1,t,!1);var e=new W(t);return!this.node_.getChild(e).isEmpty()},t.prototype.getPriority=function(){return i.validateArgCount("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},t.prototype.forEach=function(e){var n=this;return i.validateArgCount("DataSnapshot.forEach",1,1,arguments.length),i.validateCallback("DataSnapshot.forEach",1,e,!1),!this.node_.isLeafNode()&&!!this.node_.forEachChild(this.index_,function(r,i){return e(new t(i,n.ref_.child(r),Tt))})},t.prototype.hasChildren=function(){return i.validateArgCount("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(t.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!0,configurable:!0}),t.prototype.numChildren=function(){return i.validateArgCount("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},t.prototype.getRef=function(){return i.validateArgCount("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),t}(),Kt=function(){function t(t,e,n,r){this.eventType=t,this.eventRegistration=e,this.snapshot=n,this.prevName=r}return t.prototype.getPath=function(){var t=this.snapshot.getRef();return"value"===this.eventType?t.path:t.getParent().path},t.prototype.getEventType=function(){return this.eventType},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+i.stringify(this.snapshot.exportVal())},t}(),Ht=function(){function t(t,e,n){this.eventRegistration=t,this.error=e,this.path=n}return t.prototype.getPath=function(){return this.path},t.prototype.getEventType=function(){return"cancel"},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.path.toString()+":cancel"},t}(),Qt=function(){function t(t,e,n){this.callback_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){return"value"===t},t.prototype.createEvent=function(t,e){var n=e.getQueryParams().getIndex();return new Kt("value",this,new qt(t.snapshotNode,e.getRef(),n))},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){i.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callback_;return function(){r.call(e,t.snapshot)}},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Ht(this,t,e):null},t.prototype.matches=function(e){return e instanceof t&&(!e.callback_||!this.callback_||e.callback_===this.callback_&&e.context_===this.context_)},t.prototype.hasAnyCallback=function(){return null!==this.callback_},t}(),Gt=function(){function t(t,e,n){this.callbacks_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){var e="children_added"===t?"child_added":t;return e="children_removed"===e?"child_removed":e,i.contains(this.callbacks_,e)},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Ht(this,t,e):null},t.prototype.createEvent=function(t,e){i.assert(null!=t.childName,"Child events should have a childName.");var n=e.getRef().child(t.childName),r=e.getQueryParams().getIndex();return new Kt(t.type,this,new qt(t.snapshotNode,n,r),t.prevName)},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){i.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callbacks_[t.eventType];return function(){r.call(e,t.snapshot,t.prevName)}},t.prototype.matches=function(e){if(e instanceof t){if(!this.callbacks_||!e.callbacks_)return!0;if(this.context_===e.context_){var n=i.getCount(e.callbacks_);if(n===i.getCount(this.callbacks_)){if(1===n){var r=i.getAnyKey(e.callbacks_),o=i.getAnyKey(this.callbacks_);return!(o!==r||e.callbacks_[r]&&this.callbacks_[o]&&e.callbacks_[r]!==this.callbacks_[o])}return i.every(this.callbacks_,function(t,n){return e.callbacks_[t]===n})}}}return!1},t.prototype.hasAnyCallback=function(){return null!==this.callbacks_},t}(),Yt=function(){function t(t,e,n,r){this.repo=t,this.path=e,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return i.assert(Ut,"Reference.ts has not been loaded"),Ut},set:function(t){Ut=t},enumerable:!0,configurable:!0}),t.validateQueryEndpoints_=function(t){var e=null,n=null;if(t.hasStart()&&(e=t.getIndexStartValue()),t.hasEnd()&&(n=t.getIndexEndValue()),t.getIndex()===dt){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",o="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(t.hasStart()){if(t.getIndexStartName()!=I)throw new Error(r);if("string"!=typeof e)throw new Error(o)}if(t.hasEnd()){if(t.getIndexEndName()!=N)throw new Error(r);if("string"!=typeof n)throw new Error(o)}}else if(t.getIndex()===Tt){if(null!=e&&!$(e)||null!=n&&!$(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(i.assert(t.getIndex()instanceof Bt||t.getIndex()===Vt,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},t.validateLimit_=function(t){if(t.hasStart()&&t.hasEnd()&&t.hasLimit()&&!t.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},t.prototype.validateNoPreviousOrderByCall_=function(t){if(!0===this.orderByCalled_)throw new Error(t+": You can't combine multiple orderBy calls.")},t.prototype.getQueryParams=function(){return this.queryParams_},t.prototype.getRef=function(){return i.validateArgCount("Query.ref",0,0,arguments.length),new t.__referenceConstructor(this.repo,this.path)},t.prototype.on=function(e,n,r,o){i.validateArgCount("Query.on",2,4,arguments.length),rt("Query.on",1,e,!1),i.validateCallback("Query.on",2,n,!1);var a=t.getCancelAndContextArgs_("Query.on",r,o);if("value"===e)this.onValueEvent(n,a.cancel,a.context);else{var s={};s[e]=n,this.onChildEvent(s,a.cancel,a.context)}return n},t.prototype.onValueEvent=function(t,e,n){var r=new Qt(t,e||null,n||null);this.repo.addEventCallbackForQuery(this,r)},t.prototype.onChildEvent=function(t,e,n){var r=new Gt(t,e,n);this.repo.addEventCallbackForQuery(this,r)},t.prototype.off=function(t,e,n){i.validateArgCount("Query.off",0,3,arguments.length),rt("Query.off",1,t,!0),i.validateCallback("Query.off",2,e,!0),i.validateContextObject("Query.off",3,n,!0);var r=null,o=null;"value"===t?r=new Qt(e||null,null,n||null):t&&(e&&((o={})[t]=e),r=new Gt(o,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},t.prototype.once=function(e,n,r,o){var a=this;i.validateArgCount("Query.once",1,4,arguments.length),rt("Query.once",1,e,!1),i.validateCallback("Query.once",2,n,!0);var s=t.getCancelAndContextArgs_("Query.once",r,o),u=!0,c=new i.Deferred;c.promise.catch(function(){});var h=function(t){u&&(u=!1,a.off(e,h),n&&n.bind(s.context)(t),c.resolve(t))};return this.on(e,h,function(t){a.off(e,h),s.cancel&&s.cancel.bind(s.context)(t),c.reject(t)}),c.promise},t.prototype.limitToFirst=function(e){if(i.validateArgCount("Query.limitToFirst",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToFirst(e),this.orderByCalled_)},t.prototype.limitToLast=function(e){if(i.validateArgCount("Query.limitToLast",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToLast(e),this.orderByCalled_)},t.prototype.orderByChild=function(e){if(i.validateArgCount("Query.orderByChild",1,1,arguments.length),"$key"===e)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===e)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===e)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ot("Query.orderByChild",1,e,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new W(e);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new Bt(n),o=this.queryParams_.orderBy(r);return t.validateQueryEndpoints_(o),new t(this.repo,this.path,o,!0)},t.prototype.orderByKey=function(){i.validateArgCount("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var e=this.queryParams_.orderBy(dt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByPriority=function(){i.validateArgCount("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var e=this.queryParams_.orderBy(Tt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByValue=function(){i.validateArgCount("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var e=this.queryParams_.orderBy(Vt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.startAt=function(e,n){void 0===e&&(e=null),i.validateArgCount("Query.startAt",0,2,arguments.length),Z("Query.startAt",1,e,this.path,!0),it("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===e&&(e=null,n=null),new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.endAt=function(e,n){void 0===e&&(e=null),i.validateArgCount("Query.endAt",0,2,arguments.length),Z("Query.endAt",1,e,this.path,!0),it("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.equalTo=function(t,e){if(i.validateArgCount("Query.equalTo",1,2,arguments.length),Z("Query.equalTo",1,t,this.path,!1),it("Query.equalTo",2,e,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(t,e).endAt(t,e)},t.prototype.toString=function(){return i.validateArgCount("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},t.prototype.toJSON=function(){return i.validateArgCount("Query.toJSON",0,1,arguments.length),this.toString()},t.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},t.prototype.queryIdentifier=function(){var t=this.queryObject(),e=P(t);return"{}"===e?"default":e},t.prototype.isEqual=function(e){if(i.validateArgCount("Query.isEqual",1,1,arguments.length),!(e instanceof t)){throw new Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.")}var n=this.repo===e.repo,r=this.path.equals(e.path),o=this.queryIdentifier()===e.queryIdentifier();return n&&r&&o},t.getCancelAndContextArgs_=function(t,e,n){var r={cancel:null,context:null};if(e&&n)r.cancel=e,i.validateCallback(t,3,r.cancel,!0),r.context=n,i.validateContextObject(t,4,r.context,!0);else if(e)if("object"==typeof e&&null!==e)r.context=e;else{if("function"!=typeof e)throw new Error(i.errorPrefix(t,3,!0)+" must either be a cancel callback or a context object.");r.cancel=e}return r},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),t}(),zt=function(){function t(){this.set={}}return t.prototype.add=function(t,e){this.set[t]=null===e||e},t.prototype.contains=function(t){return i.contains(this.set,t)},t.prototype.get=function(t){return this.contains(t)?this.set[t]:void 0},t.prototype.remove=function(t){delete this.set[t]},t.prototype.clear=function(){this.set={}},t.prototype.isEmpty=function(){return i.isEmpty(this.set)},t.prototype.count=function(){return i.getCount(this.set)},t.prototype.each=function(t){i.forEach(this.set,function(e,n){return t(e,n)})},t.prototype.keys=function(){var t=[];return i.forEach(this.set,function(e){t.push(e)}),t},t}(),Xt=function(){function t(){this.value_=null,this.children_=null}return t.prototype.find=function(t){if(null!=this.value_)return this.value_.getChild(t);if(t.isEmpty()||null==this.children_)return null;var e=t.getFront();return t=t.popFront(),this.children_.contains(e)?this.children_.get(e).find(t):null},t.prototype.remember=function(e,n){if(e.isEmpty())this.value_=n,this.children_=null;else if(null!==this.value_)this.value_=this.value_.updateChild(e,n);else{null==this.children_&&(this.children_=new zt);var r=e.getFront();this.children_.contains(r)||this.children_.add(r,new t);var i=this.children_.get(r);e=e.popFront(),i.remember(e,n)}},t.prototype.forget=function(t){if(t.isEmpty())return this.value_=null,this.children_=null,!0;if(null!==this.value_){if(this.value_.isLeafNode())return!1;var e=this.value_;this.value_=null;var n=this;return e.forEachChild(Tt,function(t,e){n.remember(new W(t),e)}),this.forget(t)}if(null!==this.children_){var r=t.getFront();if(t=t.popFront(),this.children_.contains(r))this.children_.get(r).forget(t)&&this.children_.remove(r);return!!this.children_.isEmpty()&&(this.children_=null,!0)}return!0},t.prototype.forEachTree=function(t,e){null!==this.value_?e(t,this.value_):this.forEachChild(function(n,r){var i=new W(t.toString()+"/"+n);r.forEachTree(i,e)})},t.prototype.forEachChild=function(t){null!==this.children_&&this.children_.each(function(e,n){t(e,n)})},t}(),Jt=function(t,e){return t&&"object"==typeof t?(i.assert(".sv"in t,"Unexpected leaf node or priority contents"),e[t[".sv"]]):t},$t=function(t,e){var n,r=t.getPriority().val(),i=Jt(r,e);if(t.isLeafNode()){var o=t,a=Jt(o.getValue(),e);return a!==o.getValue()||i!==o.getPriority().val()?new bt(a,jt(i)):t}var s=t;return n=s,i!==s.getPriority().val()&&(n=n.updatePriority(new bt(i))),s.forEachChild(Tt,function(t,r){var i=$t(r,e);i!==r&&(n=n.updateImmediateChild(t,i))}),n};!function(t){t[t.OVERWRITE=0]="OVERWRITE",t[t.MERGE=1]="MERGE",t[t.ACK_USER_WRITE=2]="ACK_USER_WRITE",t[t.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(Wt||(Wt={}));var Zt,te,ee=function(){function t(t,e,n,r){this.fromUser=t,this.fromServer=e,this.queryId=n,this.tagged=r,i.assert(!r||e,"Tagged queries must be from server.")}return t.User=new t(!0,!1,null,!1),t.Server=new t(!1,!0,null,!1),t.forServerTaggedQuery=function(e){return new t(!1,!0,e,!0)},t}(),ne=function(){function t(t,e,n){this.path=t,this.affectedTree=e,this.revert=n,this.type=Wt.ACK_USER_WRITE,this.source=ee.User}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return i.assert(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new W(e));return new t(W.Empty,n,this.revert)}return i.assert(this.path.getFront()===e,"operationForChild called for unrelated child."),new t(this.path.popFront(),this.affectedTree,this.revert)},t}(),re=function(){return Zt||(Zt=new Nt(A)),Zt},ie=function(){function t(t,e){void 0===e&&(e=re()),this.value=t,this.children=e}return t.fromObject=function(e){var n=t.Empty;return i.forEach(e,function(t,e){n=n.set(new W(t),e)}),n},t.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},t.prototype.findRootMostMatchingPathAndValue=function(t,e){if(null!=this.value&&e(this.value))return{path:W.Empty,value:this.value};if(t.isEmpty())return null;var n=t.getFront(),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(t.popFront(),e);return null!=i?{path:new W(n).child(i.path),value:i.value}:null}return null},t.prototype.findRootMostValueAndPath=function(t){return this.findRootMostMatchingPathAndValue(t,function(){return!0})},t.prototype.subtree=function(e){if(e.isEmpty())return this;var n=e.getFront(),r=this.children.get(n);return null!==r?r.subtree(e.popFront()):t.Empty},t.prototype.set=function(e,n){if(e.isEmpty())return new t(n,this.children);var r=e.getFront(),i=(this.children.get(r)||t.Empty).set(e.popFront(),n),o=this.children.insert(r,i);return new t(this.value,o)},t.prototype.remove=function(e){if(e.isEmpty())return this.children.isEmpty()?t.Empty:new t(null,this.children);var n=e.getFront(),r=this.children.get(n);if(r){var i=r.remove(e.popFront()),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?t.Empty:new t(this.value,o)}return this},t.prototype.get=function(t){if(t.isEmpty())return this.value;var e=t.getFront(),n=this.children.get(e);return n?n.get(t.popFront()):null},t.prototype.setTree=function(e,n){if(e.isEmpty())return n;var r=e.getFront(),i=(this.children.get(r)||t.Empty).setTree(e.popFront(),n),o=void 0;return o=i.isEmpty()?this.children.remove(r):this.children.insert(r,i),new t(this.value,o)},t.prototype.fold=function(t){return this.fold_(W.Empty,t)},t.prototype.fold_=function(t,e){var n={};return this.children.inorderTraversal(function(r,i){n[r]=i.fold_(t.child(r),e)}),e(t,this.value,n)},t.prototype.findOnPath=function(t,e){return this.findOnPath_(t,W.Empty,e)},t.prototype.findOnPath_=function(t,e,n){var r=!!this.value&&n(e,this.value);if(r)return r;if(t.isEmpty())return null;var i=t.getFront(),o=this.children.get(i);return o?o.findOnPath_(t.popFront(),e.child(i),n):null},t.prototype.foreachOnPath=function(t,e){return this.foreachOnPath_(t,W.Empty,e)},t.prototype.foreachOnPath_=function(e,n,r){if(e.isEmpty())return this;this.value&&r(n,this.value);var i=e.getFront(),o=this.children.get(i);return o?o.foreachOnPath_(e.popFront(),n.child(i),r):t.Empty},t.prototype.foreach=function(t){this.foreach_(W.Empty,t)},t.prototype.foreach_=function(t,e){this.children.inorderTraversal(function(n,r){r.foreach_(t.child(n),e)}),this.value&&e(t,this.value)},t.prototype.foreachChild=function(t){this.children.inorderTraversal(function(e,n){n.value&&t(e,n.value)})},t.Empty=new t(null),t}(),oe=function(){function t(t,e){this.source=t,this.path=e,this.type=Wt.LISTEN_COMPLETE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,W.Empty):new t(this.source,this.path.popFront())},t}(),ae=function(){function t(t,e,n){this.source=t,this.path=e,this.snap=n,this.type=Wt.OVERWRITE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,W.Empty,this.snap.getImmediateChild(e)):new t(this.source,this.path.popFront(),this.snap)},t}(),se=function(){function t(t,e,n){this.source=t,this.path=e,this.children=n,this.type=Wt.MERGE}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){var n=this.children.subtree(new W(e));return n.isEmpty()?null:n.value?new ae(this.source,W.Empty,n.value):new t(this.source,W.Empty,n)}return i.assert(this.path.getFront()===e,"Can't get a merge for a child not on the path of the operation"),new t(this.source,this.path.popFront(),this.children)},t.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},t}(),ue=function(){function t(t,e,n){this.node_=t,this.fullyInitialized_=e,this.filtered_=n}return t.prototype.isFullyInitialized=function(){return this.fullyInitialized_},t.prototype.isFiltered=function(){return this.filtered_},t.prototype.isCompleteForPath=function(t){if(t.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var e=t.getFront();return this.isCompleteForChild(e)},t.prototype.isCompleteForChild=function(t){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(t)},t.prototype.getNode=function(){return this.node_},t}(),ce=function(){function t(t,e){this.eventCache_=t,this.serverCache_=e}return t.prototype.updateEventSnap=function(e,n,r){return new t(new ue(e,n,r),this.serverCache_)},t.prototype.updateServerSnap=function(e,n,r){return new t(this.eventCache_,new ue(e,n,r))},t.prototype.getEventCache=function(){return this.eventCache_},t.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},t.prototype.getServerCache=function(){return this.serverCache_},t.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},t.Empty=new t(new ue(xt.EMPTY_NODE,!1,!1),new ue(xt.EMPTY_NODE,!1,!1)),t}(),he=function(){function t(t,e,n,r,i){this.type=t,this.snapshotNode=e,this.childName=n,this.oldSnap=r,this.prevName=i}return t.valueChange=function(e){return new t(t.VALUE,e)},t.childAddedChange=function(e,n){return new t(t.CHILD_ADDED,n,e)},t.childRemovedChange=function(e,n){return new t(t.CHILD_REMOVED,n,e)},t.childChangedChange=function(e,n,r){return new t(t.CHILD_CHANGED,n,e,r)},t.childMovedChange=function(e,n){return new t(t.CHILD_MOVED,n,e)},t.CHILD_ADDED="child_added",t.CHILD_REMOVED="child_removed",t.CHILD_CHANGED="child_changed",t.CHILD_MOVED="child_moved",t.VALUE="value",t}(),le=function(){function t(t){this.index_=t}return t.prototype.updateChild=function(t,e,n,r,o,a){i.assert(t.isIndexed(this.index_),"A node must be indexed if only a child is updated");var s=t.getImmediateChild(e);return s.getChild(r).equals(n.getChild(r))&&s.isEmpty()==n.isEmpty()?t:(null!=a&&(n.isEmpty()?t.hasChild(e)?a.trackChildChange(he.childRemovedChange(e,s)):i.assert(t.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):s.isEmpty()?a.trackChildChange(he.childAddedChange(e,n)):a.trackChildChange(he.childChangedChange(e,n,s))),t.isLeafNode()&&n.isEmpty()?t:t.updateImmediateChild(e,n).withIndex(this.index_))},t.prototype.updateFullNode=function(t,e,n){return null!=n&&(t.isLeafNode()||t.forEachChild(Tt,function(t,r){e.hasChild(t)||n.trackChildChange(he.childRemovedChange(t,r))}),e.isLeafNode()||e.forEachChild(Tt,function(e,r){if(t.hasChild(e)){var i=t.getImmediateChild(e);i.equals(r)||n.trackChildChange(he.childChangedChange(e,r,i))}else n.trackChildChange(he.childAddedChange(e,r))})),e.withIndex(this.index_)},t.prototype.updatePriority=function(t,e){return t.isEmpty()?xt.EMPTY_NODE:t.updatePriority(e)},t.prototype.filtersNodes=function(){return!1},t.prototype.getIndexedFilter=function(){return this},t.prototype.getIndex=function(){return this.index_},t}(),fe=function(){function t(){this.changeMap_={}}return t.prototype.trackChildChange=function(t){var e=t.type,n=t.childName;i.assert(e==he.CHILD_ADDED||e==he.CHILD_CHANGED||e==he.CHILD_REMOVED,"Only child changes supported for tracking"),i.assert(".priority"!==n,"Only non-priority child changes can be tracked.");var r=i.safeGet(this.changeMap_,n);if(r){var o=r.type;if(e==he.CHILD_ADDED&&o==he.CHILD_REMOVED)this.changeMap_[n]=he.childChangedChange(n,t.snapshotNode,r.snapshotNode);else if(e==he.CHILD_REMOVED&&o==he.CHILD_ADDED)delete this.changeMap_[n];else if(e==he.CHILD_REMOVED&&o==he.CHILD_CHANGED)this.changeMap_[n]=he.childRemovedChange(n,r.oldSnap);else if(e==he.CHILD_CHANGED&&o==he.CHILD_ADDED)this.changeMap_[n]=he.childAddedChange(n,t.snapshotNode);else{if(e!=he.CHILD_CHANGED||o!=he.CHILD_CHANGED)throw i.assertionError("Illegal combination of changes: "+t+" occurred after "+r);this.changeMap_[n]=he.childChangedChange(n,t.snapshotNode,r.oldSnap)}}else this.changeMap_[n]=t},t.prototype.getChanges=function(){return i.getValues(this.changeMap_)},t}(),pe=new(function(){function t(){}return t.prototype.getCompleteChild=function(t){return null},t.prototype.getChildAfterChild=function(t,e,n){return null},t}()),de=function(){function t(t,e,n){void 0===n&&(n=null),this.writes_=t,this.viewCache_=e,this.optCompleteServerCache_=n}return t.prototype.getCompleteChild=function(t){var e=this.viewCache_.getEventCache();if(e.isCompleteForChild(t))return e.getNode().getImmediateChild(t);var n=null!=this.optCompleteServerCache_?new ue(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(t,n)},t.prototype.getChildAfterChild=function(t,e,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),i=this.writes_.calcIndexedSlice(r,e,1,n,t);return 0===i.length?null:i[0]},t}(),ve=function(){return function(t,e){this.viewCache=t,this.changes=e}}(),ye=function(){function t(t){this.filter_=t}return t.prototype.assertIndexed=function(t){i.assert(t.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),i.assert(t.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},t.prototype.applyOperation=function(e,n,r,o){var a,s,u=new fe;if(n.type===Wt.OVERWRITE){var c=n;c.source.fromUser?a=this.applyUserOverwrite_(e,c.path,c.snap,r,o,u):(i.assert(c.source.fromServer,"Unknown source."),s=c.source.tagged||e.getServerCache().isFiltered()&&!c.path.isEmpty(),a=this.applyServerOverwrite_(e,c.path,c.snap,r,o,s,u))}else if(n.type===Wt.MERGE){var h=n;h.source.fromUser?a=this.applyUserMerge_(e,h.path,h.children,r,o,u):(i.assert(h.source.fromServer,"Unknown source."),s=h.source.tagged||e.getServerCache().isFiltered(),a=this.applyServerMerge_(e,h.path,h.children,r,o,s,u))}else if(n.type===Wt.ACK_USER_WRITE){var l=n;a=l.revert?this.revertUserWrite_(e,l.path,r,o,u):this.ackUserWrite_(e,l.path,l.affectedTree,r,o,u)}else{if(n.type!==Wt.LISTEN_COMPLETE)throw i.assertionError("Unknown operation type: "+n.type);a=this.listenComplete_(e,n.path,r,u)}var f=u.getChanges();return t.maybeAddValueEvent_(e,a,f),new ve(a,f)},t.maybeAddValueEvent_=function(t,e,n){var r=e.getEventCache();if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=t.getCompleteEventSnap();(n.length>0||!t.getEventCache().isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(he.valueChange(e.getCompleteEventSnap()))}},t.prototype.generateEventCacheAfterServerEvent_=function(t,e,n,r,o){var a=t.getEventCache();if(null!=n.shadowingWrite(e))return t;var s=void 0,u=void 0;if(e.isEmpty())if(i.assert(t.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),t.getServerCache().isFiltered()){var c=t.getCompleteServerSnap(),h=c instanceof xt?c:xt.EMPTY_NODE,l=n.calcCompleteEventChildren(h);s=this.filter_.updateFullNode(t.getEventCache().getNode(),l,o)}else{var f=n.calcCompleteEventCache(t.getCompleteServerSnap());s=this.filter_.updateFullNode(t.getEventCache().getNode(),f,o)}else{var p=e.getFront();if(".priority"==p){i.assert(1==e.getLength(),"Can't have a priority with additional path components");var d=a.getNode();u=t.getServerCache().getNode();var v=n.calcEventCacheAfterServerOverwrite(e,d,u);s=null!=v?this.filter_.updatePriority(d,v):a.getNode()}else{var y=e.popFront(),g=void 0;if(a.isCompleteForChild(p)){u=t.getServerCache().getNode();var _=n.calcEventCacheAfterServerOverwrite(e,a.getNode(),u);g=null!=_?a.getNode().getImmediateChild(p).updateChild(y,_):a.getNode().getImmediateChild(p)}else g=n.calcCompleteChild(p,t.getServerCache());s=null!=g?this.filter_.updateChild(a.getNode(),p,g,y,r,o):a.getNode()}}return t.updateEventSnap(s,a.isFullyInitialized()||e.isEmpty(),this.filter_.filtersNodes())},t.prototype.applyServerOverwrite_=function(t,e,n,r,i,o,a){var s,u=t.getServerCache(),c=o?this.filter_:this.filter_.getIndexedFilter();if(e.isEmpty())s=c.updateFullNode(u.getNode(),n,null);else if(c.filtersNodes()&&!u.isFiltered()){var h=u.getNode().updateChild(e,n);s=c.updateFullNode(u.getNode(),h,null)}else{var l=e.getFront();if(!u.isCompleteForPath(e)&&e.getLength()>1)return t;var f=e.popFront(),p=u.getNode().getImmediateChild(l).updateChild(f,n);s=".priority"==l?c.updatePriority(u.getNode(),p):c.updateChild(u.getNode(),l,p,f,pe,null)}var d=t.updateServerSnap(s,u.isFullyInitialized()||e.isEmpty(),c.filtersNodes()),v=new de(r,d,i);return this.generateEventCacheAfterServerEvent_(d,e,r,v,a)},t.prototype.applyUserOverwrite_=function(t,e,n,r,i,o){var a,s,u=t.getEventCache(),c=new de(r,t,i);if(e.isEmpty())s=this.filter_.updateFullNode(t.getEventCache().getNode(),n,o),a=t.updateEventSnap(s,!0,this.filter_.filtersNodes());else{var h=e.getFront();if(".priority"===h)s=this.filter_.updatePriority(t.getEventCache().getNode(),n),a=t.updateEventSnap(s,u.isFullyInitialized(),u.isFiltered());else{var l=e.popFront(),f=u.getNode().getImmediateChild(h),p=void 0;if(l.isEmpty())p=n;else{var d=c.getCompleteChild(h);p=null!=d?".priority"===l.getBack()&&d.getChild(l.parent()).isEmpty()?d:d.updateChild(l,n):xt.EMPTY_NODE}if(f.equals(p))a=t;else{var v=this.filter_.updateChild(u.getNode(),h,p,l,c,o);a=t.updateEventSnap(v,u.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},t.cacheHasChild_=function(t,e){return t.getEventCache().isCompleteForChild(e)},t.prototype.applyUserMerge_=function(e,n,r,i,o,a){var s=this,u=e;return r.foreach(function(r,c){var h=n.child(r);t.cacheHasChild_(e,h.getFront())&&(u=s.applyUserOverwrite_(u,h,c,i,o,a))}),r.foreach(function(r,c){var h=n.child(r);t.cacheHasChild_(e,h.getFront())||(u=s.applyUserOverwrite_(u,h,c,i,o,a))}),u},t.prototype.applyMerge_=function(t,e){return e.foreach(function(e,n){t=t.updateChild(e,n)}),t},t.prototype.applyServerMerge_=function(t,e,n,r,i,o,a){var s=this;if(t.getServerCache().getNode().isEmpty()&&!t.getServerCache().isFullyInitialized())return t;var u,c=t;u=e.isEmpty()?n:ie.Empty.setTree(e,n);var h=t.getServerCache().getNode();return u.children.inorderTraversal(function(e,n){if(h.hasChild(e)){var u=t.getServerCache().getNode().getImmediateChild(e),l=s.applyMerge_(u,n);c=s.applyServerOverwrite_(c,new W(e),l,r,i,o,a)}}),u.children.inorderTraversal(function(e,n){var u=!t.getServerCache().isCompleteForChild(e)&&null==n.value;if(!h.hasChild(e)&&!u){var l=t.getServerCache().getNode().getImmediateChild(e),f=s.applyMerge_(l,n);c=s.applyServerOverwrite_(c,new W(e),f,r,i,o,a)}}),c},t.prototype.ackUserWrite_=function(t,e,n,r,i,o){if(null!=r.shadowingWrite(e))return t;var a=t.getServerCache().isFiltered(),s=t.getServerCache();if(null!=n.value){if(e.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(e))return this.applyServerOverwrite_(t,e,s.getNode().getChild(e),r,i,a,o);if(e.isEmpty()){var u=ie.Empty;return s.getNode().forEachChild(dt,function(t,e){u=u.set(new W(t),e)}),this.applyServerMerge_(t,e,u,r,i,a,o)}return t}var c=ie.Empty;return n.foreach(function(t,n){var r=e.child(t);s.isCompleteForPath(r)&&(c=c.set(t,s.getNode().getChild(r)))}),this.applyServerMerge_(t,e,c,r,i,a,o)},t.prototype.listenComplete_=function(t,e,n,r){var i=t.getServerCache(),o=t.updateServerSnap(i.getNode(),i.isFullyInitialized()||e.isEmpty(),i.isFiltered());return this.generateEventCacheAfterServerEvent_(o,e,n,pe,r)},t.prototype.revertUserWrite_=function(t,e,n,r,o){var a;if(null!=n.shadowingWrite(e))return t;var s=new de(n,t,r),u=t.getEventCache().getNode(),c=void 0;if(e.isEmpty()||".priority"===e.getFront()){var h=void 0;if(t.getServerCache().isFullyInitialized())h=n.calcCompleteEventCache(t.getCompleteServerSnap());else{var l=t.getServerCache().getNode();i.assert(l instanceof xt,"serverChildren would be complete if leaf node"),h=n.calcCompleteEventChildren(l)}h=h,c=this.filter_.updateFullNode(u,h,o)}else{var f=e.getFront(),p=n.calcCompleteChild(f,t.getServerCache());null==p&&t.getServerCache().isCompleteForChild(f)&&(p=u.getImmediateChild(f)),(c=null!=p?this.filter_.updateChild(u,f,p,e.popFront(),s,o):t.getEventCache().getNode().hasChild(f)?this.filter_.updateChild(u,f,xt.EMPTY_NODE,e.popFront(),s,o):u).isEmpty()&&t.getServerCache().isFullyInitialized()&&(a=n.calcCompleteEventCache(t.getCompleteServerSnap())).isLeafNode()&&(c=this.filter_.updateFullNode(c,a,o))}return a=t.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(W.Empty),t.updateEventSnap(c,a,this.filter_.filtersNodes())},t}(),ge=function(){function t(t){this.query_=t,this.index_=this.query_.getQueryParams().getIndex()}return t.prototype.generateEventsForChanges=function(t,e,n){var r=this,i=[],o=[];return t.forEach(function(t){t.type===he.CHILD_CHANGED&&r.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&o.push(he.childMovedChange(t.childName,t.snapshotNode))}),this.generateEventsForType_(i,he.CHILD_REMOVED,t,n,e),this.generateEventsForType_(i,he.CHILD_ADDED,t,n,e),this.generateEventsForType_(i,he.CHILD_MOVED,o,n,e),this.generateEventsForType_(i,he.CHILD_CHANGED,t,n,e),this.generateEventsForType_(i,he.VALUE,t,n,e),i},t.prototype.generateEventsForType_=function(t,e,n,r,i){var o=this,a=n.filter(function(t){return t.type===e});a.sort(this.compareChanges_.bind(this)),a.forEach(function(e){var n=o.materializeSingleChange_(e,i);r.forEach(function(r){r.respondsTo(e.type)&&t.push(r.createEvent(n,o.query_))})})},t.prototype.materializeSingleChange_=function(t,e){return"value"===t.type||"child_removed"===t.type?t:(t.prevName=e.getPredecessorChildName(t.childName,t.snapshotNode,this.index_),t)},t.prototype.compareChanges_=function(t,e){if(null==t.childName||null==e.childName)throw i.assertionError("Should only compare child_ events.");var n=new lt(t.childName,t.snapshotNode),r=new lt(e.childName,e.snapshotNode);return this.index_.compare(n,r)},t}(),_e=function(){function t(t,e){this.query_=t,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new le(n.getIndex()),i=n.getNodeFilter();this.processor_=new ye(i);var o=e.getServerCache(),a=e.getEventCache(),s=r.updateFullNode(xt.EMPTY_NODE,o.getNode(),null),u=i.updateFullNode(xt.EMPTY_NODE,a.getNode(),null),c=new ue(s,o.isFullyInitialized(),r.filtersNodes()),h=new ue(u,a.isFullyInitialized(),i.filtersNodes());this.viewCache_=new ce(h,c),this.eventGenerator_=new ge(this.query_)}return t.prototype.getQuery=function(){return this.query_},t.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},t.prototype.getCompleteServerCache=function(t){var e=this.viewCache_.getCompleteServerSnap();return e&&(this.query_.getQueryParams().loadsAllData()||!t.isEmpty()&&!e.getImmediateChild(t.getFront()).isEmpty())?e.getChild(t):null},t.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},t.prototype.addEventRegistration=function(t){this.eventRegistrations_.push(t)},t.prototype.removeEventRegistration=function(t,e){var n=[];if(e){i.assert(null==t,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach(function(t){e=e;var i=t.createCancelEvent(e,r);i&&n.push(i)})}if(t){for(var o=[],a=0;a<this.eventRegistrations_.length;++a){var s=this.eventRegistrations_[a];if(s.matches(t)){if(t.hasAnyCallback()){o=o.concat(this.eventRegistrations_.slice(a+1));break}}else o.push(s)}this.eventRegistrations_=o}else this.eventRegistrations_=[];return n},t.prototype.applyOperation=function(t,e,n){t.type===Wt.MERGE&&null!==t.source.queryId&&(i.assert(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),i.assert(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,o=this.processor_.applyOperation(r,t,e,n);return this.processor_.assertIndexed(o.viewCache),i.assert(o.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=o.viewCache,this.generateEventsForChanges_(o.changes,o.viewCache.getEventCache().getNode(),null)},t.prototype.getInitialEvents=function(t){var e=this.viewCache_.getEventCache(),n=[];e.getNode().isLeafNode()||e.getNode().forEachChild(Tt,function(t,e){n.push(he.childAddedChange(t,e))});return e.isFullyInitialized()&&n.push(he.valueChange(e.getNode())),this.generateEventsForChanges_(n,e.getNode(),t)},t.prototype.generateEventsForChanges_=function(t,e,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(t,e,r)},t}(),me=function(){function t(){this.views_={}}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return i.assert(te,"Reference.ts has not been loaded"),te},set:function(t){i.assert(!te,"__referenceConstructor has already been defined"),te=t},enumerable:!0,configurable:!0}),t.prototype.isEmpty=function(){return i.isEmpty(this.views_)},t.prototype.applyOperation=function(t,e,n){var r=t.source.queryId;if(null!==r){var o=i.safeGet(this.views_,r);return i.assert(null!=o,"SyncTree gave us an op for an invalid query."),o.applyOperation(t,e,n)}var a=[];return i.forEach(this.views_,function(r,i){a=a.concat(i.applyOperation(t,e,n))}),a},t.prototype.addEventRegistration=function(t,e,n,r,o){var a=t.queryIdentifier(),s=i.safeGet(this.views_,a);if(!s){var u=n.calcCompleteEventCache(o?r:null),c=!1;u?c=!0:r instanceof xt?(u=n.calcCompleteEventChildren(r),c=!1):(u=xt.EMPTY_NODE,c=!1);var h=new ce(new ue(u,c,!1),new ue(r,o,!1));s=new _e(t,h),this.views_[a]=s}return s.addEventRegistration(e),s.getInitialEvents(e)},t.prototype.removeEventRegistration=function(e,n,r){var o=e.queryIdentifier(),a=[],s=[],u=this.hasCompleteView();if("default"===o){var c=this;i.forEach(this.views_,function(t,e){s=s.concat(e.removeEventRegistration(n,r)),e.isEmpty()&&(delete c.views_[t],e.getQuery().getQueryParams().loadsAllData()||a.push(e.getQuery()))})}else{var h=i.safeGet(this.views_,o);h&&(s=s.concat(h.removeEventRegistration(n,r)),h.isEmpty()&&(delete this.views_[o],h.getQuery().getQueryParams().loadsAllData()||a.push(h.getQuery())))}return u&&!this.hasCompleteView()&&a.push(new t.__referenceConstructor(e.repo,e.path)),{removed:a,events:s}},t.prototype.getQueryViews=function(){var t=this;return Object.keys(this.views_).map(function(e){return t.views_[e]}).filter(function(t){return!t.getQuery().getQueryParams().loadsAllData()})},t.prototype.getCompleteServerCache=function(t){var e=null;return i.forEach(this.views_,function(n,r){e=e||r.getCompleteServerCache(t)}),e},t.prototype.viewForQuery=function(t){if(t.getQueryParams().loadsAllData())return this.getCompleteView();var e=t.queryIdentifier();return i.safeGet(this.views_,e)},t.prototype.viewExistsForQuery=function(t){return null!=this.viewForQuery(t)},t.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},t.prototype.getCompleteView=function(){return i.findValue(this.views_,function(t){return t.getQuery().getQueryParams().loadsAllData()})||null},t}(),be=function(){function t(t){this.writeTree_=t}return t.prototype.addWrite=function(e,n){if(e.isEmpty())return new t(new ie(n));var r=this.writeTree_.findRootMostValueAndPath(e);if(null!=r){var i=r.path,o=r.value,a=W.relativePath(i,e);return o=o.updateChild(a,n),new t(this.writeTree_.set(i,o))}var s=new ie(n);return new t(this.writeTree_.setTree(e,s))},t.prototype.addWrites=function(t,e){var n=this;return i.forEach(e,function(e,r){n=n.addWrite(t.child(e),r)}),n},t.prototype.removeWrite=function(e){return e.isEmpty()?t.Empty:new t(this.writeTree_.setTree(e,ie.Empty))},t.prototype.hasCompleteWrite=function(t){return null!=this.getCompleteNode(t)},t.prototype.getCompleteNode=function(t){var e=this.writeTree_.findRootMostValueAndPath(t);return null!=e?this.writeTree_.get(e.path).getChild(W.relativePath(e.path,t)):null},t.prototype.getCompleteChildren=function(){var t=[],e=this.writeTree_.value;return null!=e?e.isLeafNode()||e.forEachChild(Tt,function(e,n){t.push(new lt(e,n))}):this.writeTree_.children.inorderTraversal(function(e,n){null!=n.value&&t.push(new lt(e,n.value))}),t},t.prototype.childCompoundWrite=function(e){if(e.isEmpty())return this;var n=this.getCompleteNode(e);return new t(null!=n?new ie(n):this.writeTree_.subtree(e))},t.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},t.prototype.apply=function(e){return t.applySubtreeWrite_(W.Empty,this.writeTree_,e)},t.Empty=new t(new ie(null)),t.applySubtreeWrite_=function(e,n,r){if(null!=n.value)return r.updateChild(e,n.value);var o=null;return n.children.inorderTraversal(function(n,a){".priority"===n?(i.assert(null!==a.value,"Priority writes must always be leaf nodes"),o=a.value):r=t.applySubtreeWrite_(e.child(n),a,r)}),r.getChild(e).isEmpty()||null===o||(r=r.updateChild(e.child(".priority"),o)),r},t}(),we=function(){function t(){this.visibleWrites_=be.Empty,this.allWrites_=[],this.lastWriteId_=-1}return t.prototype.childWrites=function(t){return new Ee(t,this)},t.prototype.addOverwrite=function(t,e,n,r){i.assert(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:t,snap:e,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(t,e)),this.lastWriteId_=n},t.prototype.addMerge=function(t,e,n){i.assert(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:t,children:e,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(t,e),this.lastWriteId_=n},t.prototype.getWrite=function(t){for(var e=0;e<this.allWrites_.length;e++){var n=this.allWrites_[e];if(n.writeId===t)return n}return null},t.prototype.removeWrite=function(t){var e=this,n=this.allWrites_.findIndex(function(e){return e.writeId===t});i.assert(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var o=r.visible,a=!1,s=this.allWrites_.length-1;o&&s>=0;){var u=this.allWrites_[s];u.visible&&(s>=n&&this.recordContainsPath_(u,r.path)?o=!1:r.path.contains(u.path)&&(a=!0)),s--}if(o){if(a)return this.resetTree_(),!0;if(r.snap)this.visibleWrites_=this.visibleWrites_.removeWrite(r.path);else{var c=r.children;i.forEach(c,function(t){e.visibleWrites_=e.visibleWrites_.removeWrite(r.path.child(t))})}return!0}return!1},t.prototype.getCompleteWriteData=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcCompleteEventCache=function(e,n,r,i){if(r||i){var o=this.visibleWrites_.childCompoundWrite(e);if(!i&&o.isEmpty())return n;if(i||null!=n||o.hasCompleteWrite(W.Empty)){var a=t.layerTree_(this.allWrites_,function(t){return(t.visible||i)&&(!r||!~r.indexOf(t.writeId))&&(t.path.contains(e)||e.contains(t.path))},e);c=n||xt.EMPTY_NODE;return a.apply(c)}return null}var s=this.visibleWrites_.getCompleteNode(e);if(null!=s)return s;var u=this.visibleWrites_.childCompoundWrite(e);if(u.isEmpty())return n;if(null!=n||u.hasCompleteWrite(W.Empty)){var c=n||xt.EMPTY_NODE;return u.apply(c)}return null},t.prototype.calcCompleteEventChildren=function(t,e){var n=xt.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(t);if(r)return r.isLeafNode()||r.forEachChild(Tt,function(t,e){n=n.updateImmediateChild(t,e)}),n;if(e){var i=this.visibleWrites_.childCompoundWrite(t);return e.forEachChild(Tt,function(t,e){var r=i.childCompoundWrite(new W(t)).apply(e);n=n.updateImmediateChild(t,r)}),i.getCompleteChildren().forEach(function(t){n=n.updateImmediateChild(t.name,t.node)}),n}return this.visibleWrites_.childCompoundWrite(t).getCompleteChildren().forEach(function(t){n=n.updateImmediateChild(t.name,t.node)}),n},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n,r){i.assert(n||r,"Either existingEventSnap or existingServerSnap must exist");var o=t.child(e);if(this.visibleWrites_.hasCompleteWrite(o))return null;var a=this.visibleWrites_.childCompoundWrite(o);return a.isEmpty()?r.getChild(e):a.apply(r.getChild(e))},t.prototype.calcCompleteChild=function(t,e,n){var r=t.child(e),i=this.visibleWrites_.getCompleteNode(r);return null!=i?i:n.isCompleteForChild(e)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(e)):null},t.prototype.shadowingWrite=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcIndexedSlice=function(t,e,n,r,i,o){var a,s=this.visibleWrites_.childCompoundWrite(t),u=s.getCompleteNode(W.Empty);if(null!=u)a=u;else{if(null==e)return[];a=s.apply(e)}if((a=a.withIndex(o)).isEmpty()||a.isLeafNode())return[];for(var c=[],h=o.getCompare(),l=i?a.getReverseIteratorFrom(n,o):a.getIteratorFrom(n,o),f=l.getNext();f&&c.length<r;)0!==h(f,n)&&c.push(f),f=l.getNext();return c},t.prototype.recordContainsPath_=function(t,e){return t.snap?t.path.contains(e):!!i.findKey(t.children,function(n,r){return t.path.child(r).contains(e)})},t.prototype.resetTree_=function(){this.visibleWrites_=t.layerTree_(this.allWrites_,t.DefaultFilter_,W.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},t.DefaultFilter_=function(t){return t.visible},t.layerTree_=function(t,e,n){for(var r=be.Empty,o=0;o<t.length;++o){var a=t[o];if(e(a)){var s=a.path,u=void 0;if(a.snap)n.contains(s)?(u=W.relativePath(n,s),r=r.addWrite(u,a.snap)):s.contains(n)&&(u=W.relativePath(s,n),r=r.addWrite(W.Empty,a.snap.getChild(u)));else{if(!a.children)throw i.assertionError("WriteRecord should have .snap or .children");if(n.contains(s))u=W.relativePath(n,s),r=r.addWrites(u,a.children);else if(s.contains(n))if((u=W.relativePath(s,n)).isEmpty())r=r.addWrites(W.Empty,a.children);else{var c=i.safeGet(a.children,u.getFront());if(c){var h=c.getChild(u.popFront());r=r.addWrite(W.Empty,h)}}}}}return r},t}(),Ee=function(){function t(t,e){this.treePath_=t,this.writeTree_=e}return t.prototype.calcCompleteEventCache=function(t,e,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,t,e,n)},t.prototype.calcCompleteEventChildren=function(t){return this.writeTree_.calcCompleteEventChildren(this.treePath_,t)},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,t,e,n)},t.prototype.shadowingWrite=function(t){return this.writeTree_.shadowingWrite(this.treePath_.child(t))},t.prototype.calcIndexedSlice=function(t,e,n,r,i){return this.writeTree_.calcIndexedSlice(this.treePath_,t,e,n,r,i)},t.prototype.calcCompleteChild=function(t,e){return this.writeTree_.calcCompleteChild(this.treePath_,t,e)},t.prototype.child=function(e){return new t(this.treePath_.child(e),this.writeTree_)},t}(),Te=function(){function t(t){this.listenProvider_=t,this.syncPointTree_=ie.Empty,this.pendingWriteTree_=new we,this.tagToQueryMap_={},this.queryToTagMap_={}}return t.prototype.applyUserOverwrite=function(t,e,n,r){return this.pendingWriteTree_.addOverwrite(t,e,n,r),r?this.applyOperationToSyncPoints_(new ae(ee.User,t,e)):[]},t.prototype.applyUserMerge=function(t,e,n){this.pendingWriteTree_.addMerge(t,e,n);var r=ie.fromObject(e);return this.applyOperationToSyncPoints_(new se(ee.User,t,r))},t.prototype.ackUserWrite=function(t,e){void 0===e&&(e=!1);var n=this.pendingWriteTree_.getWrite(t);if(this.pendingWriteTree_.removeWrite(t)){var r=ie.Empty;return null!=n.snap?r=r.set(W.Empty,!0):i.forEach(n.children,function(t,e){r=r.set(new W(t),e)}),this.applyOperationToSyncPoints_(new ne(n.path,r,e))}return[]},t.prototype.applyServerOverwrite=function(t,e){return this.applyOperationToSyncPoints_(new ae(ee.Server,t,e))},t.prototype.applyServerMerge=function(t,e){var n=ie.fromObject(e);return this.applyOperationToSyncPoints_(new se(ee.Server,t,n))},t.prototype.applyListenComplete=function(t){return this.applyOperationToSyncPoints_(new oe(ee.Server,t))},t.prototype.applyTaggedQueryOverwrite=function(e,n,r){var i=this.queryKeyForTag_(r);if(null!=i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=W.relativePath(a,e),c=new ae(ee.forServerTaggedQuery(s),u,n);return this.applyTaggedOperation_(a,c)}return[]},t.prototype.applyTaggedQueryMerge=function(e,n,r){var i=this.queryKeyForTag_(r);if(i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=W.relativePath(a,e),c=ie.fromObject(n),h=new se(ee.forServerTaggedQuery(s),u,c);return this.applyTaggedOperation_(a,h)}return[]},t.prototype.applyTaggedListenComplete=function(e,n){var r=this.queryKeyForTag_(n);if(r){var i=t.parseQueryKey_(r),o=i.path,a=i.queryId,s=W.relativePath(o,e),u=new oe(ee.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(o,u)}return[]},t.prototype.addEventRegistration=function(e,n){var r=e.path,o=null,a=!1;this.syncPointTree_.foreachOnPath(r,function(t,e){var n=W.relativePath(t,r);o=o||e.getCompleteServerCache(n),a=a||e.hasCompleteView()});var s,u=this.syncPointTree_.get(r);(u?(a=a||u.hasCompleteView(),o=o||u.getCompleteServerCache(W.Empty)):(u=new me,this.syncPointTree_=this.syncPointTree_.set(r,u)),null!=o)?s=!0:(s=!1,o=xt.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild(function(t,e){var n=e.getCompleteServerCache(W.Empty);n&&(o=o.updateImmediateChild(t,n))}));var c=u.viewExistsForQuery(e);if(!c&&!e.getQueryParams().loadsAllData()){var h=t.makeQueryKey_(e);i.assert(!(h in this.queryToTagMap_),"View does not exist, but we have a tag");var l=t.getNextQueryTag_();this.queryToTagMap_[h]=l,this.tagToQueryMap_["_"+l]=h}var f=this.pendingWriteTree_.childWrites(r),p=u.addEventRegistration(e,n,f,o,s);if(!c&&!a){var d=u.viewForQuery(e);p=p.concat(this.setupListener_(e,d))}return p},t.prototype.removeEventRegistration=function(e,n,r){var i=this,o=e.path,a=this.syncPointTree_.get(o),s=[];if(a&&("default"===e.queryIdentifier()||a.viewExistsForQuery(e))){var u=a.removeEventRegistration(e,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(o));var c=u.removed;s=u.events;var h=-1!==c.findIndex(function(t){return t.getQueryParams().loadsAllData()}),l=this.syncPointTree_.findOnPath(o,function(t,e){return e.hasCompleteView()});if(h&&!l){var f=this.syncPointTree_.subtree(o);if(!f.isEmpty())for(var p=this.collectDistinctViewsForSubTree_(f),d=0;d<p.length;++d){var v=p[d],y=v.getQuery(),g=this.createListenerForView_(v);this.listenProvider_.startListening(t.queryForListening_(y),this.tagForQuery_(y),g.hashFn,g.onComplete)}}if(!l&&c.length>0&&!r)if(h){this.listenProvider_.stopListening(t.queryForListening_(e),null)}else c.forEach(function(e){var n=i.queryToTagMap_[t.makeQueryKey_(e)];i.listenProvider_.stopListening(t.queryForListening_(e),n)});this.removeTags_(c)}return s},t.prototype.calcCompleteEventCache=function(t,e){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(t,function(e,n){var r=W.relativePath(e,t),i=n.getCompleteServerCache(r);if(i)return i});return n.calcCompleteEventCache(t,r,e,!0)},t.prototype.collectDistinctViewsForSubTree_=function(t){return t.fold(function(t,e,n){if(e&&e.hasCompleteView())return[e.getCompleteView()];var r=[];return e&&(r=e.getQueryViews()),i.forEach(n,function(t,e){r=r.concat(e)}),r})},t.prototype.removeTags_=function(e){for(var n=0;n<e.length;++n){var r=e[n];if(!r.getQueryParams().loadsAllData()){var i=t.makeQueryKey_(r),o=this.queryToTagMap_[i];delete this.queryToTagMap_[i],delete this.tagToQueryMap_["_"+o]}}},t.queryForListening_=function(t){return t.getQueryParams().loadsAllData()&&!t.getQueryParams().isDefault()?t.getRef():t},t.prototype.setupListener_=function(e,n){var r=e.path,o=this.tagForQuery_(e),a=this.createListenerForView_(n),s=this.listenProvider_.startListening(t.queryForListening_(e),o,a.hashFn,a.onComplete),u=this.syncPointTree_.subtree(r);if(o)i.assert(!u.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var c=u.fold(function(t,e,n){if(!t.isEmpty()&&e&&e.hasCompleteView())return[e.getCompleteView().getQuery()];var r=[];return e&&(r=r.concat(e.getQueryViews().map(function(t){return t.getQuery()}))),i.forEach(n,function(t,e){r=r.concat(e)}),r}),h=0;h<c.length;++h){var l=c[h];this.listenProvider_.stopListening(t.queryForListening_(l),this.tagForQuery_(l))}return s},t.prototype.createListenerForView_=function(t){var e=this,n=t.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(t.getServerCache()||xt.EMPTY_NODE).hash()},onComplete:function(t){if("ok"===t)return r?e.applyTaggedListenComplete(n.path,r):e.applyListenComplete(n.path);var i=function(t,e){var n="Unknown Error";"too_big"===t?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==t?n="Client doesn't have permission to access the desired data.":"unavailable"==t&&(n="The service is unavailable");var r=new Error(t+" at "+e.path.toString()+": "+n);return r.code=t.toUpperCase(),r}(t,n);return e.removeEventRegistration(n,null,i)}}},t.makeQueryKey_=function(t){return t.path.toString()+"$"+t.queryIdentifier()},t.parseQueryKey_=function(t){var e=t.indexOf("$");return i.assert(-1!==e&&e<t.length-1,"Bad queryKey."),{queryId:t.substr(e+1),path:new W(t.substr(0,e))}},t.prototype.queryKeyForTag_=function(t){return this.tagToQueryMap_["_"+t]},t.prototype.tagForQuery_=function(e){var n=t.makeQueryKey_(e);return i.safeGet(this.queryToTagMap_,n)},t.getNextQueryTag_=function(){return t.nextQueryTag_++},t.prototype.applyTaggedOperation_=function(t,e){var n=this.syncPointTree_.get(t);i.assert(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(t);return n.applyOperation(e,r,null)},t.prototype.applyOperationToSyncPoints_=function(t){return this.applyOperationHelper_(t,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(W.Empty))},t.prototype.applyOperationHelper_=function(t,e,n,r){if(t.path.isEmpty())return this.applyOperationDescendantsHelper_(t,e,n,r);var i=e.get(W.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(W.Empty));var o=[],a=t.path.getFront(),s=t.operationForChild(a),u=e.children.get(a);if(u&&s){var c=n?n.getImmediateChild(a):null,h=r.child(a);o=o.concat(this.applyOperationHelper_(s,u,c,h))}return i&&(o=o.concat(i.applyOperation(t,r,n))),o},t.prototype.applyOperationDescendantsHelper_=function(t,e,n,r){var i=this,o=e.get(W.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(W.Empty));var a=[];return e.children.inorderTraversal(function(e,o){var s=n?n.getImmediateChild(e):null,u=r.child(e),c=t.operationForChild(e);c&&(a=a.concat(i.applyOperationDescendantsHelper_(c,o,s,u)))}),o&&(a=a.concat(o.applyOperation(t,r,n))),a},t.nextQueryTag_=1,t}(),Se=function(){function t(){this.rootNode_=xt.EMPTY_NODE}return t.prototype.getNode=function(t){return this.rootNode_.getChild(t)},t.prototype.updateSnapshot=function(t,e){this.rootNode_=this.rootNode_.updateChild(t,e)},t}(),Ce=function(){function t(t){this.app_=t}return t.prototype.getToken=function(t){return this.app_.INTERNAL.getToken(t).then(null,function(t){return t&&"auth/token-not-initialized"===t.code?(b("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(t)})},t.prototype.addTokenChangeListener=function(t){this.app_.INTERNAL.addAuthTokenListener(t)},t.prototype.removeTokenChangeListener=function(t){this.app_.INTERNAL.removeAuthTokenListener(t)},t.prototype.notifyForInvalidToken=function(){var t='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?t+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?t+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':t+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',S(t)},t}(),Ie=function(){function t(){this.counters_={}}return t.prototype.incrementCounter=function(t,e){void 0===e&&(e=1),i.contains(this.counters_,t)||(this.counters_[t]=0),this.counters_[t]+=e},t.prototype.get=function(){return i.deepCopy(this.counters_)},t}(),Ne=function(){function t(){}return t.getCollection=function(t){var e=t.toString();return this.collections_[e]||(this.collections_[e]=new Ie),this.collections_[e]},t.getOrCreateReporter=function(t,e){var n=t.toString();return this.reporters_[n]||(this.reporters_[n]=e()),this.reporters_[n]},t.collections_={},t.reporters_={},t}(),Oe=function(){function t(t){this.collection_=t,this.last_=null}return t.prototype.get=function(){var t=this.collection_.get(),e=i.clone(t);return this.last_&&i.forEach(this.last_,function(t,n){e[t]=e[t]-n}),this.last_=t,e},t}(),Ae=1e4,ke=3e4,Pe=function(){function t(t,e){this.server_=e,this.statsToReport_={},this.statsListener_=new Oe(t);var n=Ae+(ke-Ae)*Math.random();U(this.reportStats_.bind(this),Math.floor(n))}return t.prototype.includeStat=function(t){this.statsToReport_[t]=!0},t.prototype.reportStats_=function(){var t=this,e=this.statsListener_.get(),n={},r=!1;i.forEach(e,function(e,o){o>0&&i.contains(t.statsToReport_,e)&&(n[e]=o,r=!0)}),r&&this.server_.reportStats(n),U(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},t}(),De=function(){function t(){this.eventLists_=[],this.recursionDepth_=0}return t.prototype.queueEvents=function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n],i=r.getPath();null===e||i.equals(e.getPath())||(this.eventLists_.push(e),e=null),null===e&&(e=new Re(i)),e.add(r)}e&&this.eventLists_.push(e)},t.prototype.raiseEventsAtPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_(function(e){return e.equals(t)})},t.prototype.raiseEventsForChangedPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_(function(e){return e.contains(t)||t.contains(e)})},t.prototype.raiseQueuedEventsMatchingPredicate_=function(t){this.recursionDepth_++;for(var e=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];if(r)t(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):e=!1}e&&(this.eventLists_=[]),this.recursionDepth_--},t}(),Re=function(){function t(t){this.path_=t,this.events_=[]}return t.prototype.add=function(t){this.events_.push(t)},t.prototype.raise=function(){for(var t=0;t<this.events_.length;t++){var e=this.events_[t];if(null!==e){this.events_[t]=null;var n=e.getEventRunner();g&&b("event: "+e.toString()),M(n)}}},t.prototype.getPath=function(){return this.path_},t}(),Le=function(){function t(t){this.allowedEvents_=t,this.listeners_={},i.assert(Array.isArray(t)&&t.length>0,"Requires a non-empty array")}return t.prototype.trigger=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Array.isArray(this.listeners_[t]))for(var r=this.listeners_[t].slice(),i=0;i<r.length;i++)r[i].callback.apply(r[i].context,e)},t.prototype.on=function(t,e,n){this.validateEventType_(t),this.listeners_[t]=this.listeners_[t]||[],this.listeners_[t].push({callback:e,context:n});var r=this.getInitialEvent(t);r&&e.apply(n,r)},t.prototype.off=function(t,e,n){this.validateEventType_(t);for(var r=this.listeners_[t]||[],i=0;i<r.length;i++)if(r[i].callback===e&&(!n||n===r[i].context))return void r.splice(i,1)},t.prototype.validateEventType_=function(t){i.assert(this.allowedEvents_.find(function(e){return e===t}),"Unknown event: "+t)},t}(),xe=function(t){function e(){var e,n,r=t.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",e="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",e="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,function(){var t=!document[e];t!==r.visible_&&(r.visible_=t,r.trigger("visible",t))},!1),r}return a.__extends(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return i.assert("visible"===t,"Unknown event type: "+t),[this.visible_]},e}(Le),Fe=function(t){function e(){var e=t.call(this,["online"])||this;return e.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||i.isMobileCordova()||(window.addEventListener("online",function(){e.online_||(e.online_=!0,e.trigger("online",!0))},!1),window.addEventListener("offline",function(){e.online_&&(e.online_=!1,e.trigger("online",!1))},!1)),e}return a.__extends(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return i.assert("online"===t,"Unknown event type: "+t),[this.online_]},e.prototype.currentlyOnline=function(){return this.online_},e}(Le),Me=function(){function t(t){this.onMessage_=t,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return t.prototype.closeAfter=function(t,e){this.closeAfterResponse=t,this.onClose=e,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},t.prototype.handleResponse=function(t,e){var n=this;this.pendingResponses[t]=e;for(var r=function(){var t=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var e=function(e){t[e]&&M(function(){n.onMessage_(t[e])})},r=0;r<t.length;++r)e(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum];){if("break"===r())break}},t}(),je="pLPCommand",Ue="pRTLPCB",We=function(){function t(t,e,n,r){this.connId=t,this.repoInfo=e,this.transportSessionId=n,this.lastSessionId=r,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=w(t),this.stats_=Ne.getCollection(e),this.urlFn=function(t){return e.connectionURL(B,t)}}return t.prototype.open=function(t,e){var n=this;this.curSegmentNum=0,this.onDisconnect_=e,this.myPacketOrderer=new Me(t),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout(function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null},Math.floor(3e4)),function(t){if(i.isNodeSdk()||"complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}}(function(){if(!n.isClosed_){n.scriptTagHolder=new Ve(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[0],i=t[1],o=t[2];if(n.incrementIncomingBytes_(t),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,"start"==r)n.id=i,n.password=o;else{if("close"!==r)throw new Error("Unrecognized command received: "+r);i?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(i,function(){n.onClosed_()})):n.onClosed_()}},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[0],i=t[1];n.incrementIncomingBytes_(t),n.myPacketOrderer.handleResponse(r,i)},function(){n.onClosed_()},n.urlFn);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(t.cb=n.scriptTagHolder.uniqueCallbackIdentifier),t.v="5",n.transportSessionId&&(t.s=n.transportSessionId),n.lastSessionId&&(t.ls=n.lastSessionId),!i.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(t.r="f");var e=n.urlFn(t);n.log_("Connecting via long-poll to "+e),n.scriptTagHolder.addTag(e,function(){})}})},t.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},t.forceAllow=function(){t.forceAllow_=!0},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){return t.forceAllow_||!t.forceDisallow_&&"undefined"!=typeof document&&null!=document.createElement&&!("object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"==typeof Windows&&"object"==typeof Windows.UI)&&!i.isNodeSdk()},t.prototype.markConnectionHealthy=function(){},t.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},t.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},t.prototype.send=function(t){var e=i.stringify(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);for(var n=i.base64Encode(e),r=D(n,1840),o=0;o<r.length;o++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[o]),this.curSegmentNum++},t.prototype.addDisconnectPingFrame=function(t,e){if(!i.isNodeSdk()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},t.prototype.incrementIncomingBytes_=function(t){var e=i.stringify(t).length;this.bytesReceived+=e,this.stats_.incrementCounter("bytes_received",e)},t}(),Ve=function(){function t(e,n,r,o){if(this.onDisconnect=r,this.urlFn=o,this.outstandingRequests=new zt,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,i.isNodeSdk())this.commandCB=e,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=d(),window[je+this.uniqueCallbackIdentifier]=e,window[Ue+this.uniqueCallbackIdentifier]=n,this.myIFrame=t.createIFrame_();var a="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))a='<script>document.domain="'+document.domain+'";<\/script>';var s="<html><body>"+a+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(s),this.myIFrame.doc.close()}catch(t){b("frame writing exception"),t.stack&&b(t.stack),b(t)}}}return t.createIFrame_=function(){var t=document.createElement("iframe");if(t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||b("No IE domain setting required")}catch(n){var e=document.domain;t.src="javascript:void((function(){document.open();document.domain='"+e+"';document.close();})())"}return t.contentDocument?t.doc=t.contentDocument:t.contentWindow?t.doc=t.contentWindow.document:t.document&&(t.doc=t.document),t},t.prototype.close=function(){var e=this;if(this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout(function(){null!==e.myIFrame&&(document.body.removeChild(e.myIFrame),e.myIFrame=null)},Math.floor(0))),i.isNodeSdk()&&this.myID){var n={disconn:"t"};n.id=this.myID,n.pw=this.myPW;var r=this.urlFn(n);t.nodeRestRequest(r)}var o=this.onDisconnect;o&&(this.onDisconnect=null,o())},t.prototype.startLongPoll=function(t,e){for(this.myID=t,this.myPW=e,this.alive=!0;this.newRequest_(););},t.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.count()<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var t={};t.id=this.myID,t.pw=this.myPW,t.ser=this.currentSerial;for(var e=this.urlFn(t),n="",r=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return e+=n,this.addLongPollTag_(e,this.currentSerial),!0}return!1},t.prototype.enqueueSegment=function(t,e,n){this.pendingSegs.push({seg:t,ts:e,d:n}),this.alive&&this.newRequest_()},t.prototype.addLongPollTag_=function(t,e){var n=this;this.outstandingRequests.add(e,1);var r=function(){n.outstandingRequests.remove(e),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(t,function(){clearTimeout(i),r()})},t.prototype.addTag=function(t,e){var n=this;i.isNodeSdk()?this.doNodeLongPoll(t,e):setTimeout(function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=t,r.onload=r.onreadystatechange=function(){var t=r.readyState;t&&"loaded"!==t&&"complete"!==t||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),e())},r.onerror=function(){b("Long-poll script failed to load: "+t),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(t){}},Math.floor(1))},t}(),Be=null;"undefined"!=typeof MozWebSocket?Be=MozWebSocket:"undefined"!=typeof WebSocket&&(Be=WebSocket);var qe=function(){function t(e,n,r,i){this.connId=e,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=w(this.connId),this.stats_=Ne.getCollection(n),this.connURL=t.connectionURL_(n,r,i)}return t.connectionURL_=function(t,e,n){var r={v:"5"};return!i.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(r.r="f"),e&&(r.s=e),n&&(r.ls=n),t.connectionURL("websocket",r)},t.prototype.open=function(t,e){var n=this;this.onDisconnect=e,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,l.set("previous_websocket_failure",!0);try{if(i.isNodeSdk()){var o=i.CONSTANTS.NODE_ADMIN?"AdminNode":"Node",a={headers:{"User-Agent":"Firebase/5/"+s.SDK_VERSION+"/"+r.platform+"/"+o}},u=r.env,c=0==this.connURL.indexOf("wss://")?u.HTTPS_PROXY||u.https_proxy:u.HTTP_PROXY||u.http_proxy;c&&(a.proxy={origin:c}),this.mySock=new Be(this.connURL,[],a)}else this.mySock=new Be(this.connURL)}catch(t){this.log_("Error instantiating WebSocket.");var h=t.message||t.data;return h&&this.log_(h),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(t){n.handleIncomingFrame(t)},this.mySock.onerror=function(t){n.log_("WebSocket error.  Closing connection.");var e=t.message||t.data;e&&n.log_(e),n.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==Be&&!t.forceDisallow_},t.previouslyFailed=function(){return l.isInMemoryStorage||!0===l.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){l.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(t){if(this.frames.push(t),this.frames.length==this.totalFrames){var e=this.frames.join("");this.frames=null;var n=i.jsonEval(e);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(t){this.totalFrames=t,this.frames=[]},t.prototype.extractFrameCount_=function(t){if(i.assert(null===this.frames,"We already have a frame buffer"),t.length<=6){var e=Number(t);if(!isNaN(e))return this.handleNewFrameCount_(e),null}return this.handleNewFrameCount_(1),t},t.prototype.handleIncomingFrame=function(t){if(null!==this.mySock){var e=t.data;if(this.bytesReceived+=e.length,this.stats_.incrementCounter("bytes_received",e.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(e);else{var n=this.extractFrameCount_(e);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(t){this.resetKeepAlive();var e=i.stringify(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);var n=D(e,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var t=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval(function(){t.mySock&&t.sendString_("0"),t.resetKeepAlive()},Math.floor(45e3))},t.prototype.sendString_=function(t){try{this.mySock.send(t)}catch(t){this.log_("Exception thrown from WebSocket.send():",t.message||t.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}(),Ke=function(){function t(t){this.initTransports_(t)}return Object.defineProperty(t,"ALL_TRANSPORTS",{get:function(){return[We,qe]},enumerable:!0,configurable:!0}),t.prototype.initTransports_=function(e){var n=qe&&qe.isAvailable(),r=n&&!qe.previouslyFailed();if(e.webSocketOnly&&(n||S("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),r=!0),r)this.transports_=[qe];else{var i=this.transports_=[];R(t.ALL_TRANSPORTS,function(t,e){e&&e.isAvailable()&&i.push(e)})}},t.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},t.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},t}(),He=function(){function t(t,e,n,r,i,o,a){this.id=t,this.repoInfo_=e,this.onMessage_=n,this.onReady_=r,this.onDisconnect_=i,this.onKill_=o,this.lastSessionId=a,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=w("c:"+this.id+":"),this.transportManager_=new Ke(e),this.log_("Connection created"),this.start_()}return t.prototype.start_=function(){var t=this,e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,void 0,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout(function(){t.conn_&&t.conn_.open(n,r)},Math.floor(0));var i=e.healthyTimeout||0;i>0&&(this.healthyTimeout_=U(function(){t.healthyTimeout_=null,t.isHealthy_||(t.conn_&&t.conn_.bytesReceived>102400?(t.log_("Connection exceeded healthy timeout but has received "+t.conn_.bytesReceived+" bytes.  Marking connection healthy."),t.isHealthy_=!0,t.conn_.markConnectionHealthy()):t.conn_&&t.conn_.bytesSent>10240?t.log_("Connection exceeded healthy timeout but has sent "+t.conn_.bytesSent+" bytes.  Leaving connection alive."):(t.log_("Closing unhealthy connection after timeout."),t.close()))},Math.floor(i)))},t.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},t.prototype.disconnReceiver_=function(t){var e=this;return function(n){t===e.conn_?e.onConnectionLost_(n):t===e.secondaryConn_?(e.log_("Secondary connection lost."),e.onSecondaryConnectionLost_()):e.log_("closing an old connection")}},t.prototype.connReceiver_=function(t){var e=this;return function(n){2!=e.state_&&(t===e.rx_?e.onPrimaryMessageReceived_(n):t===e.secondaryConn_?e.onSecondaryMessageReceived_(n):e.log_("message on old connection"))}},t.prototype.sendRequest=function(t){var e={t:"d",d:t};this.sendData_(e)},t.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},t.prototype.onSecondaryControl_=function(t){if("t"in t){var e=t.t;"a"===e?this.upgradeIfSecondaryHealthy_():"r"===e?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===e&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},t.prototype.onSecondaryMessageReceived_=function(t){var e=k("t",t),n=k("d",t);if("c"==e)this.onSecondaryControl_(n);else{if("d"!=e)throw new Error("Unknown protocol layer: "+e);this.pendingDataMessages.push(n)}},t.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},t.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},t.prototype.onPrimaryMessageReceived_=function(t){var e=k("t",t),n=k("d",t);"c"==e?this.onControl_(n):"d"==e&&this.onDataMessage_(n)},t.prototype.onDataMessage_=function(t){this.onPrimaryResponse_(),this.onMessage_(t)},t.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},t.prototype.onControl_=function(t){var e=k("t",t);if("d"in t){var n=t.d;if("h"===e)this.onHandshake_(n);else if("n"===e){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===e?this.onConnectionShutdown_(n):"r"===e?this.onReset_(n):"e"===e?E("Server Error: "+n):"o"===e?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):E("Unknown control packet command: "+e)}},t.prototype.onHandshake_=function(t){var e=t.ts,n=t.v,r=t.h;this.sessionId=t.s,this.repoInfo_.updateHost(r),0==this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,e),"5"!==n&&S("Protocol version mismatch detected"),this.tryStartUpgrade_())},t.prototype.tryStartUpgrade_=function(){var t=this.transportManager_.upgradeTransport();t&&this.startUpgrade_(t)},t.prototype.startUpgrade_=function(t){var e=this;this.secondaryConn_=new t(this.nextTransportId_(),this.repoInfo_,this.sessionId),this.secondaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),U(function(){e.secondaryConn_&&(e.log_("Timed out trying to upgrade."),e.secondaryConn_.close())},Math.floor(6e4))},t.prototype.onReset_=function(t){this.log_("Reset packet received.  New host: "+t),this.repoInfo_.updateHost(t),1===this.state_?this.close():(this.closeConnections_(),this.start_())},t.prototype.onConnectionEstablished_=function(t,e){var n=this;this.log_("Realtime connection established."),this.conn_=t,this.state_=1,this.onReady_&&(this.onReady_(e,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):U(function(){n.sendPingOnPrimaryIfNecessary_()},Math.floor(5e3))},t.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},t.prototype.onSecondaryConnectionLost_=function(){var t=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==t&&this.rx_!==t||this.close()},t.prototype.onConnectionLost_=function(t){this.conn_=null,t||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(l.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},t.prototype.onConnectionShutdown_=function(t){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(t),this.onKill_=null),this.onDisconnect_=null,this.close()},t.prototype.sendData_=function(t){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(t)},t.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},t.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},t}(),Qe=function(){function t(){}return t.prototype.put=function(t,e,n,r){},t.prototype.merge=function(t,e,n,r){},t.prototype.refreshAuthToken=function(t){},t.prototype.onDisconnectPut=function(t,e,n){},t.prototype.onDisconnectMerge=function(t,e,n){},t.prototype.onDisconnectCancel=function(t,e){},t.prototype.reportStats=function(t){},t}(),Ge=1e3,Ye=3e5,ze=function(t){function e(n,r,o,a,s,u){var c=t.call(this)||this;if(c.repoInfo_=n,c.onDataUpdate_=r,c.onConnectStatus_=o,c.onServerInfoUpdate_=a,c.authTokenProvider_=s,c.authOverride_=u,c.id=e.nextPersistentConnectionId_++,c.log_=w("p:"+c.id+":"),c.interruptReasons_={},c.listens_={},c.outstandingPuts_=[],c.outstandingPutCount_=0,c.onDisconnectRequestQueue_=[],c.connected_=!1,c.reconnectDelay_=Ge,c.maxReconnectDelay_=Ye,c.securityDebugCallback_=null,c.lastSessionId=null,c.establishConnectionTimer_=null,c.visible_=!1,c.requestCBHash_={},c.requestNumber_=0,c.realtime_=null,c.authToken_=null,c.forceTokenRefresh_=!1,c.invalidAuthTokenCount_=0,c.firstConnection_=!0,c.lastConnectionAttemptTime_=null,c.lastConnectionEstablishedTime_=null,u&&!i.isNodeSdk())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return c.scheduleConnect_(0),xe.getInstance().on("visible",c.onVisible_,c),-1===n.host.indexOf("fblocal")&&Fe.getInstance().on("online",c.onOnline_,c),c}return a.__extends(e,t),e.prototype.sendRequest=function(t,e,n){var r=++this.requestNumber_,o={r:r,a:t,b:e};this.log_(i.stringify(o)),i.assert(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(o),n&&(this.requestCBHash_[r]=n)},e.prototype.listen=function(t,e,n,r){var o=t.queryIdentifier(),a=t.path.toString();this.log_("Listen called for "+a+" "+o),this.listens_[a]=this.listens_[a]||{},i.assert(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),i.assert(!this.listens_[a][o],"listen() called twice for same path/queryId.");var s={onComplete:r,hashFn:e,query:t,tag:n};this.listens_[a][o]=s,this.connected_&&this.sendListen_(s)},e.prototype.sendListen_=function(t){var n=this,r=t.query,i=r.path.toString(),o=r.queryIdentifier();this.log_("Listen on "+i+" for "+o);var a={p:i};t.tag&&(a.q=r.queryObject(),a.t=t.tag),a.h=t.hashFn(),this.sendRequest("q",a,function(a){var s=a.d,u=a.s;e.warnOnListenWarnings_(s,r),(n.listens_[i]&&n.listens_[i][o])===t&&(n.log_("listen response",a),"ok"!==u&&n.removeListen_(i,o),t.onComplete&&t.onComplete(u,s))})},e.warnOnListenWarnings_=function(t,e){if(t&&"object"==typeof t&&i.contains(t,"w")){var n=i.safeGet(t,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+e.getQueryParams().getIndex().toString()+'"',o=e.path.toString();S("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+o+" to your security rules for better performance.")}}},e.prototype.refreshAuthToken=function(t){this.authToken_=t,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},function(){}),this.reduceReconnectDelayIfAdminCredential_(t)},e.prototype.reduceReconnectDelayIfAdminCredential_=function(t){(t&&40===t.length||i.isAdmin(t))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},e.prototype.tryAuth=function(){var t=this;if(this.connected_&&this.authToken_){var e=this.authToken_,n=i.isValidFormat(e)?"auth":"gauth",r={cred:e};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,function(n){var r=n.s,i=n.d||"error";t.authToken_===e&&("ok"===r?t.invalidAuthTokenCount_=0:t.onAuthRevoked_(r,i))})}},e.prototype.unlisten=function(t,e){var n=t.path.toString(),r=t.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),i.assert(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,t.queryObject(),e)},e.prototype.sendUnlisten_=function(t,e,n,r){this.log_("Unlisten on "+t+" for "+e);var i={p:t};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},e.prototype.onDisconnectPut=function(t,e,n){this.connected_?this.sendOnDisconnect_("o",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"o",data:e,onComplete:n})},e.prototype.onDisconnectMerge=function(t,e,n){this.connected_?this.sendOnDisconnect_("om",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"om",data:e,onComplete:n})},e.prototype.onDisconnectCancel=function(t,e){this.connected_?this.sendOnDisconnect_("oc",t,null,e):this.onDisconnectRequestQueue_.push({pathString:t,action:"oc",data:null,onComplete:e})},e.prototype.sendOnDisconnect_=function(t,e,n,r){var i={p:e,d:n};this.log_("onDisconnect "+t,i),this.sendRequest(t,i,function(t){r&&setTimeout(function(){r(t.s,t.d)},Math.floor(0))})},e.prototype.put=function(t,e,n,r){this.putInternal("p",t,e,n,r)},e.prototype.merge=function(t,e,n,r){this.putInternal("m",t,e,n,r)},e.prototype.putInternal=function(t,e,n,r,i){var o={p:e,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:t,request:o,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+e)},e.prototype.sendPut_=function(t){var e=this,n=this.outstandingPuts_[t].action,r=this.outstandingPuts_[t].request,i=this.outstandingPuts_[t].onComplete;this.outstandingPuts_[t].queued=this.connected_,this.sendRequest(n,r,function(r){e.log_(n+" response",r),delete e.outstandingPuts_[t],e.outstandingPutCount_--,0===e.outstandingPutCount_&&(e.outstandingPuts_=[]),i&&i(r.s,r.d)})},e.prototype.reportStats=function(t){var e=this;if(this.connected_){var n={c:t};this.log_("reportStats",n),this.sendRequest("s",n,function(t){if("ok"!==t.s){var n=t.d;e.log_("reportStats","Error sending stats: "+n)}})}},e.prototype.onDataMessage_=function(t){if("r"in t){this.log_("from server: "+i.stringify(t));var e=t.r,n=this.requestCBHash_[e];n&&(delete this.requestCBHash_[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&this.onDataPush_(t.a,t.b)}},e.prototype.onDataPush_=function(t,e){this.log_("handleServerMessage",t,e),"d"===t?this.onDataUpdate_(e.p,e.d,!1,e.t):"m"===t?this.onDataUpdate_(e.p,e.d,!0,e.t):"c"===t?this.onListenRevoked_(e.p,e.q):"ac"===t?this.onAuthRevoked_(e.s,e.d):"sd"===t?this.onSecurityDebugPacket_(e):E("Unrecognized action received from server: "+i.stringify(t)+"\nAre you using the latest client?")},e.prototype.onReady_=function(t,e){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(t),this.lastSessionId=e,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},e.prototype.scheduleConnect_=function(t){var e=this;i.assert(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout(function(){e.establishConnectionTimer_=null,e.establishConnection_()},Math.floor(t))},e.prototype.onVisible_=function(t){t&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=Ge,this.realtime_||this.scheduleConnect_(0)),this.visible_=t},e.prototype.onOnline_=function(t){t?(this.log_("Browser went online."),this.reconnectDelay_=Ge,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},e.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=Ge),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var t=(new Date).getTime()-this.lastConnectionAttemptTime_,e=Math.max(0,this.reconnectDelay_-t);e=Math.random()*e,this.log_("Trying to reconnect in "+e+"ms"),this.scheduleConnect_(e),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},e.prototype.establishConnection_=function(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var t=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),o=this.id+":"+e.nextConnectionId_++,a=this,s=this.lastSessionId,u=!1,c=null,h=function(){c?c.close():(u=!0,r())};this.realtime_={close:h,sendRequest:function(t){i.assert(c,"sendRequest call when we're not connected not allowed."),c.sendRequest(t)}};var l=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(l).then(function(e){u?b("getToken() completed but was canceled"):(b("getToken() completed. Creating connection."),a.authToken_=e&&e.accessToken,c=new He(o,a.repoInfo_,t,n,r,function(t){S(t+" ("+a.repoInfo_.toString()+")"),a.interrupt("server_kill")},s))}).then(null,function(t){a.log_("Failed to get token: "+t),u||(i.CONSTANTS.NODE_ADMIN&&S(t),h())})}},e.prototype.interrupt=function(t){b("Interrupting connection for reason: "+t),this.interruptReasons_[t]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},e.prototype.resume=function(t){b("Resuming connection for reason: "+t),delete this.interruptReasons_[t],i.isEmpty(this.interruptReasons_)&&(this.reconnectDelay_=Ge,this.realtime_||this.scheduleConnect_(0))},e.prototype.handleTimestamp_=function(t){var e=t-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:e})},e.prototype.cancelSentTransactions_=function(){for(var t=0;t<this.outstandingPuts_.length;t++){var e=this.outstandingPuts_[t];e&&"h"in e.request&&e.queued&&(e.onComplete&&e.onComplete("disconnect"),delete this.outstandingPuts_[t],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},e.prototype.onListenRevoked_=function(t,e){var n;n=e?e.map(function(t){return P(t)}).join("$"):"default";var r=this.removeListen_(t,n);r&&r.onComplete&&r.onComplete("permission_denied")},e.prototype.removeListen_=function(t,e){var n,r=new W(t).toString();return void 0!==this.listens_[r]?(n=this.listens_[r][e],delete this.listens_[r][e],0===i.getCount(this.listens_[r])&&delete this.listens_[r]):n=void 0,n},e.prototype.onAuthRevoked_=function(t,e){b("Auth token revoked: "+t+"/"+e),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==t&&"permission_denied"!==t||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},e.prototype.onSecurityDebugPacket_=function(t){this.securityDebugCallback_?this.securityDebugCallback_(t):"msg"in t&&console.log("FIREBASE: "+t.msg.replace("\n","\nFIREBASE: "))},e.prototype.restoreState_=function(){var t=this;this.tryAuth(),i.forEach(this.listens_,function(e,n){i.forEach(n,function(e,n){t.sendListen_(n)})});for(var e=0;e<this.outstandingPuts_.length;e++)this.outstandingPuts_[e]&&this.sendPut_(e);for(;this.onDisconnectRequestQueue_.length;){var n=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(n.action,n.pathString,n.data,n.onComplete)}},e.prototype.sendConnectStats_=function(){var t={},e="js";i.CONSTANTS.NODE_ADMIN?e="admin_node":i.CONSTANTS.NODE_CLIENT&&(e="node"),t["sdk."+e+"."+s.SDK_VERSION.replace(/\./g,"-")]=1,i.isMobileCordova()?t["framework.cordova"]=1:i.isReactNative()&&(t["framework.reactnative"]=1),this.reportStats(t)},e.prototype.shouldReconnect_=function(){var t=Fe.getInstance().currentlyOnline();return i.isEmpty(this.interruptReasons_)&&t},e.nextPersistentConnectionId_=0,e.nextConnectionId_=0,e}(Qe),Xe=function(t){function e(e,n,r){var i=t.call(this)||this;return i.repoInfo_=e,i.onDataUpdate_=n,i.authTokenProvider_=r,i.log_=w("p:rest:"),i.listens_={},i}return a.__extends(e,t),e.prototype.reportStats=function(t){throw new Error("Method not implemented.")},e.getListenId_=function(t,e){return void 0!==e?"tag$"+e:(i.assert(t.getQueryParams().isDefault(),"should have a tag if it's not a default query."),t.path.toString())},e.prototype.listen=function(t,n,r,o){var a=this,s=t.path.toString();this.log_("Listen called for "+s+" "+t.queryIdentifier());var u=e.getListenId_(t,r),c={};this.listens_[u]=c;var h=t.getQueryParams().toRestQueryStringParameters();this.restRequest_(s+".json",h,function(t,e){var n=e;(404===t&&(n=null,t=null),null===t&&a.onDataUpdate_(s,n,!1,r),i.safeGet(a.listens_,u)===c)&&o(t?401==t?"permission_denied":"rest_error:"+t:"ok",null)})},e.prototype.unlisten=function(t,n){var r=e.getListenId_(t,n);delete this.listens_[r]},e.prototype.refreshAuthToken=function(t){},e.prototype.restRequest_=function(t,e,n){var r=this;void 0===e&&(e={}),e.format="export",this.authTokenProvider_.getToken(!1).then(function(o){var a=o&&o.accessToken;a&&(e.auth=a);var s=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+t+"?"+i.querystring(e);r.log_("Sending REST request for "+s);var u=new XMLHttpRequest;u.onreadystatechange=function(){if(n&&4===u.readyState){r.log_("REST Response for "+s+" received. status:",u.status,"response:",u.responseText);var t=null;if(u.status>=200&&u.status<300){try{t=i.jsonEval(u.responseText)}catch(t){S("Failed to parse JSON response for "+s+": "+u.responseText)}n(null,t)}else 401!==u.status&&404!==u.status&&S("Got unsuccessful REST response for "+s+" Status: "+u.status),n(u.status);n=null}},u.open("GET",s,!0),u.send()})},e}(Qe),Je=function(){function t(t,e,n){var r=this;this.repoInfo_=t,this.app=n,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new De,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new Xt,this.persistentConnection_=null;var o=new Ce(n);if(this.stats_=Ne.getCollection(t),e||j())this.server_=new Xe(this.repoInfo_,this.onDataUpdate_.bind(this),o),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var a=n.options.databaseAuthVariableOverride;if(void 0!==a&&null!==a){if("object"!=typeof a)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{i.stringify(a)}catch(t){throw new Error("Invalid authOverride provided: "+t)}}this.persistentConnection_=new ze(this.repoInfo_,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),o,a),this.server_=this.persistentConnection_}o.addTokenChangeListener(function(t){r.server_.refreshAuthToken(t)}),this.statsReporter_=Ne.getOrCreateReporter(t,function(){return new Pe(r.stats_,r.server_)}),this.transactions_init_(),this.infoData_=new Se,this.infoSyncTree_=new Te({startListening:function(t,e,n,i){var o=[],a=r.infoData_.getNode(t.path);return a.isEmpty()||(o=r.infoSyncTree_.applyServerOverwrite(t.path,a),setTimeout(function(){i("ok")},0)),o},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new Te({startListening:function(t,e,n,i){return r.server_.listen(t,n,e,function(e,n){var o=i(e,n);r.eventQueue_.raiseEventsForChangedPath(t.path,o)}),[]},stopListening:function(t,e){r.server_.unlisten(t,e)}})}return t.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},t.prototype.name=function(){return this.repoInfo_.namespace},t.prototype.serverTime=function(){var t=this.infoData_.getNode(new W(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t},t.prototype.generateServerValues=function(){return function(t){return(t=t||{}).timestamp=t.timestamp||(new Date).getTime(),t}({timestamp:this.serverTime()})},t.prototype.onDataUpdate_=function(t,e,n,r){this.dataUpdateCount++;var o=new W(t);e=this.interceptServerDataCallback_?this.interceptServerDataCallback_(t,e):e;var a=[];if(r)if(n){var s=i.map(e,function(t){return jt(t)});a=this.serverSyncTree_.applyTaggedQueryMerge(o,s,r)}else{var u=jt(e);a=this.serverSyncTree_.applyTaggedQueryOverwrite(o,u,r)}else if(n){var c=i.map(e,function(t){return jt(t)});a=this.serverSyncTree_.applyServerMerge(o,c)}else{var h=jt(e);a=this.serverSyncTree_.applyServerOverwrite(o,h)}var l=o;a.length>0&&(l=this.rerunTransactions_(o)),this.eventQueue_.raiseEventsForChangedPath(l,a)},t.prototype.interceptServerData_=function(t){this.interceptServerDataCallback_=t},t.prototype.onConnectStatus_=function(t){this.updateInfo_("connected",t),!1===t&&this.runOnDisconnectEvents_()},t.prototype.onServerInfoUpdate_=function(t){var e=this;R(t,function(t,n){e.updateInfo_(n,t)})},t.prototype.updateInfo_=function(t,e){var n=new W("/.info/"+t),r=jt(e);this.infoData_.updateSnapshot(n,r);var i=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,i)},t.prototype.getNextWriteId_=function(){return this.nextWriteId_++},t.prototype.setWithPriority=function(t,e,n,r){var i=this;this.log_("set",{path:t.toString(),value:e,priority:n});var o=this.generateServerValues(),a=jt(e,n),s=$t(a,o),u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserOverwrite(t,s,u,!0);this.eventQueue_.queueEvents(c),this.server_.put(t.toString(),a.val(!0),function(e,n){var o="ok"===e;o||S("set at "+t+" failed: "+e);var a=i.serverSyncTree_.ackUserWrite(u,!o);i.eventQueue_.raiseEventsForChangedPath(t,a),i.callOnCompleteCallback(r,e,n)});var h=this.abortTransactions_(t);this.rerunTransactions_(h),this.eventQueue_.raiseEventsForChangedPath(h,[])},t.prototype.update=function(t,e,n){var r=this;this.log_("update",{path:t.toString(),value:e});var o=!0,a=this.generateServerValues(),s={};if(i.forEach(e,function(t,e){o=!1;var n=jt(e);s[t]=$t(n,a)}),o)b("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserMerge(t,s,u);this.eventQueue_.queueEvents(c),this.server_.merge(t.toString(),e,function(e,i){var o="ok"===e;o||S("update at "+t+" failed: "+e);var a=r.serverSyncTree_.ackUserWrite(u,!o),s=a.length>0?r.rerunTransactions_(t):t;r.eventQueue_.raiseEventsForChangedPath(s,a),r.callOnCompleteCallback(n,e,i)}),i.forEach(e,function(e){var n=r.abortTransactions_(t.child(e));r.rerunTransactions_(n)}),this.eventQueue_.raiseEventsForChangedPath(t,[])}},t.prototype.runOnDisconnectEvents_=function(){var t=this;this.log_("onDisconnectEvents");var e=this.generateServerValues(),n=[];(function(t,e){var n=new Xt;return t.forEachTree(new W(""),function(t,r){n.remember(t,$t(r,e))}),n})(this.onDisconnect_,e).forEachTree(W.Empty,function(e,r){n=n.concat(t.serverSyncTree_.applyServerOverwrite(e,r));var i=t.abortTransactions_(e);t.rerunTransactions_(i)}),this.onDisconnect_=new Xt,this.eventQueue_.raiseEventsForChangedPath(W.Empty,n)},t.prototype.onDisconnectCancel=function(t,e){var n=this;this.server_.onDisconnectCancel(t.toString(),function(r,i){"ok"===r&&n.onDisconnect_.forget(t),n.callOnCompleteCallback(e,r,i)})},t.prototype.onDisconnectSet=function(t,e,n){var r=this,i=jt(e);this.server_.onDisconnectPut(t.toString(),i.val(!0),function(e,o){"ok"===e&&r.onDisconnect_.remember(t,i),r.callOnCompleteCallback(n,e,o)})},t.prototype.onDisconnectSetWithPriority=function(t,e,n,r){var i=this,o=jt(e,n);this.server_.onDisconnectPut(t.toString(),o.val(!0),function(e,n){"ok"===e&&i.onDisconnect_.remember(t,o),i.callOnCompleteCallback(r,e,n)})},t.prototype.onDisconnectUpdate=function(t,e,n){var r=this;if(i.isEmpty(e))return b("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(t.toString(),e,function(o,a){"ok"===o&&i.forEach(e,function(e,n){var i=jt(n);r.onDisconnect_.remember(t.child(e),i)}),r.callOnCompleteCallback(n,o,a)})},t.prototype.addEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.addEventRegistration(t,e):this.serverSyncTree_.addEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.removeEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.removeEventRegistration(t,e):this.serverSyncTree_.removeEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt("repo_interrupt")},t.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume("repo_interrupt")},t.prototype.stats=function(t){if(void 0===t&&(t=!1),"undefined"!=typeof console){var e;t?(this.statsListener_||(this.statsListener_=new Oe(this.stats_)),e=this.statsListener_.get()):e=this.stats_.get();var n=Object.keys(e).reduce(function(t,e){return Math.max(e.length,t)},0);i.forEach(e,function(t,e){for(var r=t.length;r<n+2;r++)t+=" ";console.log(t+e)})}},t.prototype.statsIncrementCounter=function(t){this.stats_.incrementCounter(t),this.statsReporter_.includeStat(t)},t.prototype.log_=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),b.apply(void 0,[n].concat(t))},t.prototype.callOnCompleteCallback=function(t,e,n){t&&M(function(){if("ok"==e)t(null);else{var r=(e||"error").toUpperCase(),i=r;n&&(i+=": "+n);var o=new Error(i);o.code=r,t(o)}})},Object.defineProperty(t.prototype,"database",{get:function(){return this.__database||(this.__database=new un(this))},enumerable:!0,configurable:!0}),t}(),$e=function(){function t(e){this.indexedFilter_=new le(e.getIndex()),this.index_=e.getIndex(),this.startPost_=t.getStartPost_(e),this.endPost_=t.getEndPost_(e)}return t.prototype.getStartPost=function(){return this.startPost_},t.prototype.getEndPost=function(){return this.endPost_},t.prototype.matches=function(t){return this.index_.compare(this.getStartPost(),t)<=0&&this.index_.compare(t,this.getEndPost())<=0},t.prototype.updateChild=function(t,e,n,r,i,o){return this.matches(new lt(e,n))||(n=xt.EMPTY_NODE),this.indexedFilter_.updateChild(t,e,n,r,i,o)},t.prototype.updateFullNode=function(t,e,n){e.isLeafNode()&&(e=xt.EMPTY_NODE);var r=e.withIndex(this.index_);r=r.updatePriority(xt.EMPTY_NODE);var i=this;return e.forEachChild(Tt,function(t,e){i.matches(new lt(t,e))||(r=r.updateImmediateChild(t,xt.EMPTY_NODE))}),this.indexedFilter_.updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.indexedFilter_},t.prototype.getIndex=function(){return this.index_},t.getStartPost_=function(t){if(t.hasStart()){var e=t.getIndexStartName();return t.getIndex().makePost(t.getIndexStartValue(),e)}return t.getIndex().minPost()},t.getEndPost_=function(t){if(t.hasEnd()){var e=t.getIndexEndName();return t.getIndex().makePost(t.getIndexEndValue(),e)}return t.getIndex().maxPost()},t}(),Ze=function(){function t(t){this.rangedFilter_=new $e(t),this.index_=t.getIndex(),this.limit_=t.getLimit(),this.reverse_=!t.isViewFromLeft()}return t.prototype.updateChild=function(t,e,n,r,i,o){return this.rangedFilter_.matches(new lt(e,n))||(n=xt.EMPTY_NODE),t.getImmediateChild(e).equals(n)?t:t.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(t,e,n,r,i,o):this.fullLimitUpdateChild_(t,e,n,i,o)},t.prototype.updateFullNode=function(t,e,n){var r;if(e.isLeafNode()||e.isEmpty())r=xt.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<e.numChildren()&&e.isIndexed(this.index_)){r=xt.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?e.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):e.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var a=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),a)<=0:this.index_.compare(a,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(a.name,a.node),o++}}else{r=(r=e.withIndex(this.index_)).updatePriority(xt.EMPTY_NODE);var s=void 0,u=void 0,c=void 0;i=void 0;if(this.reverse_){i=r.getReverseIterator(this.index_),s=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var h=this.index_.getCompare();c=function(t,e){return h(e,t)}}else i=r.getIterator(this.index_),s=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();o=0;for(var l=!1;i.hasNext();){a=i.getNext();!l&&c(s,a)<=0&&(l=!0),l&&o<this.limit_&&c(a,u)<=0?o++:r=r.updateImmediateChild(a.name,xt.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},t.prototype.getIndex=function(){return this.index_},t.prototype.fullLimitUpdateChild_=function(t,e,n,r,o){var a;if(this.reverse_){var s=this.index_.getCompare();a=function(t,e){return s(e,t)}}else a=this.index_.getCompare();var u=t;i.assert(u.numChildren()==this.limit_,"");var c=new lt(e,n),h=this.reverse_?u.getFirstChild(this.index_):u.getLastChild(this.index_),l=this.rangedFilter_.matches(c);if(u.hasChild(e)){for(var f=u.getImmediateChild(e),p=r.getChildAfterChild(this.index_,h,this.reverse_);null!=p&&(p.name==e||u.hasChild(p.name));)p=r.getChildAfterChild(this.index_,p,this.reverse_);var d=null==p?1:a(p,c);if(l&&!n.isEmpty()&&d>=0)return null!=o&&o.trackChildChange(he.childChangedChange(e,n,f)),u.updateImmediateChild(e,n);null!=o&&o.trackChildChange(he.childRemovedChange(e,f));var v=u.updateImmediateChild(e,xt.EMPTY_NODE);return null!=p&&this.rangedFilter_.matches(p)?(null!=o&&o.trackChildChange(he.childAddedChange(p.name,p.node)),v.updateImmediateChild(p.name,p.node)):v}return n.isEmpty()?t:l&&a(h,c)>=0?(null!=o&&(o.trackChildChange(he.childRemovedChange(h.name,h.node)),o.trackChildChange(he.childAddedChange(e,n))),u.updateImmediateChild(e,n).updateImmediateChild(h.name,xt.EMPTY_NODE)):t},t}(),tn=function(){function t(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=Tt}return t.prototype.hasStart=function(){return this.startSet_},t.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},t.prototype.getIndexStartValue=function(){return i.assert(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},t.prototype.getIndexStartName=function(){return i.assert(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:I},t.prototype.hasEnd=function(){return this.endSet_},t.prototype.getIndexEndValue=function(){return i.assert(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},t.prototype.getIndexEndName=function(){return i.assert(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:N},t.prototype.hasLimit=function(){return this.limitSet_},t.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},t.prototype.getLimit=function(){return i.assert(this.limitSet_,"Only valid if limit has been set"),this.limit_},t.prototype.getIndex=function(){return this.index_},t.prototype.copy_=function(){var e=new t;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e},t.prototype.limit=function(t){var e=this.copy_();return e.limitSet_=!0,e.limit_=t,e.viewFrom_="",e},t.prototype.limitToFirst=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},t.prototype.limitToLast=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},t.prototype.startAt=function(t,e){var n=this.copy_();return n.startSet_=!0,void 0===t&&(t=null),n.indexStartValue_=t,null!=e?(n.startNameSet_=!0,n.indexStartName_=e):(n.startNameSet_=!1,n.indexStartName_=""),n},t.prototype.endAt=function(t,e){var n=this.copy_();return n.endSet_=!0,void 0===t&&(t=null),n.indexEndValue_=t,void 0!==e?(n.endNameSet_=!0,n.indexEndName_=e):(n.endNameSet_=!1,n.indexEndName_=""),n},t.prototype.orderBy=function(t){var e=this.copy_();return e.index_=t,e},t.prototype.getQueryObject=function(){var e=t.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[e.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[e.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[e.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[e.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[e.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?e.VIEW_FROM_LEFT:e.VIEW_FROM_RIGHT),n[e.VIEW_FROM]=r}return this.index_!==Tt&&(n[e.INDEX]=this.index_.toString()),n},t.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},t.prototype.isDefault=function(){return this.loadsAllData()&&this.index_==Tt},t.prototype.getNodeFilter=function(){return this.loadsAllData()?new le(this.getIndex()):this.hasLimit()?new Ze(this):new $e(this)},t.prototype.toRestQueryStringParameters=function(){var e,n=t.REST_QUERY_CONSTANTS_,r={};return this.isDefault()?r:(this.index_===Tt?e=n.PRIORITY_INDEX:this.index_===Vt?e=n.VALUE_INDEX:this.index_===dt?e=n.KEY_INDEX:(i.assert(this.index_ instanceof Bt,"Unrecognized index type!"),e=this.index_.toString()),r[n.ORDER_BY]=i.stringify(e),this.startSet_&&(r[n.START_AT]=i.stringify(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+i.stringify(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=i.stringify(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+i.stringify(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_),r)},t.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},t.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},t.DEFAULT=new t,t}(),en=function(t){function e(e,n){if(!(e instanceof Je))throw new Error("new Reference() no longer supported - use app.database().");return t.call(this,e,n,tn.DEFAULT,!1)||this}return a.__extends(e,t),e.prototype.getKey=function(){return i.validateArgCount("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},e.prototype.child=function(t){return i.validateArgCount("Reference.child",1,1,arguments.length),"number"==typeof t?t=String(t):t instanceof W||(null===this.path.getFront()?function(t,e,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),ot(t,e,n,r)}("Reference.child",1,t,!1):ot("Reference.child",1,t,!1)),new e(this.repo,this.path.child(t))},e.prototype.getParent=function(){i.validateArgCount("Reference.parent",0,0,arguments.length);var t=this.path.parent();return null===t?null:new e(this.repo,t)},e.prototype.getRoot=function(){i.validateArgCount("Reference.root",0,0,arguments.length);for(var t=this;null!==t.getParent();)t=t.getParent();return t},e.prototype.databaseProp=function(){return this.repo.database},e.prototype.set=function(t,e){i.validateArgCount("Reference.set",1,2,arguments.length),at("Reference.set",this.path),Z("Reference.set",1,t,this.path,!1),i.validateCallback("Reference.set",2,e,!0);var n=new i.Deferred;return this.repo.setWithPriority(this.path,t,null,n.wrapCallback(e)),n.promise},e.prototype.update=function(t,e){if(i.validateArgCount("Reference.update",1,2,arguments.length),at("Reference.update",this.path),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,S("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}et("Reference.update",1,t,this.path,!1),i.validateCallback("Reference.update",2,e,!0);var o=new i.Deferred;return this.repo.update(this.path,t,o.wrapCallback(e)),o.promise},e.prototype.setWithPriority=function(t,e,n){if(i.validateArgCount("Reference.setWithPriority",2,3,arguments.length),at("Reference.setWithPriority",this.path),Z("Reference.setWithPriority",1,t,this.path,!1),nt("Reference.setWithPriority",2,e,!1),i.validateCallback("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new i.Deferred;return this.repo.setWithPriority(this.path,t,e,r.wrapCallback(n)),r.promise},e.prototype.remove=function(t){return i.validateArgCount("Reference.remove",0,1,arguments.length),at("Reference.remove",this.path),i.validateCallback("Reference.remove",1,t,!0),this.set(null,t)},e.prototype.transaction=function(t,e,n){if(i.validateArgCount("Reference.transaction",1,3,arguments.length),at("Reference.transaction",this.path),i.validateCallback("Reference.transaction",1,t,!1),i.validateCallback("Reference.transaction",2,e,!0),function(t,e,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(i.errorPrefix(t,e,r)+"must be a boolean.")}("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new i.Deferred;"function"==typeof e&&r.promise.catch(function(){});return this.repo.startTransaction(this.path,t,function(t,n,i){t?r.reject(t):r.resolve(new ct(n,i)),"function"==typeof e&&e(t,n,i)},n),r.promise},e.prototype.setPriority=function(t,e){i.validateArgCount("Reference.setPriority",1,2,arguments.length),at("Reference.setPriority",this.path),nt("Reference.setPriority",1,t,!1),i.validateCallback("Reference.setPriority",2,e,!0);var n=new i.Deferred;return this.repo.setWithPriority(this.path.child(".priority"),t,null,n.wrapCallback(e)),n.promise},e.prototype.push=function(t,e){i.validateArgCount("Reference.push",0,2,arguments.length),at("Reference.push",this.path),Z("Reference.push",1,t,this.path,!0),i.validateCallback("Reference.push",2,e,!0);var n,r=this.repo.serverTime(),o=ht(r),a=this.child(o),s=this.child(o);return n=null!=t?a.set(t,e).then(function(){return s}):Promise.resolve(s),a.then=n.then.bind(n),a.catch=n.then.bind(n,void 0),"function"==typeof e&&n.catch(function(){}),a},e.prototype.onDisconnect=function(){return at("Reference.onDisconnect",this.path),new ut(this.repo,this.path)},Object.defineProperty(e.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"key",{get:function(){return this.getKey()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this.getParent()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){return this.getRoot()},enumerable:!0,configurable:!0}),e}(Yt);Yt.__referenceConstructor=en,me.__referenceConstructor=en;var nn,rn=function(){return function(){this.children={},this.childCount=0,this.value=null}}(),on=function(){function t(t,e,n){void 0===t&&(t=""),void 0===e&&(e=null),void 0===n&&(n=new rn),this.name_=t,this.parent_=e,this.node_=n}return t.prototype.subTree=function(e){for(var n,r=e instanceof W?e:new W(e),o=this;null!==(n=r.getFront());){o=new t(n,o,i.safeGet(o.node_.children,n)||new rn),r=r.popFront()}return o},t.prototype.getValue=function(){return this.node_.value},t.prototype.setValue=function(t){i.assert(void 0!==t,"Cannot set value to undefined"),this.node_.value=t,this.updateParents_()},t.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},t.prototype.hasChildren=function(){return this.node_.childCount>0},t.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},t.prototype.forEachChild=function(e){var n=this;i.forEach(this.node_.children,function(r,i){e(new t(r,n,i))})},t.prototype.forEachDescendant=function(t,e,n){e&&!n&&t(this),this.forEachChild(function(e){e.forEachDescendant(t,!0,n)}),e&&n&&t(this)},t.prototype.forEachAncestor=function(t,e){for(var n=e?this:this.parent();null!==n;){if(t(n))return!0;n=n.parent()}return!1},t.prototype.forEachImmediateDescendantWithValue=function(t){this.forEachChild(function(e){null!==e.getValue()?t(e):e.forEachImmediateDescendantWithValue(t)})},t.prototype.path=function(){return new W(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},t.prototype.name=function(){return this.name_},t.prototype.parent=function(){return this.parent_},t.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},t.prototype.updateChild_=function(t,e){var n=e.isEmpty(),r=i.contains(this.node_.children,t);n&&r?(delete this.node_.children[t],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[t]=e.node_,this.node_.childCount++,this.updateParents_())},t}();!function(t){t[t.RUN=0]="RUN",t[t.SENT=1]="SENT",t[t.COMPLETED=2]="COMPLETED",t[t.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",t[t.NEEDS_ABORT=4]="NEEDS_ABORT"}(nn||(nn={})),Je.MAX_TRANSACTION_RETRIES_=25,Je.prototype.transactions_init_=function(){this.transactionQueueTree_=new on},Je.prototype.startTransaction=function(t,e,n,r){this.log_("transaction on "+t);var o=function(){},a=new en(this,t);a.on("value",o);var s={path:t,update:e,onComplete:n,status:null,order:d(),applyLocally:r,retryCount:0,unwatcher:function(){a.off("value",o)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},u=this.getLatestState_(t);s.currentInputSnapshot=u;var c=s.update(u.val());if(void 0===c){if(s.unwatcher(),s.currentOutputSnapshotRaw=null,s.currentOutputSnapshotResolved=null,s.onComplete){var h=new qt(s.currentInputSnapshot,new en(this,s.path),Tt);s.onComplete(null,!1,h)}}else{tt("transaction failed: Data returned ",c,s.path),s.status=nn.RUN;var l=this.transactionQueueTree_.subTree(t),f=l.getValue()||[];f.push(s),l.setValue(f);var p=void 0;if("object"==typeof c&&null!==c&&i.contains(c,".priority"))p=i.safeGet(c,".priority"),i.assert($(p),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else p=(this.serverSyncTree_.calcCompleteEventCache(t)||xt.EMPTY_NODE).getPriority().val();p=p;var v=this.generateServerValues(),y=jt(c,p),g=$t(y,v);s.currentOutputSnapshotRaw=y,s.currentOutputSnapshotResolved=g,s.currentWriteId=this.getNextWriteId_();var _=this.serverSyncTree_.applyUserOverwrite(t,g,s.currentWriteId,s.applyLocally);this.eventQueue_.raiseEventsForChangedPath(t,_),this.sendReadyTransactions_()}},Je.prototype.getLatestState_=function(t,e){return this.serverSyncTree_.calcCompleteEventCache(t,e)||xt.EMPTY_NODE},Je.prototype.sendReadyTransactions_=function(t){var e=this;if(void 0===t&&(t=this.transactionQueueTree_),t||this.pruneCompletedTransactionsBelowNode_(t),null!==t.getValue()){var n=this.buildTransactionQueue_(t);i.assert(n.length>0,"Sending zero length transaction queue"),n.every(function(t){return t.status===nn.RUN})&&this.sendTransactionQueue_(t.path(),n)}else t.hasChildren()&&t.forEachChild(function(t){e.sendReadyTransactions_(t)})},Je.prototype.sendTransactionQueue_=function(t,e){for(var n=this,r=e.map(function(t){return t.currentWriteId}),o=this.getLatestState_(t,r),a=o,s=o.hash(),u=0;u<e.length;u++){var c=e[u];i.assert(c.status===nn.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=nn.SENT,c.retryCount++;var h=W.relativePath(t,c.path);a=a.updateChild(h,c.currentOutputSnapshotRaw)}var l=a.val(!0),f=t;this.server_.put(f.toString(),l,function(r){n.log_("transaction put response",{path:f.toString(),status:r});var i=[];if("ok"===r){for(var o=[],a=0;a<e.length;a++){if(e[a].status=nn.COMPLETED,i=i.concat(n.serverSyncTree_.ackUserWrite(e[a].currentWriteId)),e[a].onComplete){var s=e[a].currentOutputSnapshotResolved,u=new en(n,e[a].path),c=new qt(s,u,Tt);o.push(e[a].onComplete.bind(null,null,!0,c))}e[a].unwatcher()}n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(t)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(t,i);for(a=0;a<o.length;a++)M(o[a])}else{if("datastale"===r)for(a=0;a<e.length;a++)e[a].status===nn.SENT_NEEDS_ABORT?e[a].status=nn.NEEDS_ABORT:e[a].status=nn.RUN;else{S("transaction at "+f.toString()+" failed: "+r);for(a=0;a<e.length;a++)e[a].status=nn.NEEDS_ABORT,e[a].abortReason=r}n.rerunTransactions_(t)}},s)},Je.prototype.rerunTransactions_=function(t){var e=this.getAncestorTransactionNode_(t),n=e.path(),r=this.buildTransactionQueue_(e);return this.rerunTransactionQueue_(r,n),n},Je.prototype.rerunTransactionQueue_=function(t,e){if(0!==t.length){for(var n=[],r=[],o=t.filter(function(t){return t.status===nn.RUN}).map(function(t){return t.currentWriteId}),a=0;a<t.length;a++){var s=t[a],u=W.relativePath(e,s.path),c=!1,h=void 0;if(i.assert(null!==u,"rerunTransactionsUnderNode_: relativePath should not be null."),s.status===nn.NEEDS_ABORT)c=!0,h=s.abortReason,r=r.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else if(s.status===nn.RUN)if(s.retryCount>=Je.MAX_TRANSACTION_RETRIES_)c=!0,h="maxretry",r=r.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else{var l=this.getLatestState_(s.path,o);s.currentInputSnapshot=l;var f=t[a].update(l.val());if(void 0!==f){tt("transaction failed: Data returned ",f,s.path);var p=jt(f);"object"==typeof f&&null!=f&&i.contains(f,".priority")||(p=p.updatePriority(l.getPriority()));var d=s.currentWriteId,v=this.generateServerValues(),y=$t(p,v);s.currentOutputSnapshotRaw=p,s.currentOutputSnapshotResolved=y,s.currentWriteId=this.getNextWriteId_(),o.splice(o.indexOf(d),1),r=(r=r.concat(this.serverSyncTree_.applyUserOverwrite(s.path,y,s.currentWriteId,s.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(d,!0))}else c=!0,h="nodata",r=r.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(e,r),r=[],c&&(t[a].status=nn.COMPLETED,function(t){setTimeout(t,Math.floor(0))}(t[a].unwatcher),t[a].onComplete))if("nodata"===h){var g=new en(this,t[a].path),_=t[a].currentInputSnapshot,m=new qt(_,g,Tt);n.push(t[a].onComplete.bind(null,null,!1,m))}else n.push(t[a].onComplete.bind(null,new Error(h),!1,null))}this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);for(a=0;a<n.length;a++)M(n[a]);this.sendReadyTransactions_()}},Je.prototype.getAncestorTransactionNode_=function(t){for(var e,n=this.transactionQueueTree_;null!==(e=t.getFront())&&null===n.getValue();)n=n.subTree(e),t=t.popFront();return n},Je.prototype.buildTransactionQueue_=function(t){var e=[];return this.aggregateTransactionQueuesForNode_(t,e),e.sort(function(t,e){return t.order-e.order}),e},Je.prototype.aggregateTransactionQueuesForNode_=function(t,e){var n=this,r=t.getValue();if(null!==r)for(var i=0;i<r.length;i++)e.push(r[i]);t.forEachChild(function(t){n.aggregateTransactionQueuesForNode_(t,e)})},Je.prototype.pruneCompletedTransactionsBelowNode_=function(t){var e=this,n=t.getValue();if(n){for(var r=0,i=0;i<n.length;i++)n[i].status!==nn.COMPLETED&&(n[r]=n[i],r++);n.length=r,t.setValue(n.length>0?n:null)}t.forEachChild(function(t){e.pruneCompletedTransactionsBelowNode_(t)})},Je.prototype.abortTransactions_=function(t){var e=this,n=this.getAncestorTransactionNode_(t).path(),r=this.transactionQueueTree_.subTree(t);return r.forEachAncestor(function(t){e.abortTransactionsOnNode_(t)}),this.abortTransactionsOnNode_(r),r.forEachDescendant(function(t){e.abortTransactionsOnNode_(t)}),n},Je.prototype.abortTransactionsOnNode_=function(t){var e=t.getValue();if(null!==e){for(var n=[],r=[],o=-1,a=0;a<e.length;a++)if(e[a].status===nn.SENT_NEEDS_ABORT);else if(e[a].status===nn.SENT)i.assert(o===a-1,"All SENT items should be at beginning of queue."),o=a,e[a].status=nn.SENT_NEEDS_ABORT,e[a].abortReason="set";else if(i.assert(e[a].status===nn.RUN,"Unexpected transaction status in abort"),e[a].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(e[a].currentWriteId,!0)),e[a].onComplete){n.push(e[a].onComplete.bind(null,new Error("set"),!1,null))}-1===o?t.setValue(null):e.length=o+1,this.eventQueue_.raiseEventsForChangedPath(t.path(),r);for(a=0;a<n.length;a++)M(n[a])}};var an,sn=function(){function t(){this.repos_={},this.useRestClient_=!1}return t.getInstance=function(){return an||(an=new t),an},t.prototype.interrupt=function(){for(var t in this.repos_)for(var e in this.repos_[t])this.repos_[t][e].interrupt()},t.prototype.resume=function(){for(var t in this.repos_)for(var e in this.repos_[t])this.repos_[t][e].resume()},t.prototype.databaseFromApp=function(t,e){var n=e||t.options.databaseURL;void 0===n&&T("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.initializeApp().");var r=Q(n),i=r.repoInfo;return st("Invalid Firebase Database URL",1,r),r.path.isEmpty()||T("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(i,t).database},t.prototype.deleteRepo=function(t){var e=i.safeGet(this.repos_,t.app.name);e&&i.safeGet(e,t.repoInfo_.toURLString())===t||T("Database "+t.app.name+"("+t.repoInfo_+") has already been deleted."),t.interrupt(),delete e[t.repoInfo_.toURLString()]},t.prototype.createRepo=function(t,e){var n=i.safeGet(this.repos_,e.name);n||(n={},this.repos_[e.name]=n);var r=i.safeGet(n,t.toURLString());return r&&T("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),r=new Je(t,this.useRestClient_,e),n[t.toURLString()]=r,r},t.prototype.forceRestClient=function(t){this.useRestClient_=t},t}(),un=function(){function t(t){this.repo_=t,t instanceof Je||T("Don't call new Database() directly - please use firebase.database()."),this.root_=new en(t,W.Empty),this.INTERNAL=new cn(this)}return Object.defineProperty(t.prototype,"app",{get:function(){return this.repo_.app},enumerable:!0,configurable:!0}),t.prototype.ref=function(t){return this.checkDeleted_("ref"),i.validateArgCount("database.ref",0,1,arguments.length),t instanceof en?this.refFromURL(t.toString()):void 0!==t?this.root_.child(t):this.root_},t.prototype.refFromURL=function(t){var e="database.refFromURL";this.checkDeleted_(e),i.validateArgCount(e,1,1,arguments.length);var n=Q(t);st(e,1,n);var r=n.repoInfo;return r.host!==this.repo_.repoInfo_.host&&T(e+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},t.prototype.checkDeleted_=function(t){null===this.repo_&&T("Cannot call "+t+" on a deleted database.")},t.prototype.goOffline=function(){i.validateArgCount("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},t.prototype.goOnline=function(){i.validateArgCount("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},t.ServerValue={TIMESTAMP:{".sv":"timestamp"}},t}(),cn=function(){function t(t){this.database=t}return t.prototype.delete=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){return this.database.checkDeleted_("delete"),sn.getInstance().deleteRepo(this.database.repo_),this.database.repo_=null,this.database.root_=null,this.database.INTERNAL=null,this.database=null,[2]})})},t}(),hn=Object.freeze({forceLongPolling:function(){qe.forceDisallow(),We.forceAllow()},forceWebSockets:function(){We.forceDisallow()},isWebSocketsAvailable:function(){return qe.isAvailable()},setSecurityDebugCallback:function(t,e){t.repo.persistentConnection_.securityDebugCallback_=e},stats:function(t,e){t.repo.stats(e)},statsIncrementCounter:function(t,e){t.repo.statsIncrementCounter(e)},dataUpdateCount:function(t){return t.repo.dataUpdateCount},interceptServerData:function(t,e){return t.repo.interceptServerData_(e)}}),ln=ze;ze.prototype.simpleListen=function(t,e){this.sendRequest("q",{p:t},e)},ze.prototype.echo=function(t,e){this.sendRequest("echo",{d:t},e)};var fn=He,pn=q,dn=Object.freeze({DataConnection:ln,RealTimeConnection:fn,hijackHash:function(t){var e=ze.prototype.put;return ze.prototype.put=function(n,r,i,o){void 0!==o&&(o=t()),e.call(this,n,r,i,o)},function(){ze.prototype.put=e}},ConnectionTarget:pn,queryIdentifier:function(t){return t.queryIdentifier()},listens:function(t){return t.repo.persistentConnection_.listens_},forceRestClient:function(t){sn.getInstance().forceRestClient(t)}}),vn=un.ServerValue;function yn(e){var n=e.INTERNAL.registerService("database",function(t,e,n){return sn.getInstance().databaseFromApp(t,n)},{Reference:en,Query:Yt,Database:un,enableLogging:m,INTERNAL:hn,ServerValue:vn,TEST_ACCESS:dn},null,!0);i.isNodeSdk()&&(t.exports=n)}yn(s),e.registerDatabase=yn,e.Database=un,e.Query=Yt,e.Reference=en,e.enableLogging=m,e.ServerValue=vn,e.DataSnapshot=qt,e.OnDisconnect=ut}).call(this,n(4))},function(t,e,n){"use strict";n.r(e),n.d(e,"setLogLevel",function(){return u}),n.d(e,"Logger",function(){return s}),n.d(e,"LogLevel",function(){return r});var r,i=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(r||(r={}));var o=r.INFO,a=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString();switch(e){case r.DEBUG:case r.VERBOSE:console.log.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.INFO:console.info.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.WARN:console.warn.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.ERROR:console.error.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+e+")")}}},s=function(){function t(t){this.name=t,this._logLevel=o,this._logHandler=a,i.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in r))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!0,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.DEBUG].concat(t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.VERBOSE].concat(t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.INFO].concat(t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.WARN].concat(t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.ERROR].concat(t))},t}();function u(t){i.forEach(function(e){e.logLevel=t})}},function(t,e,n){"use strict";n.r(e);n(17)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(n(1)),o={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"},a=function(t){function e(n,r,i){var o=t.call(this,r)||this;return Object.setPrototypeOf(o,e.prototype),o.code=n,o.details=i,o}return r.__extends(e,t),e}(Error);var s=function(){function t(t){this.app=t}return t.prototype.getAuthToken=function(){return r.__awaiter(this,void 0,void 0,function(){var t;return r.__generator(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,this.app.INTERNAL.getToken()];case 1:return(t=e.sent())?[2,t.accessToken]:[2,void 0];case 2:return e.sent(),[2,void 0];case 3:return[2]}})})},t.prototype.getInstanceIdToken=function(){return r.__awaiter(this,void 0,void 0,function(){var t;return r.__generator(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),this.app.messaging?[4,this.app.messaging().getToken()]:[2,void 0];case 1:return(t=e.sent())?[2,t]:[2,void 0];case 2:return e.sent(),[2,void 0];case 3:return[2]}})})},t.prototype.getContext=function(){return r.__awaiter(this,void 0,void 0,function(){var t,e;return r.__generator(this,function(n){switch(n.label){case 0:return[4,this.getAuthToken()];case 1:return t=n.sent(),[4,this.getInstanceIdToken()];case 2:return e=n.sent(),[2,{authToken:t,instanceIdToken:e}]}})})},t}();function u(t,e){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]=e(t[r]));return n}var c=function(){function t(){}return t.prototype.encode=function(t){var e=this;if(null===t||void 0===t)return null;if(t instanceof Number&&(t=t.valueOf()),"number"==typeof t&&isFinite(t))return t;if(!0===t||!1===t)return t;if("[object String]"===Object.prototype.toString.call(t))return t;if(Array.isArray(t))return t.map(function(t){return e.encode(t)});if("function"==typeof t||"object"==typeof t)return u(t,function(t){return e.encode(t)});throw new Error("Data cannot be encoded in JSON: "+t)},t.prototype.decode=function(t){var e=this;if(null===t)return t;if(t["@type"])switch(t["@type"]){case"type.googleapis.com/google.protobuf.Int64Value":case"type.googleapis.com/google.protobuf.UInt64Value":var n=parseFloat(t.value);if(isNaN(n))throw new Error("Data cannot be decoded from JSON: "+t);return n;default:throw new Error("Data cannot be decoded from JSON: "+t)}return Array.isArray(t)?t.map(function(t){return e.decode(t)}):"function"==typeof t||"object"==typeof t?u(t,function(t){return e.decode(t)}):t},t}(),h=function(){function t(t,e){void 0===e&&(e="us-central1"),this.app_=t,this.region_=e,this.serializer=new c,this.emulatorOrigin=null,this.contextProvider=new s(t)}return Object.defineProperty(t.prototype,"app",{get:function(){return this.app_},enumerable:!0,configurable:!0}),t.prototype._url=function(t){var e=this.app_.options.projectId,n=this.region_;return null!==this.emulatorOrigin?this.emulatorOrigin+"/"+e+"/"+n+"/"+t:"https://"+n+"-"+e+".cloudfunctions.net/"+t},t.prototype.useFunctionsEmulator=function(t){this.emulatorOrigin=t},t.prototype.httpsCallable=function(t){var e=this;return function(n){return e.call(t,n)}},t.prototype.postJSON=function(t,e,n){return r.__awaiter(this,void 0,void 0,function(){var i,o;return r.__generator(this,function(r){switch(r.label){case 0:n.append("Content-Type","application/json"),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,fetch(t,{method:"POST",body:JSON.stringify(e),headers:n})];case 2:return i=r.sent(),[3,4];case 3:return r.sent(),[2,{status:0,json:null}];case 4:o=null,r.label=5;case 5:return r.trys.push([5,7,,8]),[4,i.json()];case 6:return o=r.sent(),[3,8];case 7:return r.sent(),[3,8];case 8:return[2,{status:i.status,json:o}]}})})},t.prototype.call=function(t,e){return r.__awaiter(this,void 0,void 0,function(){var n,i,s,u,c,h,l;return r.__generator(this,function(r){switch(r.label){case 0:return n=this._url(t),e=this.serializer.encode(e),i={data:e},s=new Headers,[4,this.contextProvider.getContext()];case 1:return(u=r.sent()).authToken&&s.append("Authorization","Bearer "+u.authToken),u.instanceIdToken&&s.append("Firebase-Instance-ID-Token",u.instanceIdToken),[4,this.postJSON(n,i,s)];case 2:if(c=r.sent(),h=function(t,e,n){var r=function(t){if(t>=200&&t<300)return"ok";switch(t){case 0:return"internal";case 400:return"invalid-argument";case 401:return"unauthenticated";case 403:return"permission-denied";case 404:return"not-found";case 409:return"aborted";case 429:return"resource-exhausted";case 499:return"cancelled";case 500:return"internal";case 501:return"unimplemented";case 503:return"unavailable";case 504:return"deadline-exceeded"}return"unknown"}(t),i=r,s=void 0;try{var u=e.error;if(u){var c=u.status;if("string"==typeof c){if(!o[c])return new a("internal","internal");r=o[c]}i=c;var h=u.message;"string"==typeof h&&(i=h),void 0!==(s=u.details)&&(s=n.decode(s))}}catch(t){}return"ok"===r?null:new a(r,i,s)}(c.status,c.json,this.serializer))throw h;if(!c.json)throw new a("internal","Response is not valid JSON object.");if(void 0===(l=c.json.data)&&(l=c.json.result),void 0===l)throw new a("internal","Response is missing data field.");return[2,{data:this.serializer.decode(l)}]}})})},t}(),l="functions";function f(t,e,n){return new h(t,n)}function p(t){var e={Functions:h};t.INTERNAL.registerService(l,f,e,void 0,!0)}p(i),e.registerFunctions=p},function(t,e,n){"use strict";n.r(e);var r,i,o,a=n(2),s=n(0),u=n(1),c=n.n(u),h={AVAILABLE_IN_WINDOW:"only-available-in-window",AVAILABLE_IN_SW:"only-available-in-sw",SHOULD_BE_INHERITED:"should-be-overriden",BAD_SENDER_ID:"bad-sender-id",INCORRECT_GCM_SENDER_ID:"incorrect-gcm-sender-id",PERMISSION_DEFAULT:"permission-default",PERMISSION_BLOCKED:"permission-blocked",UNSUPPORTED_BROWSER:"unsupported-browser",NOTIFICATIONS_BLOCKED:"notifications-blocked",FAILED_DEFAULT_REGISTRATION:"failed-serviceworker-registration",SW_REGISTRATION_EXPECTED:"sw-registration-expected",GET_SUBSCRIPTION_FAILED:"get-subscription-failed",INVALID_SAVED_TOKEN:"invalid-saved-token",SW_REG_REDUNDANT:"sw-reg-redundant",TOKEN_SUBSCRIBE_FAILED:"token-subscribe-failed",TOKEN_SUBSCRIBE_NO_TOKEN:"token-subscribe-no-token",TOKEN_SUBSCRIBE_NO_PUSH_SET:"token-subscribe-no-push-set",TOKEN_UNSUBSCRIBE_FAILED:"token-unsubscribe-failed",TOKEN_UPDATE_FAILED:"token-update-failed",TOKEN_UPDATE_NO_TOKEN:"token-update-no-token",USE_SW_BEFORE_GET_TOKEN:"use-sw-before-get-token",INVALID_DELETE_TOKEN:"invalid-delete-token",DELETE_TOKEN_NOT_FOUND:"delete-token-not-found",DELETE_SCOPE_NOT_FOUND:"delete-scope-not-found",BG_HANDLER_FUNCTION_EXPECTED:"bg-handler-function-expected",NO_WINDOW_CLIENT_TO_MSG:"no-window-client-to-msg",UNABLE_TO_RESUBSCRIBE:"unable-to-resubscribe",NO_FCM_TOKEN_FOR_RESUBSCRIBE:"no-fcm-token-for-resubscribe",FAILED_TO_DELETE_TOKEN:"failed-to-delete-token",NO_SW_IN_REG:"no-sw-in-reg",BAD_SCOPE:"bad-scope",BAD_VAPID_KEY:"bad-vapid-key",BAD_SUBSCRIPTION:"bad-subscription",BAD_TOKEN:"bad-token",BAD_PUSH_SET:"bad-push-set",FAILED_DELETE_VAPID_KEY:"failed-delete-vapid-key",INVALID_PUBLIC_VAPID_KEY:"invalid-public-vapid-key",USE_PUBLIC_KEY_BEFORE_GET_TOKEN:"use-public-key-before-get-token",PUBLIC_KEY_DECRYPTION_FAILED:"public-vapid-key-decryption-failed"},l=((r={})[h.AVAILABLE_IN_WINDOW]="This method is available in a Window context.",r[h.AVAILABLE_IN_SW]="This method is available in a service worker context.",r[h.SHOULD_BE_INHERITED]="This method should be overriden by extended classes.",r[h.BAD_SENDER_ID]="Please ensure that 'messagingSenderId' is set correctly in the options passed into firebase.initializeApp().",r[h.PERMISSION_DEFAULT]="The required permissions were not granted and dismissed instead.",r[h.PERMISSION_BLOCKED]="The required permissions were not granted and blocked instead.",r[h.UNSUPPORTED_BROWSER]="This browser doesn't support the API's required to use the firebase SDK.",r[h.NOTIFICATIONS_BLOCKED]="Notifications have been blocked.",r[h.FAILED_DEFAULT_REGISTRATION]="We are unable to register the default service worker. {$browserErrorMessage}",r[h.SW_REGISTRATION_EXPECTED]="A service worker registration was the expected input.",r[h.GET_SUBSCRIPTION_FAILED]="There was an error when trying to get any existing Push Subscriptions.",r[h.INVALID_SAVED_TOKEN]="Unable to access details of the saved token.",r[h.SW_REG_REDUNDANT]="The service worker being used for push was made redundant.",r[h.TOKEN_SUBSCRIBE_FAILED]="A problem occured while subscribing the user to FCM: {$message}",r[h.TOKEN_SUBSCRIBE_NO_TOKEN]="FCM returned no token when subscribing the user to push.",r[h.TOKEN_SUBSCRIBE_NO_PUSH_SET]="FCM returned an invalid response when getting an FCM token.",r[h.TOKEN_UNSUBSCRIBE_FAILED]="A problem occured while unsubscribing the user from FCM: {$message}",r[h.TOKEN_UPDATE_FAILED]="A problem occured while updating the user from FCM: {$message}",r[h.TOKEN_UPDATE_NO_TOKEN]="FCM returned no token when updating the user to push.",r[h.USE_SW_BEFORE_GET_TOKEN]="The useServiceWorker() method may only be called once and must be called before calling getToken() to ensure your service worker is used.",r[h.INVALID_DELETE_TOKEN]="You must pass a valid token into deleteToken(), i.e. the token from getToken().",r[h.DELETE_TOKEN_NOT_FOUND]="The deletion attempt for token could not be performed as the token was not found.",r[h.DELETE_SCOPE_NOT_FOUND]="The deletion attempt for service worker scope could not be performed as the scope was not found.",r[h.BG_HANDLER_FUNCTION_EXPECTED]="The input to setBackgroundMessageHandler() must be a function.",r[h.NO_WINDOW_CLIENT_TO_MSG]="An attempt was made to message a non-existant window client.",r[h.UNABLE_TO_RESUBSCRIBE]="There was an error while re-subscribing the FCM token for push messaging. Will have to resubscribe the user on next visit. {$message}",r[h.NO_FCM_TOKEN_FOR_RESUBSCRIBE]="Could not find an FCM token and as a result, unable to resubscribe. Will have to resubscribe the user on next visit.",r[h.FAILED_TO_DELETE_TOKEN]="Unable to delete the currently saved token.",r[h.NO_SW_IN_REG]="Even though the service worker registration was successful, there was a problem accessing the service worker itself.",r[h.INCORRECT_GCM_SENDER_ID]="Please change your web app manifest's 'gcm_sender_id' value to '103953800507' to use Firebase messaging.",r[h.BAD_SCOPE]="The service worker scope must be a string with at least one character.",r[h.BAD_VAPID_KEY]="The public VAPID key is not a Uint8Array with 65 bytes.",r[h.BAD_SUBSCRIPTION]="The subscription must be a valid PushSubscription.",r[h.BAD_TOKEN]="The FCM Token used for storage / lookup was not a valid token string.",r[h.BAD_PUSH_SET]="The FCM push set used for storage / lookup was not not a valid push set string.",r[h.FAILED_DELETE_VAPID_KEY]="The VAPID key could not be deleted.",r[h.INVALID_PUBLIC_VAPID_KEY]="The public VAPID key must be a string.",r[h.PUBLIC_KEY_DECRYPTION_FAILED]="The public VAPID key did not equal 65 bytes when decrypted.",r),f=new a.ErrorFactory("messaging","Messaging",l),p=new Uint8Array([4,51,148,247,223,161,235,177,220,3,162,94,21,113,219,72,211,46,237,237,178,52,219,183,71,58,12,143,196,204,225,111,60,140,132,223,171,182,102,62,242,12,212,139,254,227,249,118,47,20,28,99,8,106,111,45,177,26,149,176,206,55,192,156,110]),d="https://fcm.googleapis.com";function v(t,e){if(null==t||null==e)return!1;if(t===e)return!0;if(t.byteLength!==e.byteLength)return!1;for(var n=new DataView(t),r=new DataView(e),i=0;i<t.byteLength;i++)if(n.getUint8(i)!==r.getUint8(i))return!1;return!0}function y(t){return function(t){var e=new Uint8Array(t);return btoa(String.fromCharCode.apply(null,e))}(t).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}!function(t){t.TYPE_OF_MSG="firebase-messaging-msg-type",t.DATA="firebase-messaging-msg-data"}(i||(i={})),function(t){t.PUSH_MSG_RECEIVED="push-msg-received",t.NOTIFICATION_CLICKED="notification-clicked"}(o||(o={}));var g=function(){function t(){}return t.prototype.getToken=function(t,e,n){return Object(s.__awaiter)(this,void 0,void 0,function(){var r,i,o,a,u,c,l,g;return Object(s.__generator)(this,function(s){switch(s.label){case 0:r=y(e.getKey("p256dh")),i=y(e.getKey("auth")),o="authorized_entity="+t+"&endpoint="+e.endpoint+"&encryption_key="+r+"&encryption_auth="+i,v(n.buffer,p.buffer)||(a=y(n),o+="&application_pub_key="+a),(u=new Headers).append("Content-Type","application/x-www-form-urlencoded"),c={method:"POST",headers:u,body:o},s.label=1;case 1:return s.trys.push([1,4,,5]),[4,fetch(d+"/fcm/connect/subscribe",c)];case 2:return[4,s.sent().json()];case 3:return l=s.sent(),[3,5];case 4:throw s.sent(),f.create(h.TOKEN_SUBSCRIBE_FAILED);case 5:if(l.error)throw g=l.error.message,f.create(h.TOKEN_SUBSCRIBE_FAILED,{message:g});if(!l.token)throw f.create(h.TOKEN_SUBSCRIBE_NO_TOKEN);if(!l.pushSet)throw f.create(h.TOKEN_SUBSCRIBE_NO_PUSH_SET);return[2,{token:l.token,pushSet:l.pushSet}]}})})},t.prototype.updateToken=function(t,e,n,r,i){return Object(s.__awaiter)(this,void 0,void 0,function(){var o,a,u,c,l,g,_,m;return Object(s.__generator)(this,function(s){switch(s.label){case 0:o=y(r.getKey("p256dh")),a=y(r.getKey("auth")),u="push_set="+n+"&token="+e+"&authorized_entity="+t+"&endpoint="+r.endpoint+"&encryption_key="+o+"&encryption_auth="+a,v(i.buffer,p.buffer)||(c=y(i),u+="&application_pub_key="+c),(l=new Headers).append("Content-Type","application/x-www-form-urlencoded"),g={method:"POST",headers:l,body:u},s.label=1;case 1:return s.trys.push([1,4,,5]),[4,fetch(d+"/fcm/connect/subscribe",g)];case 2:return[4,s.sent().json()];case 3:return _=s.sent(),[3,5];case 4:throw s.sent(),f.create(h.TOKEN_UPDATE_FAILED);case 5:if(_.error)throw m=_.error.message,f.create(h.TOKEN_UPDATE_FAILED,{message:m});if(!_.token)throw f.create(h.TOKEN_UPDATE_NO_TOKEN);return[2,_.token]}})})},t.prototype.deleteToken=function(t,e,n){return Object(s.__awaiter)(this,void 0,void 0,function(){var r,i,o,a,u;return Object(s.__generator)(this,function(s){switch(s.label){case 0:r="authorized_entity="+t+"&token="+e+"&pushSet="+n,(i=new Headers).append("Content-Type","application/x-www-form-urlencoded"),o={method:"POST",headers:i,body:r},s.label=1;case 1:return s.trys.push([1,4,,5]),[4,fetch(d+"/fcm/connect/unsubscribe",o)];case 2:return[4,s.sent().json()];case 3:if((a=s.sent()).error)throw u=a.error.message,f.create(h.TOKEN_UNSUBSCRIBE_FAILED,{message:u});return[3,5];case 4:throw s.sent(),f.create(h.TOKEN_UNSUBSCRIBE_FAILED);case 5:return[2]}})})},t}();function _(t){for(var e=(t+"=".repeat((4-t.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=atob(e),r=new Uint8Array(n.length),i=0;i<n.length;++i)r[i]=n.charCodeAt(i);return r}var m="undefined",b="fcm_token_object_Store";function w(){var t=indexedDB.open(m);t.onerror=function(t){},t.onsuccess=function(e){!function(t){if(t.objectStoreNames.contains(b)){var e=t.transaction(b).objectStore(b),n=new g,r=e.openCursor();r.onerror=function(t){console.warn("Unable to cleanup old IDB.",t)},r.onsuccess=function(){var e=r.result;if(e){var i=e.value;n.deleteToken(i.fcmSenderId,i.fcmToken,i.fcmPushSet),e.continue()}else t.close(),indexedDB.deleteDatabase(m)}}}(t.result)}}var E=function(){function t(){this.dbPromise=null}return t.prototype.get=function(t){return this.createTransaction(function(e){return e.get(t)})},t.prototype.getIndex=function(t,e){return this.createTransaction(function(n){return n.index(t).get(e)})},t.prototype.put=function(t){return this.createTransaction(function(e){return e.put(t)},"readwrite")},t.prototype.delete=function(t){return this.createTransaction(function(e){return e.delete(t)},"readwrite")},t.prototype.closeDatabase=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){switch(t.label){case 0:return this.dbPromise?[4,this.dbPromise]:[3,2];case 1:t.sent().close(),this.dbPromise=null,t.label=2;case 2:return[2]}})})},t.prototype.createTransaction=function(t,e){return void 0===e&&(e="readonly"),Object(s.__awaiter)(this,void 0,void 0,function(){var n,r,i,o;return Object(s.__generator)(this,function(a){switch(a.label){case 0:return[4,this.getDb()];case 1:return n=a.sent(),r=n.transaction(this.objectStoreName,e),i=r.objectStore(this.objectStoreName),[4,function(t){return new Promise(function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}})}(t(i))];case 2:return o=a.sent(),[2,new Promise(function(t,e){r.oncomplete=function(){t(o)},r.onerror=function(){e(r.error)}})]}})})},t.prototype.getDb=function(){var t=this;return this.dbPromise||(this.dbPromise=new Promise(function(e,n){var r=indexedDB.open(t.dbName,t.dbVersion);r.onsuccess=function(){e(r.result)},r.onerror=function(){t.dbPromise=null,n(r.error)},r.onupgradeneeded=function(e){return t.onDbUpgrade(r,e)}})),this.dbPromise},t}();var T=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.dbName="fcm_token_details_db",e.dbVersion=3,e.objectStoreName="fcm_token_object_Store",e}return Object(s.__extends)(e,t),e.prototype.onDbUpgrade=function(t,e){var n=t.result;switch(e.oldVersion){case 0:(r=n.createObjectStore(this.objectStoreName,{keyPath:"swScope"})).createIndex("fcmSenderId","fcmSenderId",{unique:!1}),r.createIndex("fcmToken","fcmToken",{unique:!0});case 1:w();case 2:var r,i=(r=t.transaction.objectStore(this.objectStoreName)).openCursor();i.onsuccess=function(){var t=i.result;if(t){var e=t.value,n=Object(s.__assign)({},e);e.createTime||(n.createTime=Date.now()),"string"==typeof e.vapidKey&&(n.vapidKey=_(e.vapidKey)),"string"==typeof e.auth&&(n.auth=_(e.auth).buffer),"string"==typeof e.auth&&(n.p256dh=_(e.p256dh).buffer),t.update(n),t.continue()}}}},e.prototype.getTokenDetailsFromToken=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(e){if(!t)throw f.create(h.BAD_TOKEN);return S({fcmToken:t}),[2,this.getIndex("fcmToken",t)]})})},e.prototype.getTokenDetailsFromSWScope=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(e){if(!t)throw f.create(h.BAD_SCOPE);return S({swScope:t}),[2,this.get(t)]})})},e.prototype.saveTokenDetails=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(e){if(!t.swScope)throw f.create(h.BAD_SCOPE);if(!t.vapidKey)throw f.create(h.BAD_VAPID_KEY);if(!t.endpoint||!t.auth||!t.p256dh)throw f.create(h.BAD_SUBSCRIPTION);if(!t.fcmSenderId)throw f.create(h.BAD_SENDER_ID);if(!t.fcmToken)throw f.create(h.BAD_TOKEN);if(!t.fcmPushSet)throw f.create(h.BAD_PUSH_SET);return S(t),[2,this.put(t)]})})},e.prototype.deleteToken=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:return"string"!=typeof t||0===t.length?[2,Promise.reject(f.create(h.INVALID_DELETE_TOKEN))]:[4,this.getTokenDetailsFromToken(t)];case 1:if(!(e=n.sent()))throw f.create(h.DELETE_TOKEN_NOT_FOUND);return[4,this.delete(e.swScope)];case 2:return n.sent(),[2,e]}})})},e}(E);function S(t){if(t.fcmToken&&("string"!=typeof t.fcmToken||0===t.fcmToken.length))throw f.create(h.BAD_TOKEN);if(t.swScope&&("string"!=typeof t.swScope||0===t.swScope.length))throw f.create(h.BAD_SCOPE);if(t.vapidKey&&(!(t.vapidKey instanceof Uint8Array)||65!==t.vapidKey.length))throw f.create(h.BAD_VAPID_KEY);if(t.endpoint&&("string"!=typeof t.endpoint||0===t.endpoint.length))throw f.create(h.BAD_SUBSCRIPTION);if(t.auth&&!(t.auth instanceof ArrayBuffer))throw f.create(h.BAD_SUBSCRIPTION);if(t.p256dh&&!(t.p256dh instanceof ArrayBuffer))throw f.create(h.BAD_SUBSCRIPTION);if(t.fcmSenderId&&("string"!=typeof t.fcmSenderId||0===t.fcmSenderId.length))throw f.create(h.BAD_SENDER_ID);if(t.fcmPushSet&&("string"!=typeof t.fcmPushSet||0===t.fcmPushSet.length))throw f.create(h.BAD_PUSH_SET)}var C=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.dbName="fcm_vapid_details_db",e.dbVersion=1,e.objectStoreName="fcm_vapid_object_Store",e}return Object(s.__extends)(e,t),e.prototype.onDbUpgrade=function(t){t.result.createObjectStore(this.objectStoreName,{keyPath:"swScope"})},e.prototype.getVapidFromSWScope=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:if("string"!=typeof t||0===t.length)throw f.create(h.BAD_SCOPE);return[4,this.get(t)];case 1:return[2,(e=n.sent())?e.vapidKey:void 0]}})})},e.prototype.saveVapidDetails=function(t,e){return Object(s.__awaiter)(this,void 0,void 0,function(){var n;return Object(s.__generator)(this,function(r){if("string"!=typeof t||0===t.length)throw f.create(h.BAD_SCOPE);if(null===e||65!==e.length)throw f.create(h.BAD_VAPID_KEY);return n={swScope:t,vapidKey:e},[2,this.put(n)]})})},e.prototype.deleteVapidDetails=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:return[4,this.getVapidFromSWScope(t)];case 1:if(!(e=n.sent()))throw f.create(h.DELETE_SCOPE_NOT_FOUND);return[4,this.delete(t)];case 2:return n.sent(),[2,e]}})})},e}(E),I="messagingSenderId",N=function(){function t(t){var e=this;if(!t.options[I]||"string"!=typeof t.options[I])throw f.create(h.BAD_SENDER_ID);this.messagingSenderId=t.options[I],this.tokenDetailsModel=new T,this.vapidDetailsModel=new C,this.iidModel=new g,this.app=t,this.INTERNAL={delete:function(){return e.delete()}}}return t.prototype.getToken=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){var t,e,n,r,i;return Object(s.__generator)(this,function(o){switch(o.label){case 0:if("denied"===(t=this.getNotificationPermission_()))throw f.create(h.NOTIFICATIONS_BLOCKED);return"granted"!==t?[2,null]:[4,this.getSWRegistration_()];case 1:return e=o.sent(),[4,this.getPublicVapidKey_()];case 2:return n=o.sent(),[4,this.getPushSubscription(e,n)];case 3:return r=o.sent(),[4,this.tokenDetailsModel.getTokenDetailsFromSWScope(e.scope)];case 4:return(i=o.sent())?[2,this.manageExistingToken(e,r,n,i)]:[2,this.getNewToken(e,r,n)]}})})},t.prototype.manageExistingToken=function(t,e,n,r){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(i){switch(i.label){case 0:return function(t,e,n){if(!n.vapidKey||!v(e.buffer,n.vapidKey.buffer))return!1;var r=t.endpoint===n.endpoint,i=v(t.getKey("auth"),n.auth),o=v(t.getKey("p256dh"),n.p256dh);return r&&i&&o}(e,n,r)?Date.now()<r.createTime+6048e5?[2,r.fcmToken]:[2,this.updateToken(t,e,n,r)]:[4,this.deleteTokenFromDB(r.fcmToken)];case 1:return i.sent(),[2,this.getNewToken(t,e,n)]}})})},t.prototype.updateToken=function(t,e,n,r){return Object(s.__awaiter)(this,void 0,void 0,function(){var i,o,a;return Object(s.__generator)(this,function(s){switch(s.label){case 0:return s.trys.push([0,4,,6]),[4,this.iidModel.updateToken(this.messagingSenderId,r.fcmToken,r.fcmPushSet,e,n)];case 1:return i=s.sent(),o={swScope:t.scope,vapidKey:n,fcmSenderId:this.messagingSenderId,fcmToken:i,fcmPushSet:r.fcmPushSet,createTime:Date.now(),endpoint:e.endpoint,auth:e.getKey("auth"),p256dh:e.getKey("p256dh")},[4,this.tokenDetailsModel.saveTokenDetails(o)];case 2:return s.sent(),[4,this.vapidDetailsModel.saveVapidDetails(t.scope,n)];case 3:return s.sent(),[2,i];case 4:return a=s.sent(),[4,this.deleteToken(r.fcmToken)];case 5:throw s.sent(),a;case 6:return[2]}})})},t.prototype.getNewToken=function(t,e,n){return Object(s.__awaiter)(this,void 0,void 0,function(){var r,i;return Object(s.__generator)(this,function(o){switch(o.label){case 0:return[4,this.iidModel.getToken(this.messagingSenderId,e,n)];case 1:return r=o.sent(),i={swScope:t.scope,vapidKey:n,fcmSenderId:this.messagingSenderId,fcmToken:r.token,fcmPushSet:r.pushSet,createTime:Date.now(),endpoint:e.endpoint,auth:e.getKey("auth"),p256dh:e.getKey("p256dh")},[4,this.tokenDetailsModel.saveTokenDetails(i)];case 2:return o.sent(),[4,this.vapidDetailsModel.saveVapidDetails(t.scope,n)];case 3:return o.sent(),[2,r.token]}})})},t.prototype.deleteToken=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n;return Object(s.__generator)(this,function(r){switch(r.label){case 0:return[4,this.deleteTokenFromDB(t)];case 1:return r.sent(),[4,this.getSWRegistration_()];case 2:return(e=r.sent())?[4,e.pushManager.getSubscription()]:[3,4];case 3:if(n=r.sent())return[2,n.unsubscribe()];r.label=4;case 4:return[2,!0]}})})},t.prototype.deleteTokenFromDB=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:return[4,this.tokenDetailsModel.deleteToken(t)];case 1:return e=n.sent(),[4,this.iidModel.deleteToken(e.fcmSenderId,e.fcmToken,e.fcmPushSet)];case 2:return n.sent(),[2]}})})},t.prototype.getPushSubscription=function(t,e){return t.pushManager.getSubscription().then(function(n){return n||t.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})})},t.prototype.requestPermission=function(){throw f.create(h.AVAILABLE_IN_WINDOW)},t.prototype.useServiceWorker=function(t){throw f.create(h.AVAILABLE_IN_WINDOW)},t.prototype.usePublicVapidKey=function(t){throw f.create(h.AVAILABLE_IN_WINDOW)},t.prototype.onMessage=function(t,e,n){throw f.create(h.AVAILABLE_IN_WINDOW)},t.prototype.onTokenRefresh=function(t,e,n){throw f.create(h.AVAILABLE_IN_WINDOW)},t.prototype.setBackgroundMessageHandler=function(t){throw f.create(h.AVAILABLE_IN_SW)},t.prototype.delete=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){switch(t.label){case 0:return[4,Promise.all([this.tokenDetailsModel.closeDatabase(),this.vapidDetailsModel.closeDatabase()])];case 1:return t.sent(),[2]}})})},t.prototype.getNotificationPermission_=function(){return Notification.permission},t.prototype.getTokenDetailsModel=function(){return this.tokenDetailsModel},t.prototype.getVapidDetailsModel=function(){return this.vapidDetailsModel},t.prototype.getIidModel=function(){return this.iidModel},t}();var O=function(t){function e(e){var n=t.call(this,e)||this;return n.bgMessageHandler=null,self.addEventListener("push",function(t){n.onPush(t)}),self.addEventListener("pushsubscriptionchange",function(t){n.onSubChange(t)}),self.addEventListener("notificationclick",function(t){n.onNotificationClick(t)}),n}return Object(s.__extends)(e,t),e.prototype.onPush=function(t){t.waitUntil(this.onPush_(t))},e.prototype.onSubChange=function(t){t.waitUntil(this.onSubChange_(t))},e.prototype.onNotificationClick=function(t){t.waitUntil(this.onNotificationClick_(t))},e.prototype.onPush_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n,r,i,o,a;return Object(s.__generator)(this,function(s){switch(s.label){case 0:if(!t.data)return[2];try{e=t.data.json()}catch(t){return[2]}return[4,this.hasVisibleClients_()];case 1:return s.sent()?[2,this.sendMessageToWindowClients_(e)]:(n=this.getNotificationData_(e))?(r=n.title||"",[4,this.getSWRegistration_()]):[3,3];case 2:return i=s.sent(),o=n.actions,a=Notification.maxActions,o&&a&&o.length>a&&console.warn("This browser only supports "+a+" actions.The remaining actions will not be displayed."),[2,i.showNotification(r,n)];case 3:return this.bgMessageHandler?[4,this.bgMessageHandler(e)]:[3,5];case 4:return s.sent(),[2];case 5:return[2]}})})},e.prototype.onSubChange_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var t,e,n,r;return Object(s.__generator)(this,function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this.getSWRegistration_()];case 1:return t=i.sent(),[3,3];case 2:throw e=i.sent(),f.create(h.UNABLE_TO_RESUBSCRIBE,{message:e});case 3:return i.trys.push([3,5,,8]),[4,t.pushManager.getSubscription()];case 4:return i.sent(),[3,8];case 5:return n=i.sent(),[4,this.getTokenDetailsModel().getTokenDetailsFromSWScope(t.scope)];case 6:if(!(r=i.sent()))throw n;return[4,this.deleteToken(r.fcmToken)];case 7:throw i.sent(),n;case 8:return[2]}})})},e.prototype.onNotificationClick_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n,r,i;return Object(s.__generator)(this,function(a){switch(a.label){case 0:return t.notification&&t.notification.data&&t.notification.data.FCM_MSG?t.action?[2]:(t.stopImmediatePropagation(),t.notification.close(),(e=t.notification.data.FCM_MSG).notification&&(n=e.fcmOptions&&e.fcmOptions.link||e.notification.click_action)?[4,this.getWindowClient_(n)]:[2]):[2];case 1:return(r=a.sent())?[3,3]:[4,self.clients.openWindow(n)];case 2:return r=a.sent(),[3,5];case 3:return[4,r.focus()];case 4:r=a.sent(),a.label=5;case 5:return r?(delete e.notification,delete e.fcmOptions,i=k(o.NOTIFICATION_CLICKED,e),[2,this.attemptToMessageClient_(r,i)]):[2]}})})},e.prototype.getNotificationData_=function(t){if(t&&"object"==typeof t.notification){var e,n=Object(s.__assign)({},t.notification);return n.data=Object(s.__assign)({},t.notification.data,((e={}).FCM_MSG=t,e)),n}},e.prototype.setBackgroundMessageHandler=function(t){if(!t||"function"!=typeof t)throw f.create(h.BG_HANDLER_FUNCTION_EXPECTED);this.bgMessageHandler=t},e.prototype.getWindowClient_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n,r,i;return Object(s.__generator)(this,function(o){switch(o.label){case 0:return e=new URL(t,self.location.href).href,[4,A()];case 1:for(n=o.sent(),r=null,i=0;i<n.length;i++)if(new URL(n[i].url,self.location.href).href===e){r=n[i];break}return[2,r]}})})},e.prototype.attemptToMessageClient_=function(t,e){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(n){if(!t)throw f.create(h.NO_WINDOW_CLIENT_TO_MSG);return t.postMessage(e),[2]})})},e.prototype.hasVisibleClients_=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){switch(t.label){case 0:return[4,A()];case 1:return[2,t.sent().some(function(t){return"visible"===t.visibilityState})]}})})},e.prototype.sendMessageToWindowClients_=function(t){return Object(s.__awaiter)(this,void 0,void 0,function(){var e,n,r=this;return Object(s.__generator)(this,function(i){switch(i.label){case 0:return[4,A()];case 1:return e=i.sent(),n=k(o.PUSH_MSG_RECEIVED,t),[4,Promise.all(e.map(function(t){return r.attemptToMessageClient_(t,n)}))];case 2:return i.sent(),[2]}})})},e.prototype.getSWRegistration_=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){return[2,self.registration]})})},e.prototype.getPublicVapidKey_=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){var t,e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:return[4,this.getSWRegistration_()];case 1:if(!(t=n.sent()))throw f.create(h.SW_REGISTRATION_EXPECTED);return[4,this.getVapidDetailsModel().getVapidFromSWScope(t.scope)];case 2:return null==(e=n.sent())?[2,p]:[2,e]}})})},e}(N);function A(){return self.clients.matchAll({type:"window",includeUncontrolled:!0})}function k(t,e){return(n={})[i.TYPE_OF_MSG]=t,n[i.DATA]=e,n;var n}var P=function(t){function e(e){var n=t.call(this,e)||this;return n.registrationToUse=null,n.publicVapidKeyToUse=null,n.manifestCheckPromise=null,n.messageObserver=null,n.tokenRefreshObserver=null,n.onMessageInternal=Object(a.createSubscribe)(function(t){n.messageObserver=t}),n.onTokenRefreshInternal=Object(a.createSubscribe)(function(t){n.tokenRefreshObserver=t}),n.setupSWMessageListener_(),n}return Object(s.__extends)(e,t),e.prototype.getToken=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(e){switch(e.label){case 0:return this.manifestCheckPromise||(this.manifestCheckPromise=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){var t,e;return Object(s.__generator)(this,function(n){switch(n.label){case 0:if(!(t=document.querySelector('link[rel="manifest"]')))return[2];n.label=1;case 1:return n.trys.push([1,4,,5]),[4,fetch(t.href)];case 2:return[4,n.sent().json()];case 3:return e=n.sent(),[3,5];case 4:return n.sent(),[2];case 5:if(!e||!e.gcm_sender_id)return[2];if("103953800507"!==e.gcm_sender_id)throw f.create(h.INCORRECT_GCM_SENDER_ID);return[2]}})})}()),[4,this.manifestCheckPromise];case 1:return e.sent(),[2,t.prototype.getToken.call(this)]}})})},e.prototype.requestPermission=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){var t;return Object(s.__generator)(this,function(e){switch(e.label){case 0:return"granted"===this.getNotificationPermission_()?[2]:[4,Notification.requestPermission()];case 1:if("granted"===(t=e.sent()))return[2];throw"denied"===t?f.create(h.PERMISSION_BLOCKED):f.create(h.PERMISSION_DEFAULT)}})})},e.prototype.useServiceWorker=function(t){if(!(t instanceof ServiceWorkerRegistration))throw f.create(h.SW_REGISTRATION_EXPECTED);if(null!=this.registrationToUse)throw f.create(h.USE_SW_BEFORE_GET_TOKEN);this.registrationToUse=t},e.prototype.usePublicVapidKey=function(t){if("string"!=typeof t)throw f.create(h.INVALID_PUBLIC_VAPID_KEY);if(null!=this.publicVapidKeyToUse)throw f.create(h.USE_PUBLIC_KEY_BEFORE_GET_TOKEN);var e=_(t);if(65!==e.length)throw f.create(h.PUBLIC_KEY_DECRYPTION_FAILED);this.publicVapidKeyToUse=e},e.prototype.onMessage=function(t,e,n){return"function"==typeof t?this.onMessageInternal(t,e,n):this.onMessageInternal(t)},e.prototype.onTokenRefresh=function(t,e,n){return"function"==typeof t?this.onTokenRefreshInternal(t,e,n):this.onTokenRefreshInternal(t)},e.prototype.waitForRegistrationToActivate_=function(t){var e=t.installing||t.waiting||t.active;return new Promise(function(n,r){if(e)if("activated"!==e.state)if("redundant"!==e.state){var i=function(){if("activated"===e.state)n(t);else{if("redundant"!==e.state)return;r(f.create(h.SW_REG_REDUNDANT))}e.removeEventListener("statechange",i)};e.addEventListener("statechange",i)}else r(f.create(h.SW_REG_REDUNDANT));else n(t);else r(f.create(h.NO_SW_IN_REG))})},e.prototype.getSWRegistration_=function(){var t=this;return this.registrationToUse?this.waitForRegistrationToActivate_(this.registrationToUse):(this.registrationToUse=null,navigator.serviceWorker.register("/firebase-messaging-sw.js",{scope:"/firebase-cloud-messaging-push-scope"}).catch(function(t){throw f.create(h.FAILED_DEFAULT_REGISTRATION,{browserErrorMessage:t.message})}).then(function(e){return t.waitForRegistrationToActivate_(e).then(function(){return t.registrationToUse=e,e.update(),e})}))},e.prototype.getPublicVapidKey_=function(){return Object(s.__awaiter)(this,void 0,void 0,function(){return Object(s.__generator)(this,function(t){return this.publicVapidKeyToUse?[2,this.publicVapidKeyToUse]:[2,p]})})},e.prototype.setupSWMessageListener_=function(){var t=this;navigator.serviceWorker.addEventListener("message",function(e){if(e.data&&e.data[i.TYPE_OF_MSG]){var n=e.data;switch(n[i.TYPE_OF_MSG]){case o.PUSH_MSG_RECEIVED:case o.NOTIFICATION_CLICKED:var r=n[i.DATA];t.messageObserver&&t.messageObserver.next(r)}}},!1)},e}(N);function D(){return self&&"ServiceWorkerGlobalScope"in self?"PushManager"in self&&"Notification"in self&&ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification")&&PushSubscription.prototype.hasOwnProperty("getKey"):navigator.cookieEnabled&&"serviceWorker"in navigator&&"PushManager"in window&&"Notification"in window&&"fetch"in window&&ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification")&&PushSubscription.prototype.hasOwnProperty("getKey")}!function(t){var e={isSupported:D};t.INTERNAL.registerService("messaging",function(t){if(!D())throw f.create(h.UNSUPPORTED_BROWSER);return self&&"ServiceWorkerGlobalScope"in self?new O(t):new P(t)},e)}(c.a)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,