!function(e){function n(n){for(var r,u,s=n[0],a=n[1],c=n[2],l=0,d=[];l<s.length;l++)u=s[l],o[u]&&d.push(o[u][0]),o[u]=0;for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r]);for(f&&f(n);d.length;)d.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var e,n=0;n<i.length;n++){for(var t=i[n],r=!0,s=1;s<t.length;s++){var a=t[s];0!==o[a]&&(r=!1)}r&&(i.splice(n--,1),e=u(u.s=t[0]))}return e}var r={},o={1:0},i=[];function u(n){if(r[n])return r[n].exports;var t=r[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,u),t.l=!0,t.exports}u.m=e,u.c=r,u.d=function(e,n,t){u.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},u.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.t=function(e,n){if(1&n&&(e=u(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(u.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)u.d(t,r,function(n){return e[n]}.bind(null,r));return t},u.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(n,"a",n),n},u.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},u.p="",u.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],a=s.push.bind(s);s.push=n,s=s.slice();for(var c=0;c<s.length;c++)n(s[c]);var f=a;i.push([167,0]),t()}({167:function(e,n,t){"use strict";(function(){var e=function(e){return function(){var n=e.apply(this,arguments);return new Promise(function(e,t){return function r(o,i){try{var u=n[o](i),s=u.value}catch(e){return void t(e)}if(!u.done)return Promise.resolve(s).then(function(e){r("next",e)},function(e){r("throw",e)});e(s)}("next")})}}(regeneratorRuntime.mark(function e(){var n,r,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=document.createElement("div"),e.next=3,t.e(0).then(t.t.bind(null,397,7));case 3:return r=e.sent,o=r.default,n.innerHTML=o.join(["Hello","react webpack"]," "),e.abrupt("return",n);case 7:case"end":return e.stop()}},e,this)}))})(),r(t(60)),t(82),r(t(176)),r(t(177));function r(e){return e&&e.__esModule?e:{default:e}}},176:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=i(t(60)),o=i(t(82));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(){return r.default.createElement("div",null,r.default.createElement("p",null,"React here!"))};n.default=u,o.default.render(r.default.createElement(u,null),document.getElementById("app"))},177:function(e,n,t){"use strict";(function(e,n){var r=a(t(178)),o=a(t(13)),i=a(t(303)),u=a(t(379)),s=a(t(387));function a(e){return e&&e.__esModule?e:{default:e}}r.default.setGCMAPIKey("AIzaSyAcWFi5XIFAY_L9Kkfh2fT46p_rFJyjDHA");var c="BOew5Tx7fTX51GzJ7tpF3dDLNS54OvUST_dGGqzJEy54jqW2qghIRTiK7BfOpCPp8xNfMH7Mtprl3hp_WGjgslU",f="ymblNrJSzlXdRMhFYdXh1Hda8HkIO76aVs85X93wAjc";r.default.setVapidDetails("mailto:donaldboulton@gmail.com",c,f);var l=new s.default({filename:o.default.join(e,"public/subscription-store.db"),autoload:!0});function d(){return new Promise(function(e,n){l.find({},function(t,r){t?n(t):e(r)})})}var p=(0,i.default)();p.use(i.default.static(o.default.join(e,"/"))),p.use(u.default.json()),p.use(u.default.text()),p.post("/api/save-subscription/",function(e,n){if(function(e,n){return!(!e.body||!e.body.endpoint)||(n.status(400),n.setHeader("Content-Type","application/json"),n.send(JSON.stringify({error:{id:"no-endpoint",message:"Subscription must have an endpoint."}})),!1)}(e,n))return function(e){return new Promise(function(n,t){l.insert(e,function(e,r){e?t(e):n(r._id)})})}(e.body).then(function(e){n.setHeader("Content-Type","application/json"),n.send(JSON.stringify({data:{success:!0}}))}).catch(function(e){n.status(500),n.setHeader("Content-Type","application/json"),n.send(JSON.stringify({error:{id:"unable-to-save-subscription",message:"The subscription was received but we were unable to save it to our database."}}))})}),p.post("/api/get-subscriptions/",function(e,n){return d().then(function(e){var t=e.map(function(e){return{id:e._id,endpoint:e.endpoint}});n.setHeader("Content-Type","application/json"),n.send(JSON.stringify({data:{subscriptions:t}}))}).catch(function(e){n.status(500),n.setHeader("Content-Type","application/json"),n.send(JSON.stringify({error:{id:"unable-to-get-subscriptions",message:"We were unable to get the subscriptions from our database."}}))})});var v=function(e,n){return r.default.sendNotification(e,n).catch(function(n){if(410===n.statusCode)return function(e){return new Promise(function(n,t){l.remove({_id:e},{},function(e){e?t(e):n()})})}(e._id);console.log("Subscription is no longer valid: ",n)})};p.post("/api/trigger-push-msg/",function(e,n){var t=JSON.stringify(e.body);return d().then(function(e){for(var n=Promise.resolve(),r=function(r){var o=e[r];n=n.then(function(){return v(o,t)})},o=0;o<e.length;o++)r(o);return n}).then(function(){n.setHeader("Content-Type","application/json"),n.send(JSON.stringify({data:{success:!0}}))}).catch(function(e){n.status(500),n.setHeader("Content-Type","application/json"),n.send(JSON.stringify({error:{id:"unable-to-send-messages",message:"We were unable to send messages to all subscriptions : '"+e.message+"'"}}))})});var b=n.env.PORT||3e3,h=(p.listen(b,function(){console.log("Running on http://localhost:"+b)}),new(t(396)));h.postMessage("pageB"),h.onmessage=function(e){e.data}}).call(this,"/",t(3))},183:function(e,n){},185:function(e,n){},218:function(e,n){},219:function(e,n){},288:function(e,n){},290:function(e,n){},325:function(e,n){},326:function(e,n){},352:function(e,n){},357:function(e,n){function t(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=357},396:function(e,n,t){e.exports=function(){return new Worker(t.p+"hash.worker.js")}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,